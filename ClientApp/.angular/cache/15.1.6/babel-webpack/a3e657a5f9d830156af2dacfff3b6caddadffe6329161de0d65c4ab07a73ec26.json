{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ContentChild, Directive, ElementRef, Input, TemplateRef, ChangeDetectionStrategy, Component, IterableDiffers, ViewContainerRef, ViewEncapsulation, Attribute, ChangeDetectorRef, ContentChildren, Inject, isDevMode, Optional, ViewChild, InjectionToken, NgModule } from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { isDataSource } from '@angular/cdk/collections';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nconst _c0 = [[[\"caption\"]]];\nconst _c1 = [\"caption\"];\nfunction CdkTextColumn_th_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"th\", 3);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r0.justify);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r0.headerText, \" \");\n  }\n}\nfunction CdkTextColumn_td_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\", 4);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const data_r2 = ctx.$implicit;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r1.justify);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r1.dataAccessor(data_r2, ctx_r1.name), \" \");\n  }\n}\nexport { DataSource } from '@angular/cdk/collections';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { BehaviorSubject, Observable, of, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * \\@docs-private\n * @template T\n * @param {?} base\n * @return {?}\n */\nfunction mixinHasStickyInput(base) {\n  return class extends base {\n    /**\n     * @param {...?} args\n     */\n    constructor(...args) {\n      super(...args);\n      this._sticky = false;\n      /**\n       * Whether the sticky input has changed since it was last checked.\n       */\n      this._hasStickyChanged = false;\n    }\n    /**\n     * Whether sticky positioning should be applied.\n     * @return {?}\n     */\n    get sticky() {\n      return this._sticky;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set sticky(v) {\n      /** @type {?} */\n      const prevValue = this._sticky;\n      this._sticky = coerceBooleanProperty(v);\n      this._hasStickyChanged = prevValue !== this._sticky;\n    }\n    /**\n     * Whether the sticky value has changed since this was last called.\n     * @return {?}\n     */\n    hasStickyChanged() {\n      /** @type {?} */\n      const hasStickyChanged = this._hasStickyChanged;\n      this._hasStickyChanged = false;\n      return hasStickyChanged;\n    }\n    /**\n     * Resets the dirty check for cases where the sticky state has been used without checking.\n     * @return {?}\n     */\n    resetStickyChanged() {\n      this._hasStickyChanged = false;\n    }\n  };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass CdkCellDef {\n  /**\n   * @param {?} template\n   */\n  constructor( /** @docs-private */template) {\n    this.template = template;\n  }\n}\nCdkCellDef.ɵfac = function CdkCellDef_Factory(t) {\n  return new (t || CdkCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\nCdkCellDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkCellDef,\n  selectors: [[\"\", \"cdkCellDef\", \"\"]]\n});\n/** @nocollapse */\nCdkCellDef.ctorParameters = () => [{\n  type: TemplateRef\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkCellDef]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass CdkHeaderCellDef {\n  /**\n   * @param {?} template\n   */\n  constructor( /** @docs-private */template) {\n    this.template = template;\n  }\n}\nCdkHeaderCellDef.ɵfac = function CdkHeaderCellDef_Factory(t) {\n  return new (t || CdkHeaderCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\nCdkHeaderCellDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkHeaderCellDef,\n  selectors: [[\"\", \"cdkHeaderCellDef\", \"\"]]\n});\n/** @nocollapse */\nCdkHeaderCellDef.ctorParameters = () => [{\n  type: TemplateRef\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkHeaderCellDef]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass CdkFooterCellDef {\n  /**\n   * @param {?} template\n   */\n  constructor( /** @docs-private */template) {\n    this.template = template;\n  }\n}\nCdkFooterCellDef.ɵfac = function CdkFooterCellDef_Factory(t) {\n  return new (t || CdkFooterCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\nCdkFooterCellDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkFooterCellDef,\n  selectors: [[\"\", \"cdkFooterCellDef\", \"\"]]\n});\n/** @nocollapse */\nCdkFooterCellDef.ctorParameters = () => [{\n  type: TemplateRef\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkFooterCellDef]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\n// Boilerplate for applying mixins to CdkColumnDef.\n/**\n * \\@docs-private\n */\nclass CdkColumnDefBase {}\n/** @type {?} */\nconst _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nclass CdkColumnDef extends _CdkColumnDefBase {\n  constructor() {\n    super(...arguments);\n    this._stickyEnd = false;\n  }\n  /**\n   * Unique name for this column.\n   * @return {?}\n   */\n  get name() {\n    return this._name;\n  }\n  /**\n   * @param {?} name\n   * @return {?}\n   */\n  set name(name) {\n    // If the directive is set without a name (updated programatically), then this setter will\n    // trigger with an empty string and should not overwrite the programatically set value.\n    if (!name) {\n      return;\n    }\n    this._name = name;\n    this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');\n  }\n  /**\n   * Whether this column should be sticky positioned on the end of the row. Should make sure\n   * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n   * has been changed.\n   * @return {?}\n   */\n  get stickyEnd() {\n    return this._stickyEnd;\n  }\n  /**\n   * @param {?} v\n   * @return {?}\n   */\n  set stickyEnd(v) {\n    /** @type {?} */\n    const prevValue = this._stickyEnd;\n    this._stickyEnd = coerceBooleanProperty(v);\n    this._hasStickyChanged = prevValue !== this._stickyEnd;\n  }\n}\nCdkColumnDef.ɵfac = /*@__PURE__*/function () {\n  let ɵCdkColumnDef_BaseFactory;\n  return function CdkColumnDef_Factory(t) {\n    return (ɵCdkColumnDef_BaseFactory || (ɵCdkColumnDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(CdkColumnDef)))(t || CdkColumnDef);\n  };\n}();\nCdkColumnDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkColumnDef,\n  selectors: [[\"\", \"cdkColumnDef\", \"\"]],\n  contentQueries: function CdkColumnDef_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkCellDef, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderCellDef, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterCellDef, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footerCell = _t.first);\n    }\n  },\n  inputs: {\n    sticky: \"sticky\",\n    name: [\"cdkColumnDef\", \"name\"],\n    stickyEnd: \"stickyEnd\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n    useExisting: CdkColumnDef\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nCdkColumnDef.propDecorators = {\n  name: [{\n    type: Input,\n    args: ['cdkColumnDef']\n  }],\n  stickyEnd: [{\n    type: Input,\n    args: ['stickyEnd']\n  }],\n  cell: [{\n    type: ContentChild,\n    args: [CdkCellDef, {\n      static: false\n    }]\n  }],\n  headerCell: [{\n    type: ContentChild,\n    args: [CdkHeaderCellDef, {\n      static: false\n    }]\n  }],\n  footerCell: [{\n    type: ContentChild,\n    args: [CdkFooterCellDef, {\n      static: false\n    }]\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkColumnDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkColumnDef]',\n      inputs: ['sticky'],\n      providers: [{\n        provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n        useExisting: CdkColumnDef\n      }]\n    }]\n  }], null, {\n    name: [{\n      type: Input,\n      args: ['cdkColumnDef']\n    }],\n    stickyEnd: [{\n      type: Input,\n      args: ['stickyEnd']\n    }],\n    cell: [{\n      type: ContentChild,\n      args: [CdkCellDef, {\n        static: false\n      }]\n    }],\n    headerCell: [{\n      type: ContentChild,\n      args: [CdkHeaderCellDef, {\n        static: false\n      }]\n    }],\n    footerCell: [{\n      type: ContentChild,\n      args: [CdkFooterCellDef, {\n        static: false\n      }]\n    }]\n  });\n})();\n/**\n * Base class for the cells. Adds a CSS classname that identifies the column it renders in.\n */\nclass BaseCdkCell {\n  /**\n   * @param {?} columnDef\n   * @param {?} elementRef\n   */\n  constructor(columnDef, elementRef) {\n    /** @type {?} */\n    const columnClassName = `cdk-column-${columnDef.cssClassFriendlyName}`;\n    elementRef.nativeElement.classList.add(columnClassName);\n  }\n}\n/**\n * Header cell template container that adds the right classes and role.\n */\nclass CdkHeaderCell extends BaseCdkCell {\n  /**\n   * @param {?} columnDef\n   * @param {?} elementRef\n   */\n  constructor(columnDef, elementRef) {\n    super(columnDef, elementRef);\n  }\n}\nCdkHeaderCell.ɵfac = function CdkHeaderCell_Factory(t) {\n  return new (t || CdkHeaderCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\nCdkHeaderCell.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkHeaderCell,\n  selectors: [[\"cdk-header-cell\"], [\"th\", \"cdk-header-cell\", \"\"]],\n  hostAttrs: [\"role\", \"columnheader\", 1, \"cdk-header-cell\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\nCdkHeaderCell.ctorParameters = () => [{\n  type: CdkColumnDef\n}, {\n  type: ElementRef\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderCell, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-header-cell, th[cdk-header-cell]',\n      host: {\n        'class': 'cdk-header-cell',\n        'role': 'columnheader'\n      }\n    }]\n  }], function () {\n    return [{\n      type: CdkColumnDef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Footer cell template container that adds the right classes and role.\n */\nclass CdkFooterCell extends BaseCdkCell {\n  /**\n   * @param {?} columnDef\n   * @param {?} elementRef\n   */\n  constructor(columnDef, elementRef) {\n    super(columnDef, elementRef);\n  }\n}\nCdkFooterCell.ɵfac = function CdkFooterCell_Factory(t) {\n  return new (t || CdkFooterCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\nCdkFooterCell.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkFooterCell,\n  selectors: [[\"cdk-footer-cell\"], [\"td\", \"cdk-footer-cell\", \"\"]],\n  hostAttrs: [\"role\", \"gridcell\", 1, \"cdk-footer-cell\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\nCdkFooterCell.ctorParameters = () => [{\n  type: CdkColumnDef\n}, {\n  type: ElementRef\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterCell, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n      host: {\n        'class': 'cdk-footer-cell',\n        'role': 'gridcell'\n      }\n    }]\n  }], function () {\n    return [{\n      type: CdkColumnDef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Cell template container that adds the right classes and role.\n */\nclass CdkCell extends BaseCdkCell {\n  /**\n   * @param {?} columnDef\n   * @param {?} elementRef\n   */\n  constructor(columnDef, elementRef) {\n    super(columnDef, elementRef);\n  }\n}\nCdkCell.ɵfac = function CdkCell_Factory(t) {\n  return new (t || CdkCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\nCdkCell.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkCell,\n  selectors: [[\"cdk-cell\"], [\"td\", \"cdk-cell\", \"\"]],\n  hostAttrs: [\"role\", \"gridcell\", 1, \"cdk-cell\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\nCdkCell.ctorParameters = () => [{\n  type: CdkColumnDef\n}, {\n  type: ElementRef\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCell, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-cell, td[cdk-cell]',\n      host: {\n        'class': 'cdk-cell',\n        'role': 'gridcell'\n      }\n    }]\n  }], function () {\n    return [{\n      type: CdkColumnDef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @type {?}\n */\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n * @abstract\n */\nclass BaseRowDef {\n  /**\n   * @param {?} template\n   * @param {?} _differs\n   */\n  constructor(template, _differs) {\n    this.template = template;\n    this._differs = _differs;\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n  ngOnChanges(changes) {\n    // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n    // of the columns property or an empty array if none is provided.\n    if (!this._columnsDiffer) {\n      /** @type {?} */\n      const columns = changes['columns'] && changes['columns'].currentValue || [];\n      this._columnsDiffer = this._differs.find(columns).create();\n      this._columnsDiffer.diff(columns);\n    }\n  }\n  /**\n   * Returns the difference between the current columns and the columns from the last diff, or null\n   * if there is no difference.\n   * @return {?}\n   */\n  getColumnsDiff() {\n    return this._columnsDiffer.diff(this.columns);\n  }\n  /**\n   * Gets this row def's relevant cell template from the provided column def.\n   * @param {?} column\n   * @return {?}\n   */\n  extractCellTemplate(column) {\n    if (this instanceof CdkHeaderRowDef) {\n      return column.headerCell.template;\n    }\n    if (this instanceof CdkFooterRowDef) {\n      return column.footerCell.template;\n    } else {\n      return column.cell.template;\n    }\n  }\n}\nBaseRowDef.ɵfac = function BaseRowDef_Factory(t) {\n  ɵngcc0.ɵɵinvalidFactory();\n};\nBaseRowDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: BaseRowDef,\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\n// Boilerplate for applying mixins to CdkHeaderRowDef.\n/**\n * \\@docs-private\n */\nclass CdkHeaderRowDefBase extends BaseRowDef {}\n/** @type {?} */\nconst _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass CdkHeaderRowDef extends _CdkHeaderRowDefBase {\n  /**\n   * @param {?} template\n   * @param {?} _differs\n   */\n  constructor(template, _differs) {\n    super(template, _differs);\n  }\n  // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n  // Explicitly define it so that the method is called as part of the Angular lifecycle.\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n  ngOnChanges(changes) {\n    super.ngOnChanges(changes);\n  }\n}\nCdkHeaderRowDef.ɵfac = function CdkHeaderRowDef_Factory(t) {\n  return new (t || CdkHeaderRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers));\n};\nCdkHeaderRowDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkHeaderRowDef,\n  selectors: [[\"\", \"cdkHeaderRowDef\", \"\"]],\n  inputs: {\n    columns: [\"cdkHeaderRowDef\", \"columns\"],\n    sticky: [\"cdkHeaderRowDefSticky\", \"sticky\"]\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/** @nocollapse */\nCdkHeaderRowDef.ctorParameters = () => [{\n  type: TemplateRef\n}, {\n  type: IterableDiffers\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkHeaderRowDef]',\n      inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky']\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }];\n  }, null);\n})();\n// Boilerplate for applying mixins to CdkFooterRowDef.\n/**\n * \\@docs-private\n */\nclass CdkFooterRowDefBase extends BaseRowDef {}\n/** @type {?} */\nconst _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass CdkFooterRowDef extends _CdkFooterRowDefBase {\n  /**\n   * @param {?} template\n   * @param {?} _differs\n   */\n  constructor(template, _differs) {\n    super(template, _differs);\n  }\n  // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n  // Explicitly define it so that the method is called as part of the Angular lifecycle.\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n  ngOnChanges(changes) {\n    super.ngOnChanges(changes);\n  }\n}\nCdkFooterRowDef.ɵfac = function CdkFooterRowDef_Factory(t) {\n  return new (t || CdkFooterRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers));\n};\nCdkFooterRowDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkFooterRowDef,\n  selectors: [[\"\", \"cdkFooterRowDef\", \"\"]],\n  inputs: {\n    columns: [\"cdkFooterRowDef\", \"columns\"],\n    sticky: [\"cdkFooterRowDefSticky\", \"sticky\"]\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/** @nocollapse */\nCdkFooterRowDef.ctorParameters = () => [{\n  type: TemplateRef\n}, {\n  type: IterableDiffers\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkFooterRowDef]',\n      inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky']\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }];\n  }, null);\n})();\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n * @template T\n */\nclass CdkRowDef extends BaseRowDef {\n  // TODO(andrewseguin): Add an input for providing a switch function to determine\n  //   if this template should be used.\n  /**\n   * @param {?} template\n   * @param {?} _differs\n   */\n  constructor(template, _differs) {\n    super(template, _differs);\n  }\n}\nCdkRowDef.ɵfac = function CdkRowDef_Factory(t) {\n  return new (t || CdkRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers));\n};\nCdkRowDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkRowDef,\n  selectors: [[\"\", \"cdkRowDef\", \"\"]],\n  inputs: {\n    columns: [\"cdkRowDefColumns\", \"columns\"],\n    when: [\"cdkRowDefWhen\", \"when\"]\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\nCdkRowDef.ctorParameters = () => [{\n  type: TemplateRef\n}, {\n  type: IterableDiffers\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkRowDef]',\n      inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen']\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }];\n  }, null);\n})();\n/**\n * Outlet for rendering cells inside of a row or header row.\n * \\@docs-private\n */\nclass CdkCellOutlet {\n  /**\n   * @param {?} _viewContainer\n   */\n  constructor(_viewContainer) {\n    this._viewContainer = _viewContainer;\n    CdkCellOutlet.mostRecentCellOutlet = this;\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    // If this was the last outlet being rendered in the view, remove the reference\n    // from the static property after it has been destroyed to avoid leaking memory.\n    if (CdkCellOutlet.mostRecentCellOutlet === this) {\n      CdkCellOutlet.mostRecentCellOutlet = null;\n    }\n  }\n}\nCdkCellOutlet.ɵfac = function CdkCellOutlet_Factory(t) {\n  return new (t || CdkCellOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n};\nCdkCellOutlet.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkCellOutlet,\n  selectors: [[\"\", \"cdkCellOutlet\", \"\"]]\n});\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n */\nCdkCellOutlet.mostRecentCellOutlet = null;\n/** @nocollapse */\nCdkCellOutlet.ctorParameters = () => [{\n  type: ViewContainerRef\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCellOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkCellOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }];\n  }, null);\n})();\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nclass CdkHeaderRow {}\nCdkHeaderRow.ɵfac = function CdkHeaderRow_Factory(t) {\n  return new (t || CdkHeaderRow)();\n};\nCdkHeaderRow.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: CdkHeaderRow,\n  selectors: [[\"cdk-header-row\"], [\"tr\", \"cdk-header-row\", \"\"]],\n  hostAttrs: [\"role\", \"row\", 1, \"cdk-header-row\"],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkCellOutlet\", \"\"]],\n  template: function CdkHeaderRow_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainer(0, 0);\n    }\n  },\n  dependencies: [CdkCellOutlet],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderRow, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-header-row, tr[cdk-header-row]',\n      template: CDK_ROW_TEMPLATE,\n      host: {\n        'class': 'cdk-header-row',\n        'role': 'row'\n      },\n      // See note on CdkTable for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], null, null);\n})();\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\nclass CdkFooterRow {}\nCdkFooterRow.ɵfac = function CdkFooterRow_Factory(t) {\n  return new (t || CdkFooterRow)();\n};\nCdkFooterRow.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: CdkFooterRow,\n  selectors: [[\"cdk-footer-row\"], [\"tr\", \"cdk-footer-row\", \"\"]],\n  hostAttrs: [\"role\", \"row\", 1, \"cdk-footer-row\"],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkCellOutlet\", \"\"]],\n  template: function CdkFooterRow_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainer(0, 0);\n    }\n  },\n  dependencies: [CdkCellOutlet],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterRow, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-footer-row, tr[cdk-footer-row]',\n      template: CDK_ROW_TEMPLATE,\n      host: {\n        'class': 'cdk-footer-row',\n        'role': 'row'\n      },\n      // See note on CdkTable for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], null, null);\n})();\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nclass CdkRow {}\nCdkRow.ɵfac = function CdkRow_Factory(t) {\n  return new (t || CdkRow)();\n};\nCdkRow.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: CdkRow,\n  selectors: [[\"cdk-row\"], [\"tr\", \"cdk-row\", \"\"]],\n  hostAttrs: [\"role\", \"row\", 1, \"cdk-row\"],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkCellOutlet\", \"\"]],\n  template: function CdkRow_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainer(0, 0);\n    }\n  },\n  dependencies: [CdkCellOutlet],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkRow, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-row, tr[cdk-row]',\n      template: CDK_ROW_TEMPLATE,\n      host: {\n        'class': 'cdk-row',\n        'role': 'row'\n      },\n      // See note on CdkTable for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], null, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * List of all possible directions that can be used for sticky positioning.\n * \\@docs-private\n * @type {?}\n */\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * \\@docs-private\n */\nclass StickyStyler {\n  /**\n   * @param {?} _isNativeHtmlTable Whether the sticky logic should be based on a table\n   *     that uses the native `<table>` element.\n   * @param {?} _stickCellCss The CSS class that will be applied to every row/cell that has\n   *     sticky positioning applied.\n   * @param {?} direction The directionality context of the table (ltr/rtl); affects column positioning\n   *     by reversing left/right positions.\n   * @param {?=} _isBrowser Whether the table is currently being rendered on the server or the client.\n   */\n  constructor(_isNativeHtmlTable, _stickCellCss, direction, _isBrowser = true) {\n    this._isNativeHtmlTable = _isNativeHtmlTable;\n    this._stickCellCss = _stickCellCss;\n    this.direction = direction;\n    this._isBrowser = _isBrowser;\n  }\n  /**\n   * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n   * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n   * @param {?} rows The list of rows that should be cleared from sticking in the provided directions\n   * @param {?} stickyDirections The directions that should no longer be set as sticky on the rows.\n   * @return {?}\n   */\n  clearStickyPositioning(rows, stickyDirections) {\n    for (const row of rows) {\n      // If the row isn't an element (e.g. if it's an `ng-container`),\n      // it won't have inline styles or `children` so we skip it.\n      if (row.nodeType !== row.ELEMENT_NODE) {\n        continue;\n      }\n      this._removeStickyStyle(row, stickyDirections);\n      for (let i = 0; i < row.children.length; i++) {\n        /** @type {?} */\n        const cell = /** @type {?} */row.children[i];\n        this._removeStickyStyle(cell, stickyDirections);\n      }\n    }\n  }\n  /**\n   * Applies sticky left and right positions to the cells of each row according to the sticky\n   * states of the rendered column definitions.\n   * @param {?} rows The rows that should have its set of cells stuck according to the sticky states.\n   * @param {?} stickyStartStates A list of boolean states where each state represents whether the cell\n   *     in this index position should be stuck to the start of the row.\n   * @param {?} stickyEndStates A list of boolean states where each state represents whether the cell\n   *     in this index position should be stuck to the end of the row.\n   * @return {?}\n   */\n  updateStickyColumns(rows, stickyStartStates, stickyEndStates) {\n    /** @type {?} */\n    const hasStickyColumns = stickyStartStates.some(\n    /**\n    * @param {?} state\n    * @return {?}\n    */\n    state => state) || stickyEndStates.some(\n    /**\n    * @param {?} state\n    * @return {?}\n    */\n    state => state);\n    if (!rows.length || !hasStickyColumns || !this._isBrowser) {\n      return;\n    }\n    /** @type {?} */\n    const firstRow = rows[0];\n    /** @type {?} */\n    const numCells = firstRow.children.length;\n    /** @type {?} */\n    const cellWidths = this._getCellWidths(firstRow);\n    /** @type {?} */\n    const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n    /** @type {?} */\n    const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n    /** @type {?} */\n    const isRtl = this.direction === 'rtl';\n    for (const row of rows) {\n      for (let i = 0; i < numCells; i++) {\n        /** @type {?} */\n        const cell = /** @type {?} */row.children[i];\n        if (stickyStartStates[i]) {\n          this._addStickyStyle(cell, isRtl ? 'right' : 'left', startPositions[i]);\n        }\n        if (stickyEndStates[i]) {\n          this._addStickyStyle(cell, isRtl ? 'left' : 'right', endPositions[i]);\n        }\n      }\n    }\n  }\n  /**\n   * Applies sticky positioning to the row's cells if using the native table layout, and to the\n   * row itself otherwise.\n   * @param {?} rowsToStick The list of rows that should be stuck according to their corresponding\n   *     sticky state and to the provided top or bottom position.\n   * @param {?} stickyStates A list of boolean states where each state represents whether the row\n   *     should be stuck in the particular top or bottom position.\n   * @param {?} position The position direction in which the row should be stuck if that row should be\n   *     sticky.\n   *\n   * @return {?}\n   */\n  stickRows(rowsToStick, stickyStates, position) {\n    // Since we can't measure the rows on the server, we can't stick the rows properly.\n    if (!this._isBrowser) {\n      return;\n    }\n    // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n    // position such that the last row stuck will be \"bottom: 0px\" and so on.\n    /** @type {?} */\n    const rows = position === 'bottom' ? rowsToStick.reverse() : rowsToStick;\n    /** @type {?} */\n    let stickyHeight = 0;\n    for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n      if (!stickyStates[rowIndex]) {\n        continue;\n      }\n      /** @type {?} */\n      const row = rows[rowIndex];\n      if (this._isNativeHtmlTable) {\n        for (let j = 0; j < row.children.length; j++) {\n          /** @type {?} */\n          const cell = /** @type {?} */row.children[j];\n          this._addStickyStyle(cell, position, stickyHeight);\n        }\n      } else {\n        // Flex does not respect the stick positioning on the cells, needs to be applied to the row.\n        // If this is applied on a native table, Safari causes the header to fly in wrong direction.\n        this._addStickyStyle(row, position, stickyHeight);\n      }\n      if (rowIndex === rows.length - 1) {\n        // prevent unnecessary reflow from getBoundingClientRect()\n        return;\n      }\n      stickyHeight += row.getBoundingClientRect().height;\n    }\n  }\n  /**\n   * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n   * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n   * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n   * the tfoot element.\n   * @param {?} tableElement\n   * @param {?} stickyStates\n   * @return {?}\n   */\n  updateStickyFooterContainer(tableElement, stickyStates) {\n    if (!this._isNativeHtmlTable) {\n      return;\n    }\n    /** @type {?} */\n    const tfoot = /** @type {?} */tableElement.querySelector('tfoot');\n    if (stickyStates.some(\n    /**\n    * @param {?} state\n    * @return {?}\n    */\n    state => !state)) {\n      this._removeStickyStyle(tfoot, ['bottom']);\n    } else {\n      this._addStickyStyle(tfoot, 'bottom', 0);\n    }\n  }\n  /**\n   * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n   * the zIndex, removing each of the provided sticky directions, and removing the\n   * sticky position if there are no more directions.\n   * @param {?} element\n   * @param {?} stickyDirections\n   * @return {?}\n   */\n  _removeStickyStyle(element, stickyDirections) {\n    for (const dir of stickyDirections) {\n      element.style[dir] = '';\n    }\n    element.style.zIndex = this._getCalculatedZIndex(element);\n    // If the element no longer has any more sticky directions, remove sticky positioning and\n    // the sticky CSS class.\n    /** @type {?} */\n    const hasDirection = STICKY_DIRECTIONS.some(\n    /**\n    * @param {?} dir\n    * @return {?}\n    */\n    dir => !!element.style[dir]);\n    if (!hasDirection) {\n      element.style.position = '';\n      element.classList.remove(this._stickCellCss);\n    }\n  }\n  /**\n   * Adds the sticky styling to the element by adding the sticky style class, changing position\n   * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n   * direction and value.\n   * @param {?} element\n   * @param {?} dir\n   * @param {?} dirValue\n   * @return {?}\n   */\n  _addStickyStyle(element, dir, dirValue) {\n    element.classList.add(this._stickCellCss);\n    element.style[dir] = `${dirValue}px`;\n    element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n    element.style.zIndex = this._getCalculatedZIndex(element);\n  }\n  /**\n   * Calculate what the z-index should be for the element, depending on what directions (top,\n   * bottom, left, right) have been set. It should be true that elements with a top direction\n   * should have the highest index since these are elements like a table header. If any of those\n   * elements are also sticky in another direction, then they should appear above other elements\n   * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n   * (e.g. footer rows) should then be next in the ordering such that they are below the header\n   * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n   * should minimally increment so that they are above non-sticky elements but below top and bottom\n   * elements.\n   * @param {?} element\n   * @return {?}\n   */\n  _getCalculatedZIndex(element) {\n    /** @type {?} */\n    const zIndexIncrements = {\n      top: 100,\n      bottom: 10,\n      left: 1,\n      right: 1\n    };\n    /** @type {?} */\n    let zIndex = 0;\n    for (const dir of STICKY_DIRECTIONS) {\n      if (element.style[dir]) {\n        zIndex += zIndexIncrements[dir];\n      }\n    }\n    return zIndex ? `${zIndex}` : '';\n  }\n  /**\n   * Gets the widths for each cell in the provided row.\n   * @param {?} row\n   * @return {?}\n   */\n  _getCellWidths(row) {\n    /** @type {?} */\n    const cellWidths = [];\n    /** @type {?} */\n    const firstRowCells = row.children;\n    for (let i = 0; i < firstRowCells.length; i++) {\n      /** @type {?} */\n      let cell = /** @type {?} */firstRowCells[i];\n      cellWidths.push(cell.getBoundingClientRect().width);\n    }\n    return cellWidths;\n  }\n  /**\n   * Determines the left and right positions of each sticky column cell, which will be the\n   * accumulation of all sticky column cell widths to the left and right, respectively.\n   * Non-sticky cells do not need to have a value set since their positions will not be applied.\n   * @param {?} widths\n   * @param {?} stickyStates\n   * @return {?}\n   */\n  _getStickyStartColumnPositions(widths, stickyStates) {\n    /** @type {?} */\n    const positions = [];\n    /** @type {?} */\n    let nextPosition = 0;\n    for (let i = 0; i < widths.length; i++) {\n      if (stickyStates[i]) {\n        positions[i] = nextPosition;\n        nextPosition += widths[i];\n      }\n    }\n    return positions;\n  }\n  /**\n   * Determines the left and right positions of each sticky column cell, which will be the\n   * accumulation of all sticky column cell widths to the left and right, respectively.\n   * Non-sticky cells do not need to have a value set since their positions will not be applied.\n   * @param {?} widths\n   * @param {?} stickyStates\n   * @return {?}\n   */\n  _getStickyEndColumnPositions(widths, stickyStates) {\n    /** @type {?} */\n    const positions = [];\n    /** @type {?} */\n    let nextPosition = 0;\n    for (let i = widths.length; i > 0; i--) {\n      if (stickyStates[i]) {\n        positions[i] = nextPosition;\n        nextPosition += widths[i];\n      }\n    }\n    return positions;\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * \\@docs-private\n * @param {?} id Id whose lookup failed.\n * @return {?}\n */\nfunction getTableUnknownColumnError(id) {\n  return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * \\@docs-private\n * @param {?} name\n * @return {?}\n */\nfunction getTableDuplicateColumnNameError(name) {\n  return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableMultipleDefaultRowDefsError() {\n  return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * \\@docs-private\n * @param {?} data\n * @return {?}\n */\nfunction getTableMissingMatchingRowDefError(data) {\n  return Error(`Could not find a matching row definition for the` + `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableMissingRowDefsError() {\n  return Error('Missing definitions for header, footer, and row; ' + 'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableUnknownDataSourceError() {\n  return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableTextColumnMissingParentTableError() {\n  return Error(`Text column could not find a parent table for registration.`);\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableTextColumnMissingNameError() {\n  return Error(`Table text column must have a name.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * \\@docs-private\n */\nclass DataRowOutlet {\n  /**\n   * @param {?} viewContainer\n   * @param {?} elementRef\n   */\n  constructor(viewContainer, elementRef) {\n    this.viewContainer = viewContainer;\n    this.elementRef = elementRef;\n  }\n}\nDataRowOutlet.ɵfac = function DataRowOutlet_Factory(t) {\n  return new (t || DataRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\nDataRowOutlet.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: DataRowOutlet,\n  selectors: [[\"\", \"rowOutlet\", \"\"]]\n});\n/** @nocollapse */\nDataRowOutlet.ctorParameters = () => [{\n  type: ViewContainerRef\n}, {\n  type: ElementRef\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DataRowOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[rowOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * \\@docs-private\n */\nclass HeaderRowOutlet {\n  /**\n   * @param {?} viewContainer\n   * @param {?} elementRef\n   */\n  constructor(viewContainer, elementRef) {\n    this.viewContainer = viewContainer;\n    this.elementRef = elementRef;\n  }\n}\nHeaderRowOutlet.ɵfac = function HeaderRowOutlet_Factory(t) {\n  return new (t || HeaderRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\nHeaderRowOutlet.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: HeaderRowOutlet,\n  selectors: [[\"\", \"headerRowOutlet\", \"\"]]\n});\n/** @nocollapse */\nHeaderRowOutlet.ctorParameters = () => [{\n  type: ViewContainerRef\n}, {\n  type: ElementRef\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HeaderRowOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[headerRowOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * \\@docs-private\n */\nclass FooterRowOutlet {\n  /**\n   * @param {?} viewContainer\n   * @param {?} elementRef\n   */\n  constructor(viewContainer, elementRef) {\n    this.viewContainer = viewContainer;\n    this.elementRef = elementRef;\n  }\n}\nFooterRowOutlet.ɵfac = function FooterRowOutlet_Factory(t) {\n  return new (t || FooterRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\nFooterRowOutlet.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: FooterRowOutlet,\n  selectors: [[\"\", \"footerRowOutlet\", \"\"]]\n});\n/** @nocollapse */\nFooterRowOutlet.ctorParameters = () => [{\n  type: ViewContainerRef\n}, {\n  type: ElementRef\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FooterRowOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[footerRowOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * \\@docs-private\n * @type {?}\n */\nconst CDK_TABLE_TEMPLATE =\n// Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n`\n  <ng-content select=\"caption\"></ng-content>\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>\n`;\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n * @template T\n */\nclass CdkTable {\n  /**\n   * @param {?} _differs\n   * @param {?} _changeDetectorRef\n   * @param {?} _elementRef\n   * @param {?} role\n   * @param {?} _dir\n   * @param {?} _document\n   * @param {?} _platform\n   */\n  constructor(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform) {\n    this._differs = _differs;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._elementRef = _elementRef;\n    this._dir = _dir;\n    this._platform = _platform;\n    /**\n     * Subject that emits when the component has been destroyed.\n     */\n    this._onDestroy = new Subject();\n    /**\n     * Map of all the user's defined columns (header, data, and footer cell template) identified by\n     * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n     * any custom column definitions added to `_customColumnDefs`.\n     */\n    this._columnDefsByName = new Map();\n    /**\n     * Column definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * column definitions as *its* content child.\n     */\n    this._customColumnDefs = new Set();\n    /**\n     * Data row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * built-in data rows as *its* content child.\n     */\n    this._customRowDefs = new Set();\n    /**\n     * Header row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * built-in header rows as *its* content child.\n     */\n    this._customHeaderRowDefs = new Set();\n    /**\n     * Footer row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n     * built-in footer row as *its* content child.\n     */\n    this._customFooterRowDefs = new Set();\n    /**\n     * Whether the header row definition has been changed. Triggers an update to the header row after\n     * content is checked. Initialized as true so that the table renders the initial set of rows.\n     */\n    this._headerRowDefChanged = true;\n    /**\n     * Whether the footer row definition has been changed. Triggers an update to the footer row after\n     * content is checked. Initialized as true so that the table renders the initial set of rows.\n     */\n    this._footerRowDefChanged = true;\n    /**\n     * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n     * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n     * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n     * and row template matches, which allows the `IterableDiffer` to check rows by reference\n     * and understand which rows are added/moved/removed.\n     *\n     * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n     * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n     * contains an array of created pairs. The array is necessary to handle cases where the data\n     * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n     * stored.\n     */\n    this._cachedRenderRowsMap = new Map();\n    /**\n     * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n     * table subclasses.\n     */\n    this.stickyCssClass = 'cdk-table-sticky';\n    this._multiTemplateDataRows = false;\n    // TODO(andrewseguin): Remove max value as the end index\n    //   and instead calculate the view on init and scroll.\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as a heuristic of what data should be provided.\n     *\n     * \\@docs-private\n     */\n    this.viewChange = new BehaviorSubject({\n      start: 0,\n      end: Number.MAX_VALUE\n    });\n    if (!role) {\n      this._elementRef.nativeElement.setAttribute('role', 'grid');\n    }\n    this._document = _document;\n    this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n  }\n  /**\n   * Tracking function that will be used to check the differences in data changes. Used similarly\n   * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n   * relative to the function to know if a row should be added/removed/moved.\n   * Accepts a function that takes two parameters, `index` and `item`.\n   * @return {?}\n   */\n  get trackBy() {\n    return this._trackByFn;\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  set trackBy(fn) {\n    if (isDevMode() && fn != null && typeof fn !== 'function' && /** @type {?} */console && /** @type {?} */console.warn) {\n      console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n    }\n    this._trackByFn = fn;\n  }\n  /**\n   * The table's source of data, which can be provided in three ways (in order of complexity):\n   *   - Simple data array (each object represents one table row)\n   *   - Stream that emits a data array each time the array changes\n   *   - `DataSource` object that implements the connect/disconnect interface.\n   *\n   * If a data array is provided, the table must be notified when the array's objects are\n   * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n   * render the diff since the last table render. If the data array reference is changed, the table\n   * will automatically trigger an update to the rows.\n   *\n   * When providing an Observable stream, the table will trigger an update automatically when the\n   * stream emits a new array of data.\n   *\n   * Finally, when providing a `DataSource` object, the table will use the Observable stream\n   * provided by the connect function and trigger updates when that stream emits new data array\n   * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n   * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n   * subscriptions registered during the connect process).\n   * @return {?}\n   */\n  get dataSource() {\n    return this._dataSource;\n  }\n  /**\n   * @param {?} dataSource\n   * @return {?}\n   */\n  set dataSource(dataSource) {\n    if (this._dataSource !== dataSource) {\n      this._switchDataSource(dataSource);\n    }\n  }\n  /**\n   * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n   * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n   * dataobject will render the first row that evaluates its when predicate to true, in the order\n   * defined in the table, or otherwise the default row which does not have a when predicate.\n   * @return {?}\n   */\n  get multiTemplateDataRows() {\n    return this._multiTemplateDataRows;\n  }\n  /**\n   * @param {?} v\n   * @return {?}\n   */\n  set multiTemplateDataRows(v) {\n    this._multiTemplateDataRows = coerceBooleanProperty(v);\n    // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n    // this setter will be invoked before the row outlet has been defined hence the null check.\n    if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n      this._forceRenderDataRows();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    this._setupStickyStyler();\n    if (this._isNativeHtmlTable) {\n      this._applyNativeTableSections();\n    }\n    // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n    // the user has provided a custom trackBy, return the result of that function as evaluated\n    // with the values of the `RenderRow`'s data and index.\n    this._dataDiffer = this._differs.find([]).create(\n    /**\n    * @param {?} _i\n    * @param {?} dataRow\n    * @return {?}\n    */\n    (_i, dataRow) => {\n      return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n    });\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentChecked() {\n    // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n    this._cacheRowDefs();\n    this._cacheColumnDefs();\n    // Make sure that the user has at least added header, footer, or data row def.\n    if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length) {\n      throw getTableMissingRowDefsError();\n    }\n    // Render updates if the list of columns have been changed for the header, row, or footer defs.\n    this._renderUpdatedColumns();\n    // If the header row definition has been changed, trigger a render to the header row.\n    if (this._headerRowDefChanged) {\n      this._forceRenderHeaderRows();\n      this._headerRowDefChanged = false;\n    }\n    // If the footer row definition has been changed, trigger a render to the footer row.\n    if (this._footerRowDefChanged) {\n      this._forceRenderFooterRows();\n      this._footerRowDefChanged = false;\n    }\n    // If there is a data source and row definitions, connect to the data source unless a\n    // connection has already been made.\n    if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n      this._observeRenderChanges();\n    }\n    this._checkStickyStates();\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._rowOutlet.viewContainer.clear();\n    this._headerRowOutlet.viewContainer.clear();\n    this._footerRowOutlet.viewContainer.clear();\n    this._cachedRenderRowsMap.clear();\n    this._onDestroy.next();\n    this._onDestroy.complete();\n    if (isDataSource(this.dataSource)) {\n      this.dataSource.disconnect(this);\n    }\n  }\n  /**\n   * Renders rows based on the table's latest set of data, which was either provided directly as an\n   * input or retrieved through an Observable stream (directly or from a DataSource).\n   * Checks for differences in the data since the last diff to perform only the necessary\n   * changes (add/remove/move rows).\n   *\n   * If the table's data source is a DataSource or Observable, this will be invoked automatically\n   * each time the provided Observable stream emits a new data array. Otherwise if your data is\n   * an array, this function will need to be called to render any changes.\n   * @return {?}\n   */\n  renderRows() {\n    this._renderRows = this._getAllRenderRows();\n    /** @type {?} */\n    const changes = this._dataDiffer.diff(this._renderRows);\n    if (!changes) {\n      return;\n    }\n    /** @type {?} */\n    const viewContainer = this._rowOutlet.viewContainer;\n    changes.forEachOperation(\n    /**\n    * @param {?} record\n    * @param {?} prevIndex\n    * @param {?} currentIndex\n    * @return {?}\n    */\n    (record, prevIndex, currentIndex) => {\n      if (record.previousIndex == null) {\n        this._insertRow(record.item, /** @type {?} */currentIndex);\n      } else if (currentIndex == null) {\n        viewContainer.remove( /** @type {?} */prevIndex);\n      } else {\n        /** @type {?} */\n        const view = /** @type {?} */viewContainer.get( /** @type {?} */prevIndex);\n        viewContainer.move( /** @type {?} */view, currentIndex);\n      }\n    });\n    // Update the meta context of a row's context data (index, count, first, last, ...)\n    this._updateRowIndexContext();\n    // Update rows that did not get added/removed/moved but may have had their identity changed,\n    // e.g. if trackBy matched data on some property but the actual data reference changed.\n    changes.forEachIdentityChange(\n    /**\n    * @param {?} record\n    * @return {?}\n    */\n    record => {\n      /** @type {?} */\n      const rowView = /** @type {?} */viewContainer.get( /** @type {?} */record.currentIndex);\n      rowView.context.$implicit = record.item.data;\n    });\n    this.updateStickyColumnStyles();\n  }\n  /**\n   * Sets the header row definition to be used. Overrides the header row definition gathered by\n   * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the\n   * table's content is checked.\n   * \\@docs-private\n   * @deprecated Use `addHeaderRowDef` and `removeHeaderRowDef` instead\n   * \\@breaking-change 8.0.0\n   * @param {?} headerRowDef\n   * @return {?}\n   */\n  setHeaderRowDef(headerRowDef) {\n    this._customHeaderRowDefs = new Set([headerRowDef]);\n    this._headerRowDefChanged = true;\n  }\n  /**\n   * Sets the footer row definition to be used. Overrides the footer row definition gathered by\n   * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the\n   * table's content is checked.\n   * \\@docs-private\n   * @deprecated Use `addFooterRowDef` and `removeFooterRowDef` instead\n   * \\@breaking-change 8.0.0\n   * @param {?} footerRowDef\n   * @return {?}\n   */\n  setFooterRowDef(footerRowDef) {\n    this._customFooterRowDefs = new Set([footerRowDef]);\n    this._footerRowDefChanged = true;\n  }\n  /**\n   * Adds a column definition that was not included as part of the content children.\n   * @param {?} columnDef\n   * @return {?}\n   */\n  addColumnDef(columnDef) {\n    this._customColumnDefs.add(columnDef);\n  }\n  /**\n   * Removes a column definition that was not included as part of the content children.\n   * @param {?} columnDef\n   * @return {?}\n   */\n  removeColumnDef(columnDef) {\n    this._customColumnDefs.delete(columnDef);\n  }\n  /**\n   * Adds a row definition that was not included as part of the content children.\n   * @param {?} rowDef\n   * @return {?}\n   */\n  addRowDef(rowDef) {\n    this._customRowDefs.add(rowDef);\n  }\n  /**\n   * Removes a row definition that was not included as part of the content children.\n   * @param {?} rowDef\n   * @return {?}\n   */\n  removeRowDef(rowDef) {\n    this._customRowDefs.delete(rowDef);\n  }\n  /**\n   * Adds a header row definition that was not included as part of the content children.\n   * @param {?} headerRowDef\n   * @return {?}\n   */\n  addHeaderRowDef(headerRowDef) {\n    this._customHeaderRowDefs.add(headerRowDef);\n    this._headerRowDefChanged = true;\n  }\n  /**\n   * Removes a header row definition that was not included as part of the content children.\n   * @param {?} headerRowDef\n   * @return {?}\n   */\n  removeHeaderRowDef(headerRowDef) {\n    this._customHeaderRowDefs.delete(headerRowDef);\n    this._headerRowDefChanged = true;\n  }\n  /**\n   * Adds a footer row definition that was not included as part of the content children.\n   * @param {?} footerRowDef\n   * @return {?}\n   */\n  addFooterRowDef(footerRowDef) {\n    this._customFooterRowDefs.add(footerRowDef);\n    this._footerRowDefChanged = true;\n  }\n  /**\n   * Removes a footer row definition that was not included as part of the content children.\n   * @param {?} footerRowDef\n   * @return {?}\n   */\n  removeFooterRowDef(footerRowDef) {\n    this._customFooterRowDefs.delete(footerRowDef);\n    this._footerRowDefChanged = true;\n  }\n  /**\n   * Updates the header sticky styles. First resets all applied styles with respect to the cells\n   * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n   * automatically called when the header row changes its displayed set of columns, or if its\n   * sticky input changes. May be called manually for cases where the cell content changes outside\n   * of these events.\n   * @return {?}\n   */\n  updateStickyHeaderRowStyles() {\n    /** @type {?} */\n    const headerRows = this._getRenderedRows(this._headerRowOutlet);\n    /** @type {?} */\n    const tableElement = /** @type {?} */this._elementRef.nativeElement;\n    // Hide the thead element if there are no header rows. This is necessary to satisfy\n    // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n    // required child `row`.\n    /** @type {?} */\n    const thead = tableElement.querySelector('thead');\n    if (thead) {\n      thead.style.display = headerRows.length ? '' : 'none';\n    }\n    /** @type {?} */\n    const stickyStates = this._headerRowDefs.map(\n    /**\n    * @param {?} def\n    * @return {?}\n    */\n    def => def.sticky);\n    this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n    this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n    // Reset the dirty state of the sticky input change since it has been used.\n    this._headerRowDefs.forEach(\n    /**\n    * @param {?} def\n    * @return {?}\n    */\n    def => def.resetStickyChanged());\n  }\n  /**\n   * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n   * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n   * automatically called when the footer row changes its displayed set of columns, or if its\n   * sticky input changes. May be called manually for cases where the cell content changes outside\n   * of these events.\n   * @return {?}\n   */\n  updateStickyFooterRowStyles() {\n    /** @type {?} */\n    const footerRows = this._getRenderedRows(this._footerRowOutlet);\n    /** @type {?} */\n    const tableElement = /** @type {?} */this._elementRef.nativeElement;\n    // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n    // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n    // required child `row`.\n    /** @type {?} */\n    const tfoot = tableElement.querySelector('tfoot');\n    if (tfoot) {\n      tfoot.style.display = footerRows.length ? '' : 'none';\n    }\n    /** @type {?} */\n    const stickyStates = this._footerRowDefs.map(\n    /**\n    * @param {?} def\n    * @return {?}\n    */\n    def => def.sticky);\n    this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n    this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n    this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n    // Reset the dirty state of the sticky input change since it has been used.\n    this._footerRowDefs.forEach(\n    /**\n    * @param {?} def\n    * @return {?}\n    */\n    def => def.resetStickyChanged());\n  }\n  /**\n   * Updates the column sticky styles. First resets all applied styles with respect to the cells\n   * sticking to the left and right. Then sticky styles are added for the left and right according\n   * to the column definitions for each cell in each row. This is automatically called when\n   * the data source provides a new set of data or when a column definition changes its sticky\n   * input. May be called manually for cases where the cell content changes outside of these events.\n   * @return {?}\n   */\n  updateStickyColumnStyles() {\n    /** @type {?} */\n    const headerRows = this._getRenderedRows(this._headerRowOutlet);\n    /** @type {?} */\n    const dataRows = this._getRenderedRows(this._rowOutlet);\n    /** @type {?} */\n    const footerRows = this._getRenderedRows(this._footerRowOutlet);\n    // Clear the left and right positioning from all columns in the table across all rows since\n    // sticky columns span across all table sections (header, data, footer)\n    this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n    // Update the sticky styles for each header row depending on the def's sticky state\n    headerRows.forEach(\n    /**\n    * @param {?} headerRow\n    * @param {?} i\n    * @return {?}\n    */\n    (headerRow, i) => {\n      this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n    });\n    // Update the sticky styles for each data row depending on its def's sticky state\n    this._rowDefs.forEach(\n    /**\n    * @param {?} rowDef\n    * @return {?}\n    */\n    rowDef => {\n      // Collect all the rows rendered with this row definition.\n      /** @type {?} */\n      const rows = [];\n      for (let i = 0; i < dataRows.length; i++) {\n        if (this._renderRows[i].rowDef === rowDef) {\n          rows.push(dataRows[i]);\n        }\n      }\n      this._addStickyColumnStyles(rows, rowDef);\n    });\n    // Update the sticky styles for each footer row depending on the def's sticky state\n    footerRows.forEach(\n    /**\n    * @param {?} footerRow\n    * @param {?} i\n    * @return {?}\n    */\n    (footerRow, i) => {\n      this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n    });\n    // Reset the dirty state of the sticky input change since it has been used.\n    Array.from(this._columnDefsByName.values()).forEach(\n    /**\n    * @param {?} def\n    * @return {?}\n    */\n    def => def.resetStickyChanged());\n  }\n  /**\n   * Get the list of RenderRow objects to render according to the current list of data and defined\n   * row definitions. If the previous list already contained a particular pair, it should be reused\n   * so that the differ equates their references.\n   * @private\n   * @return {?}\n   */\n  _getAllRenderRows() {\n    /** @type {?} */\n    const renderRows = [];\n    // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n    // new cache while unused ones can be picked up by garbage collection.\n    /** @type {?} */\n    const prevCachedRenderRows = this._cachedRenderRowsMap;\n    this._cachedRenderRowsMap = new Map();\n    // For each data object, get the list of rows that should be rendered, represented by the\n    // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n    for (let i = 0; i < this._data.length; i++) {\n      /** @type {?} */\n      let data = this._data[i];\n      /** @type {?} */\n      const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n      if (!this._cachedRenderRowsMap.has(data)) {\n        this._cachedRenderRowsMap.set(data, new WeakMap());\n      }\n      for (let j = 0; j < renderRowsForData.length; j++) {\n        /** @type {?} */\n        let renderRow = renderRowsForData[j];\n        /** @type {?} */\n        const cache = /** @type {?} */this._cachedRenderRowsMap.get(renderRow.data);\n        if (cache.has(renderRow.rowDef)) {\n          /** @type {?} */cache.get(renderRow.rowDef).push(renderRow);\n        } else {\n          cache.set(renderRow.rowDef, [renderRow]);\n        }\n        renderRows.push(renderRow);\n      }\n    }\n    return renderRows;\n  }\n  /**\n   * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n   * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n   * `(T, CdkRowDef)` pair.\n   * @private\n   * @param {?} data\n   * @param {?} dataIndex\n   * @param {?=} cache\n   * @return {?}\n   */\n  _getRenderRowsForData(data, dataIndex, cache) {\n    /** @type {?} */\n    const rowDefs = this._getRowDefs(data, dataIndex);\n    return rowDefs.map(\n    /**\n    * @param {?} rowDef\n    * @return {?}\n    */\n    rowDef => {\n      /** @type {?} */\n      const cachedRenderRows = cache && cache.has(rowDef) ? /** @type {?} */cache.get(rowDef) : [];\n      if (cachedRenderRows.length) {\n        /** @type {?} */\n        const dataRow = /** @type {?} */cachedRenderRows.shift();\n        dataRow.dataIndex = dataIndex;\n        return dataRow;\n      } else {\n        return {\n          data,\n          rowDef,\n          dataIndex\n        };\n      }\n    });\n  }\n  /**\n   * Update the map containing the content's column definitions.\n   * @private\n   * @return {?}\n   */\n  _cacheColumnDefs() {\n    this._columnDefsByName.clear();\n    /** @type {?} */\n    const columnDefs = mergeQueryListAndSet(this._contentColumnDefs, this._customColumnDefs);\n    columnDefs.forEach(\n    /**\n    * @param {?} columnDef\n    * @return {?}\n    */\n    columnDef => {\n      if (this._columnDefsByName.has(columnDef.name)) {\n        throw getTableDuplicateColumnNameError(columnDef.name);\n      }\n      this._columnDefsByName.set(columnDef.name, columnDef);\n    });\n  }\n  /**\n   * Update the list of all available row definitions that can be used.\n   * @private\n   * @return {?}\n   */\n  _cacheRowDefs() {\n    this._headerRowDefs = mergeQueryListAndSet(this._contentHeaderRowDefs, this._customHeaderRowDefs);\n    this._footerRowDefs = mergeQueryListAndSet(this._contentFooterRowDefs, this._customFooterRowDefs);\n    this._rowDefs = mergeQueryListAndSet(this._contentRowDefs, this._customRowDefs);\n    // After all row definitions are determined, find the row definition to be considered default.\n    /** @type {?} */\n    const defaultRowDefs = this._rowDefs.filter(\n    /**\n    * @param {?} def\n    * @return {?}\n    */\n    def => !def.when);\n    if (!this.multiTemplateDataRows && defaultRowDefs.length > 1) {\n      throw getTableMultipleDefaultRowDefsError();\n    }\n    this._defaultRowDef = defaultRowDefs[0];\n  }\n  /**\n   * Check if the header, data, or footer rows have changed what columns they want to display or\n   * whether the sticky states have changed for the header or footer. If there is a diff, then\n   * re-render that section.\n   * @private\n   * @return {?}\n   */\n  _renderUpdatedColumns() {\n    /** @type {?} */\n    const columnsDiffReducer =\n    /**\n    * @param {?} acc\n    * @param {?} def\n    * @return {?}\n    */\n    (acc, def) => acc || !!def.getColumnsDiff();\n    // Force re-render data rows if the list of column definitions have changed.\n    if (this._rowDefs.reduce(columnsDiffReducer, false)) {\n      this._forceRenderDataRows();\n    }\n    // Force re-render header/footer rows if the list of column definitions have changed..\n    if (this._headerRowDefs.reduce(columnsDiffReducer, false)) {\n      this._forceRenderHeaderRows();\n    }\n    if (this._footerRowDefs.reduce(columnsDiffReducer, false)) {\n      this._forceRenderFooterRows();\n    }\n  }\n  /**\n   * Switch to the provided data source by resetting the data and unsubscribing from the current\n   * render change subscription if one exists. If the data source is null, interpret this by\n   * clearing the row outlet. Otherwise start listening for new data.\n   * @private\n   * @param {?} dataSource\n   * @return {?}\n   */\n  _switchDataSource(dataSource) {\n    this._data = [];\n    if (isDataSource(this.dataSource)) {\n      this.dataSource.disconnect(this);\n    }\n    // Stop listening for data from the previous data source.\n    if (this._renderChangeSubscription) {\n      this._renderChangeSubscription.unsubscribe();\n      this._renderChangeSubscription = null;\n    }\n    if (!dataSource) {\n      if (this._dataDiffer) {\n        this._dataDiffer.diff([]);\n      }\n      this._rowOutlet.viewContainer.clear();\n    }\n    this._dataSource = dataSource;\n  }\n  /**\n   * Set up a subscription for the data provided by the data source.\n   * @private\n   * @return {?}\n   */\n  _observeRenderChanges() {\n    // If no data source has been set, there is nothing to observe for changes.\n    if (!this.dataSource) {\n      return;\n    }\n    /** @type {?} */\n    let dataStream;\n    if (isDataSource(this.dataSource)) {\n      dataStream = this.dataSource.connect(this);\n    } else if (this.dataSource instanceof Observable) {\n      dataStream = this.dataSource;\n    } else if (Array.isArray(this.dataSource)) {\n      dataStream = of(this.dataSource);\n    }\n    if (dataStream === undefined) {\n      throw getTableUnknownDataSourceError();\n    }\n    this._renderChangeSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe(\n    /**\n    * @param {?} data\n    * @return {?}\n    */\n    data => {\n      this._data = data || [];\n      this.renderRows();\n    });\n  }\n  /**\n   * Clears any existing content in the header row outlet and creates a new embedded view\n   * in the outlet using the header row definition.\n   * @private\n   * @return {?}\n   */\n  _forceRenderHeaderRows() {\n    // Clear the header row outlet if any content exists.\n    if (this._headerRowOutlet.viewContainer.length > 0) {\n      this._headerRowOutlet.viewContainer.clear();\n    }\n    this._headerRowDefs.forEach(\n    /**\n    * @param {?} def\n    * @param {?} i\n    * @return {?}\n    */\n    (def, i) => this._renderRow(this._headerRowOutlet, def, i));\n    this.updateStickyHeaderRowStyles();\n    this.updateStickyColumnStyles();\n  }\n  /**\n   * Clears any existing content in the footer row outlet and creates a new embedded view\n   * in the outlet using the footer row definition.\n   * @private\n   * @return {?}\n   */\n  _forceRenderFooterRows() {\n    // Clear the footer row outlet if any content exists.\n    if (this._footerRowOutlet.viewContainer.length > 0) {\n      this._footerRowOutlet.viewContainer.clear();\n    }\n    this._footerRowDefs.forEach(\n    /**\n    * @param {?} def\n    * @param {?} i\n    * @return {?}\n    */\n    (def, i) => this._renderRow(this._footerRowOutlet, def, i));\n    this.updateStickyFooterRowStyles();\n    this.updateStickyColumnStyles();\n  }\n  /**\n   * Adds the sticky column styles for the rows according to the columns' stick states.\n   * @private\n   * @param {?} rows\n   * @param {?} rowDef\n   * @return {?}\n   */\n  _addStickyColumnStyles(rows, rowDef) {\n    /** @type {?} */\n    const columnDefs = Array.from(rowDef.columns || []).map(\n    /**\n    * @param {?} columnName\n    * @return {?}\n    */\n    columnName => {\n      /** @type {?} */\n      const columnDef = this._columnDefsByName.get(columnName);\n      if (!columnDef) {\n        throw getTableUnknownColumnError(columnName);\n      }\n      return (/** @type {?} */columnDef\n      );\n    });\n    /** @type {?} */\n    const stickyStartStates = columnDefs.map(\n    /**\n    * @param {?} columnDef\n    * @return {?}\n    */\n    columnDef => columnDef.sticky);\n    /** @type {?} */\n    const stickyEndStates = columnDefs.map(\n    /**\n    * @param {?} columnDef\n    * @return {?}\n    */\n    columnDef => columnDef.stickyEnd);\n    this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates);\n  }\n  /**\n   * Gets the list of rows that have been rendered in the row outlet.\n   * @param {?} rowOutlet\n   * @return {?}\n   */\n  _getRenderedRows(rowOutlet) {\n    /** @type {?} */\n    const renderedRows = [];\n    for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n      /** @type {?} */\n      const viewRef = /** @type {?} */ /** @type {?} */rowOutlet.viewContainer.get(i);\n      renderedRows.push(viewRef.rootNodes[0]);\n    }\n    return renderedRows;\n  }\n  /**\n   * Get the matching row definitions that should be used for this row data. If there is only\n   * one row definition, it is returned. Otherwise, find the row definitions that has a when\n   * predicate that returns true with the data. If none return true, return the default row\n   * definition.\n   * @param {?} data\n   * @param {?} dataIndex\n   * @return {?}\n   */\n  _getRowDefs(data, dataIndex) {\n    if (this._rowDefs.length == 1) {\n      return [this._rowDefs[0]];\n    }\n    /** @type {?} */\n    let rowDefs = [];\n    if (this.multiTemplateDataRows) {\n      rowDefs = this._rowDefs.filter(\n      /**\n      * @param {?} def\n      * @return {?}\n      */\n      def => !def.when || def.when(dataIndex, data));\n    } else {\n      /** @type {?} */\n      let rowDef = this._rowDefs.find(\n      /**\n      * @param {?} def\n      * @return {?}\n      */\n      def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\n      if (rowDef) {\n        rowDefs.push(rowDef);\n      }\n    }\n    if (!rowDefs.length) {\n      throw getTableMissingMatchingRowDefError(data);\n    }\n    return rowDefs;\n  }\n  /**\n   * Create the embedded view for the data row template and place it in the correct index location\n   * within the data row view container.\n   * @private\n   * @param {?} renderRow\n   * @param {?} renderIndex\n   * @return {?}\n   */\n  _insertRow(renderRow, renderIndex) {\n    /** @type {?} */\n    const rowDef = renderRow.rowDef;\n    /** @type {?} */\n    const context = {\n      $implicit: renderRow.data\n    };\n    this._renderRow(this._rowOutlet, rowDef, renderIndex, context);\n  }\n  /**\n   * Creates a new row template in the outlet and fills it with the set of cell templates.\n   * Optionally takes a context to provide to the row and cells, as well as an optional index\n   * of where to place the new row template in the outlet.\n   * @private\n   * @param {?} outlet\n   * @param {?} rowDef\n   * @param {?} index\n   * @param {?=} context\n   * @return {?}\n   */\n  _renderRow(outlet, rowDef, index, context = {}) {\n    // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n    outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n    for (let cellTemplate of this._getCellTemplates(rowDef)) {\n      if (CdkCellOutlet.mostRecentCellOutlet) {\n        CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Updates the index-related context for each row to reflect any changes in the index of the rows,\n   * e.g. first/last/even/odd.\n   * @private\n   * @return {?}\n   */\n  _updateRowIndexContext() {\n    /** @type {?} */\n    const viewContainer = this._rowOutlet.viewContainer;\n    for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n      /** @type {?} */\n      const viewRef = /** @type {?} */viewContainer.get(renderIndex);\n      /** @type {?} */\n      const context = /** @type {?} */viewRef.context;\n      context.count = count;\n      context.first = renderIndex === 0;\n      context.last = renderIndex === count - 1;\n      context.even = renderIndex % 2 === 0;\n      context.odd = !context.even;\n      if (this.multiTemplateDataRows) {\n        context.dataIndex = this._renderRows[renderIndex].dataIndex;\n        context.renderIndex = renderIndex;\n      } else {\n        context.index = this._renderRows[renderIndex].dataIndex;\n      }\n    }\n  }\n  /**\n   * Gets the column definitions for the provided row def.\n   * @private\n   * @param {?} rowDef\n   * @return {?}\n   */\n  _getCellTemplates(rowDef) {\n    if (!rowDef || !rowDef.columns) {\n      return [];\n    }\n    return Array.from(rowDef.columns,\n    /**\n    * @param {?} columnId\n    * @return {?}\n    */\n    columnId => {\n      /** @type {?} */\n      const column = this._columnDefsByName.get(columnId);\n      if (!column) {\n        throw getTableUnknownColumnError(columnId);\n      }\n      return rowDef.extractCellTemplate(column);\n    });\n  }\n  /**\n   * Adds native table sections (e.g. tbody) and moves the row outlets into them.\n   * @private\n   * @return {?}\n   */\n  _applyNativeTableSections() {\n    /** @type {?} */\n    const documentFragment = this._document.createDocumentFragment();\n    /** @type {?} */\n    const sections = [{\n      tag: 'thead',\n      outlet: this._headerRowOutlet\n    }, {\n      tag: 'tbody',\n      outlet: this._rowOutlet\n    }, {\n      tag: 'tfoot',\n      outlet: this._footerRowOutlet\n    }];\n    for (const section of sections) {\n      /** @type {?} */\n      const element = this._document.createElement(section.tag);\n      element.setAttribute('role', 'rowgroup');\n      element.appendChild(section.outlet.elementRef.nativeElement);\n      documentFragment.appendChild(element);\n    }\n    // Use a DocumentFragment so we don't hit the DOM on each iteration.\n    this._elementRef.nativeElement.appendChild(documentFragment);\n  }\n  /**\n   * Forces a re-render of the data rows. Should be called in cases where there has been an input\n   * change that affects the evaluation of which rows should be rendered, e.g. toggling\n   * `multiTemplateDataRows` or adding/removing row definitions.\n   * @private\n   * @return {?}\n   */\n  _forceRenderDataRows() {\n    this._dataDiffer.diff([]);\n    this._rowOutlet.viewContainer.clear();\n    this.renderRows();\n    this.updateStickyColumnStyles();\n  }\n  /**\n   * Checks if there has been a change in sticky states since last check and applies the correct\n   * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n   * during a change detection and after the inputs are settled (after content check).\n   * @private\n   * @return {?}\n   */\n  _checkStickyStates() {\n    /** @type {?} */\n    const stickyCheckReducer =\n    /**\n    * @param {?} acc\n    * @param {?} d\n    * @return {?}\n    */\n    (acc, d) => {\n      return acc || d.hasStickyChanged();\n    };\n    // Note that the check needs to occur for every definition since it notifies the definition\n    // that it can reset its dirty state. Using another operator like `some` may short-circuit\n    // remaining definitions and leave them in an unchecked state.\n    if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n      this.updateStickyHeaderRowStyles();\n    }\n    if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n      this.updateStickyFooterRowStyles();\n    }\n    if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n      this.updateStickyColumnStyles();\n    }\n  }\n  /**\n   * Creates the sticky styler that will be used for sticky rows and columns. Listens\n   * for directionality changes and provides the latest direction to the styler. Re-applies column\n   * stickiness when directionality changes.\n   * @private\n   * @return {?}\n   */\n  _setupStickyStyler() {\n    /** @type {?} */\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._platform.isBrowser);\n    (this._dir ? this._dir.change : of()).pipe(takeUntil(this._onDestroy)).subscribe(\n    /**\n    * @param {?} value\n    * @return {?}\n    */\n    value => {\n      this._stickyStyler.direction = value;\n      this.updateStickyColumnStyles();\n    });\n  }\n}\nCdkTable.ɵfac = function CdkTable_Factory(t) {\n  return new (t || CdkTable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinjectAttribute('role'), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Platform));\n};\nCdkTable.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: CdkTable,\n  selectors: [[\"cdk-table\"], [\"table\", \"cdk-table\", \"\"]],\n  contentQueries: function CdkTable_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkColumnDef, 4);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkRowDef, 4);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderRowDef, 4);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterRowDef, 4);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentColumnDefs = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentRowDefs = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentHeaderRowDefs = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentFooterRowDefs = _t);\n    }\n  },\n  viewQuery: function CdkTable_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(DataRowOutlet, 7);\n      ɵngcc0.ɵɵviewQuery(HeaderRowOutlet, 7);\n      ɵngcc0.ɵɵviewQuery(FooterRowOutlet, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._rowOutlet = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headerRowOutlet = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._footerRowOutlet = _t.first);\n    }\n  },\n  hostAttrs: [1, \"cdk-table\"],\n  inputs: {\n    trackBy: \"trackBy\",\n    dataSource: \"dataSource\",\n    multiTemplateDataRows: \"multiTemplateDataRows\"\n  },\n  exportAs: [\"cdkTable\"],\n  ngContentSelectors: _c1,\n  decls: 4,\n  vars: 0,\n  consts: [[\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]],\n  template: function CdkTable_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c0);\n      ɵngcc0.ɵɵprojection(0);\n      ɵngcc0.ɵɵelementContainer(1, 0)(2, 1)(3, 2);\n    }\n  },\n  dependencies: [DataRowOutlet, HeaderRowOutlet, FooterRowOutlet],\n  encapsulation: 2\n});\n/** @nocollapse */\nCdkTable.ctorParameters = () => [{\n  type: IterableDiffers\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: ElementRef\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['role']\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: Platform\n}];\nCdkTable.propDecorators = {\n  trackBy: [{\n    type: Input\n  }],\n  dataSource: [{\n    type: Input\n  }],\n  multiTemplateDataRows: [{\n    type: Input\n  }],\n  _rowOutlet: [{\n    type: ViewChild,\n    args: [DataRowOutlet, {\n      static: true\n    }]\n  }],\n  _headerRowOutlet: [{\n    type: ViewChild,\n    args: [HeaderRowOutlet, {\n      static: true\n    }]\n  }],\n  _footerRowOutlet: [{\n    type: ViewChild,\n    args: [FooterRowOutlet, {\n      static: true\n    }]\n  }],\n  _contentColumnDefs: [{\n    type: ContentChildren,\n    args: [CdkColumnDef]\n  }],\n  _contentRowDefs: [{\n    type: ContentChildren,\n    args: [CdkRowDef]\n  }],\n  _contentHeaderRowDefs: [{\n    type: ContentChildren,\n    args: [CdkHeaderRowDef]\n  }],\n  _contentFooterRowDefs: [{\n    type: ContentChildren,\n    args: [CdkFooterRowDef]\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTable, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-table, table[cdk-table]',\n      exportAs: 'cdkTable',\n      template: CDK_TABLE_TEMPLATE,\n      host: {\n        'class': 'cdk-table'\n      },\n      encapsulation: ViewEncapsulation.None,\n      // The \"OnPush\" status for the `MatTable` component is effectively a noop, so we are removing it.\n      // The view for `MatTable` consists entirely of templates declared in other views. As they are\n      // declared elsewhere, they are checked when their declaration points are checked.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.IterableDiffers\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['role']\n      }]\n    }, {\n      type: ɵngcc1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc2.Platform\n    }];\n  }, {\n    trackBy: [{\n      type: Input\n    }],\n    dataSource: [{\n      type: Input\n    }],\n    multiTemplateDataRows: [{\n      type: Input\n    }],\n    _rowOutlet: [{\n      type: ViewChild,\n      args: [DataRowOutlet, {\n        static: true\n      }]\n    }],\n    _headerRowOutlet: [{\n      type: ViewChild,\n      args: [HeaderRowOutlet, {\n        static: true\n      }]\n    }],\n    _footerRowOutlet: [{\n      type: ViewChild,\n      args: [FooterRowOutlet, {\n        static: true\n      }]\n    }],\n    _contentColumnDefs: [{\n      type: ContentChildren,\n      args: [CdkColumnDef]\n    }],\n    _contentRowDefs: [{\n      type: ContentChildren,\n      args: [CdkRowDef]\n    }],\n    _contentHeaderRowDefs: [{\n      type: ContentChildren,\n      args: [CdkHeaderRowDef]\n    }],\n    _contentFooterRowDefs: [{\n      type: ContentChildren,\n      args: [CdkFooterRowDef]\n    }]\n  });\n})();\n/**\n * Utility function that gets a merged list of the entries in a QueryList and values of a Set.\n * @template T\n * @param {?} queryList\n * @param {?} set\n * @return {?}\n */\nfunction mergeQueryListAndSet(queryList, set) {\n  return queryList.toArray().concat(Array.from(set));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to specify the text column options.\n * @type {?}\n */\nconst TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n * @template T\n */\nclass CdkTextColumn {\n  /**\n   * @param {?} _table\n   * @param {?} _options\n   */\n  constructor(_table, _options) {\n    this._table = _table;\n    this._options = _options;\n    /**\n     * Alignment of the cell values.\n     */\n    this.justify = 'start';\n    this._options = _options || {};\n  }\n  /**\n   * Column name that should be used to reference this column.\n   * @return {?}\n   */\n  get name() {\n    return this._name;\n  }\n  /**\n   * @param {?} name\n   * @return {?}\n   */\n  set name(name) {\n    this._name = name;\n    // With Ivy, inputs can be initialized before static query results are\n    // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n    this._syncColumnDefName();\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    this._syncColumnDefName();\n    if (this.headerText === undefined) {\n      this.headerText = this._createDefaultHeaderText();\n    }\n    if (!this.dataAccessor) {\n      this.dataAccessor = this._options.defaultDataAccessor || (\n      /**\n      * @param {?} data\n      * @param {?} name\n      * @return {?}\n      */\n      (data, name) => /** @type {?} */data[name]);\n    }\n    if (this._table) {\n      // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n      // since the columnDef will not pick up its content by the time the table finishes checking\n      // its content and initializing the rows.\n      this.columnDef.cell = this.cell;\n      this.columnDef.headerCell = this.headerCell;\n      this._table.addColumnDef(this.columnDef);\n    } else {\n      throw getTableTextColumnMissingParentTableError();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    if (this._table) {\n      this._table.removeColumnDef(this.columnDef);\n    }\n  }\n  /**\n   * Creates a default header text. Use the options' header text transformation function if one\n   * has been provided. Otherwise simply capitalize the column name.\n   * @return {?}\n   */\n  _createDefaultHeaderText() {\n    /** @type {?} */\n    const name = this.name;\n    if (isDevMode() && !name) {\n      throw getTableTextColumnMissingNameError();\n    }\n    if (this._options && this._options.defaultHeaderTextTransform) {\n      return this._options.defaultHeaderTextTransform(name);\n    }\n    return name[0].toUpperCase() + name.slice(1);\n  }\n  /**\n   * Synchronizes the column definition name with the text column name.\n   * @private\n   * @return {?}\n   */\n  _syncColumnDefName() {\n    if (this.columnDef) {\n      this.columnDef.name = this.name;\n    }\n  }\n}\nCdkTextColumn.ɵfac = function CdkTextColumn_Factory(t) {\n  return new (t || CdkTextColumn)(ɵngcc0.ɵɵdirectiveInject(CdkTable, 8), ɵngcc0.ɵɵdirectiveInject(TEXT_COLUMN_OPTIONS, 8));\n};\nCdkTextColumn.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: CdkTextColumn,\n  selectors: [[\"cdk-text-column\"]],\n  viewQuery: function CdkTextColumn_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(CdkColumnDef, 7);\n      ɵngcc0.ɵɵviewQuery(CdkCellDef, 7);\n      ɵngcc0.ɵɵviewQuery(CdkHeaderCellDef, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columnDef = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n    }\n  },\n  inputs: {\n    justify: \"justify\",\n    name: \"name\",\n    headerText: \"headerText\",\n    dataAccessor: \"dataAccessor\"\n  },\n  decls: 3,\n  vars: 0,\n  consts: [[\"cdkColumnDef\", \"\"], [\"cdk-header-cell\", \"\", 3, \"text-align\", 4, \"cdkHeaderCellDef\"], [\"cdk-cell\", \"\", 3, \"text-align\", 4, \"cdkCellDef\"], [\"cdk-header-cell\", \"\"], [\"cdk-cell\", \"\"]],\n  template: function CdkTextColumn_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainerStart(0, 0);\n      ɵngcc0.ɵɵtemplate(1, CdkTextColumn_th_1_Template, 2, 3, \"th\", 1);\n      ɵngcc0.ɵɵtemplate(2, CdkTextColumn_td_2_Template, 2, 3, \"td\", 2);\n      ɵngcc0.ɵɵelementContainerEnd();\n    }\n  },\n  dependencies: [CdkCellDef, CdkHeaderCellDef, CdkColumnDef, CdkCell, CdkHeaderCell],\n  encapsulation: 2\n});\n/** @nocollapse */\nCdkTextColumn.ctorParameters = () => [{\n  type: CdkTable,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [TEXT_COLUMN_OPTIONS]\n  }]\n}];\nCdkTextColumn.propDecorators = {\n  name: [{\n    type: Input\n  }],\n  headerText: [{\n    type: Input\n  }],\n  dataAccessor: [{\n    type: Input\n  }],\n  justify: [{\n    type: Input\n  }],\n  columnDef: [{\n    type: ViewChild,\n    args: [CdkColumnDef, {\n      static: true\n    }]\n  }],\n  cell: [{\n    type: ViewChild,\n    args: [CdkCellDef, {\n      static: true\n    }]\n  }],\n  headerCell: [{\n    type: ViewChild,\n    args: [CdkHeaderCellDef, {\n      static: true\n    }]\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTextColumn, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-text-column',\n      template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      // Change detection is intentionally not set to OnPush. This component's template will be provided\n      // to the table to be inserted into its view. This is problematic when change detection runs since\n      // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n      // mean's the template in the table's view will not have the updated value (and in fact will cause\n      // an ExpressionChangedAfterItHasBeenCheckedError).\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default\n    }]\n  }], function () {\n    return [{\n      type: CdkTable,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [TEXT_COLUMN_OPTIONS]\n      }]\n    }];\n  }, {\n    justify: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    headerText: [{\n      type: Input\n    }],\n    dataAccessor: [{\n      type: Input\n    }],\n    columnDef: [{\n      type: ViewChild,\n      args: [CdkColumnDef, {\n        static: true\n      }]\n    }],\n    cell: [{\n      type: ViewChild,\n      args: [CdkCellDef, {\n        static: true\n      }]\n    }],\n    headerCell: [{\n      type: ViewChild,\n      args: [CdkHeaderCellDef, {\n        static: true\n      }]\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EXPORTED_DECLARATIONS = [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn];\nclass CdkTableModule {}\nCdkTableModule.ɵfac = function CdkTableModule_Factory(t) {\n  return new (t || CdkTableModule)();\n};\nCdkTableModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: CdkTableModule\n});\nCdkTableModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [CommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTableModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      exports: EXPORTED_DECLARATIONS,\n      declarations: EXPORTED_DECLARATIONS\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTableModule, {\n    declarations: function () {\n      return [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn];\n    }\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CDK_TABLE_TEMPLATE, CdkTable, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, BaseCdkCell, CdkHeaderCell, CdkFooterCell, CdkCell, CDK_ROW_TEMPLATE, BaseRowDef, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkCellOutlet, CdkHeaderRow, CdkFooterRow, CdkRow, CdkTableModule, STICKY_DIRECTIONS, StickyStyler, mixinHasStickyInput, TEXT_COLUMN_OPTIONS, CdkTextColumn };","map":{"version":3,"names":["coerceBooleanProperty","ContentChild","Directive","ElementRef","Input","TemplateRef","ChangeDetectionStrategy","Component","IterableDiffers","ViewContainerRef","ViewEncapsulation","Attribute","ChangeDetectorRef","ContentChildren","Inject","isDevMode","Optional","ViewChild","InjectionToken","NgModule","Directionality","isDataSource","ɵngcc0","ɵngcc1","ɵngcc2","_c0","_c1","CdkTextColumn_th_1_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ctx_r0","ɵɵnextContext","ɵɵstyleProp","justify","ɵɵadvance","ɵɵtextInterpolate1","headerText","CdkTextColumn_td_2_Template","data_r2","$implicit","ctx_r1","dataAccessor","name","DataSource","Platform","DOCUMENT","CommonModule","BehaviorSubject","Observable","of","Subject","takeUntil","mixinHasStickyInput","base","constructor","args","_sticky","_hasStickyChanged","sticky","v","prevValue","hasStickyChanged","resetStickyChanged","CdkCellDef","template","ɵfac","CdkCellDef_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","ctorParameters","ngDevMode","ɵsetClassMetadata","selector","CdkHeaderCellDef","CdkHeaderCellDef_Factory","CdkFooterCellDef","CdkFooterCellDef_Factory","CdkColumnDefBase","_CdkColumnDefBase","CdkColumnDef","arguments","_stickyEnd","_name","cssClassFriendlyName","replace","stickyEnd","ɵCdkColumnDef_BaseFactory","CdkColumnDef_Factory","ɵɵgetInheritedFactory","contentQueries","CdkColumnDef_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","cell","first","headerCell","footerCell","inputs","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInheritDefinitionFeature","propDecorators","static","providers","BaseCdkCell","columnDef","elementRef","columnClassName","nativeElement","classList","add","CdkHeaderCell","CdkHeaderCell_Factory","hostAttrs","host","CdkFooterCell","CdkFooterCell_Factory","CdkCell","CdkCell_Factory","CDK_ROW_TEMPLATE","BaseRowDef","_differs","ngOnChanges","changes","_columnsDiffer","columns","currentValue","find","create","diff","getColumnsDiff","extractCellTemplate","column","CdkHeaderRowDef","CdkFooterRowDef","BaseRowDef_Factory","ɵɵinvalidFactory","ɵɵNgOnChangesFeature","CdkHeaderRowDefBase","_CdkHeaderRowDefBase","CdkHeaderRowDef_Factory","CdkFooterRowDefBase","_CdkFooterRowDefBase","CdkFooterRowDef_Factory","CdkRowDef","CdkRowDef_Factory","when","CdkCellOutlet","_viewContainer","mostRecentCellOutlet","ngOnDestroy","CdkCellOutlet_Factory","CdkHeaderRow","CdkHeaderRow_Factory","ɵcmp","ɵɵdefineComponent","decls","vars","consts","CdkHeaderRow_Template","ɵɵelementContainer","dependencies","encapsulation","changeDetection","Default","None","CdkFooterRow","CdkFooterRow_Factory","CdkFooterRow_Template","CdkRow","CdkRow_Factory","CdkRow_Template","STICKY_DIRECTIONS","StickyStyler","_isNativeHtmlTable","_stickCellCss","direction","_isBrowser","clearStickyPositioning","rows","stickyDirections","row","nodeType","ELEMENT_NODE","_removeStickyStyle","i","children","length","updateStickyColumns","stickyStartStates","stickyEndStates","hasStickyColumns","some","state","firstRow","numCells","cellWidths","_getCellWidths","startPositions","_getStickyStartColumnPositions","endPositions","_getStickyEndColumnPositions","isRtl","_addStickyStyle","stickRows","rowsToStick","stickyStates","position","reverse","stickyHeight","rowIndex","j","getBoundingClientRect","height","updateStickyFooterContainer","tableElement","tfoot","querySelector","element","dir","style","zIndex","_getCalculatedZIndex","hasDirection","remove","dirValue","cssText","zIndexIncrements","top","bottom","left","right","firstRowCells","push","width","widths","positions","nextPosition","getTableUnknownColumnError","id","Error","getTableDuplicateColumnNameError","getTableMultipleDefaultRowDefsError","getTableMissingMatchingRowDefError","data","JSON","stringify","getTableMissingRowDefsError","getTableUnknownDataSourceError","getTableTextColumnMissingParentTableError","getTableTextColumnMissingNameError","DataRowOutlet","viewContainer","DataRowOutlet_Factory","HeaderRowOutlet","HeaderRowOutlet_Factory","FooterRowOutlet","FooterRowOutlet_Factory","CDK_TABLE_TEMPLATE","CdkTable","_changeDetectorRef","_elementRef","role","_dir","_document","_platform","_onDestroy","_columnDefsByName","Map","_customColumnDefs","Set","_customRowDefs","_customHeaderRowDefs","_customFooterRowDefs","_headerRowDefChanged","_footerRowDefChanged","_cachedRenderRowsMap","stickyCssClass","_multiTemplateDataRows","viewChange","start","end","Number","MAX_VALUE","setAttribute","nodeName","trackBy","_trackByFn","fn","console","warn","dataSource","_dataSource","_switchDataSource","multiTemplateDataRows","_rowOutlet","_forceRenderDataRows","ngOnInit","_setupStickyStyler","_applyNativeTableSections","_dataDiffer","_i","dataRow","dataIndex","ngAfterContentChecked","_cacheRowDefs","_cacheColumnDefs","_headerRowDefs","_footerRowDefs","_rowDefs","_renderUpdatedColumns","_forceRenderHeaderRows","_forceRenderFooterRows","_renderChangeSubscription","_observeRenderChanges","_checkStickyStates","clear","_headerRowOutlet","_footerRowOutlet","next","complete","disconnect","renderRows","_renderRows","_getAllRenderRows","forEachOperation","record","prevIndex","currentIndex","previousIndex","_insertRow","item","view","get","move","_updateRowIndexContext","forEachIdentityChange","rowView","context","updateStickyColumnStyles","setHeaderRowDef","headerRowDef","setFooterRowDef","footerRowDef","addColumnDef","removeColumnDef","delete","addRowDef","rowDef","removeRowDef","addHeaderRowDef","removeHeaderRowDef","addFooterRowDef","removeFooterRowDef","updateStickyHeaderRowStyles","headerRows","_getRenderedRows","thead","display","map","def","_stickyStyler","forEach","updateStickyFooterRowStyles","footerRows","dataRows","headerRow","_addStickyColumnStyles","footerRow","Array","from","values","prevCachedRenderRows","_data","renderRowsForData","_getRenderRowsForData","has","set","WeakMap","renderRow","cache","rowDefs","_getRowDefs","cachedRenderRows","shift","columnDefs","mergeQueryListAndSet","_contentColumnDefs","_contentHeaderRowDefs","_contentFooterRowDefs","_contentRowDefs","defaultRowDefs","filter","_defaultRowDef","columnsDiffReducer","acc","reduce","unsubscribe","dataStream","connect","isArray","undefined","pipe","subscribe","_renderRow","columnName","rowOutlet","renderedRows","viewRef","rootNodes","renderIndex","outlet","index","createEmbeddedView","cellTemplate","_getCellTemplates","markForCheck","count","last","even","odd","columnId","documentFragment","createDocumentFragment","sections","tag","section","createElement","appendChild","stickyCheckReducer","d","value","isBrowser","change","CdkTable_Factory","ɵɵinjectAttribute","CdkTable_ContentQueries","viewQuery","CdkTable_Query","ɵɵviewQuery","exportAs","ngContentSelectors","CdkTable_Template","ɵɵprojectionDef","ɵɵprojection","String","decorators","queryList","toArray","concat","TEXT_COLUMN_OPTIONS","CdkTextColumn","_table","_options","_syncColumnDefName","_createDefaultHeaderText","defaultDataAccessor","defaultHeaderTextTransform","toUpperCase","slice","CdkTextColumn_Factory","CdkTextColumn_Query","CdkTextColumn_Template","ɵɵelementContainerStart","ɵɵtemplate","ɵɵelementContainerEnd","EXPORTED_DECLARATIONS","CdkTableModule","CdkTableModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"sources":["C:/Users/dalci/OneDrive/Masaüstü/dotnet-angular-web-explorer/ClientApp/node_modules/@angular/cdk/__ivy_ngcc__/esm2015/table.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ContentChild, Directive, ElementRef, Input, TemplateRef, ChangeDetectionStrategy, Component, IterableDiffers, ViewContainerRef, ViewEncapsulation, Attribute, ChangeDetectorRef, ContentChildren, Inject, isDevMode, Optional, ViewChild, InjectionToken, NgModule } from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { isDataSource } from '@angular/cdk/collections';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nimport * as ɵngcc2 from '@angular/cdk/platform';\n\nconst _c0 = [[[\"caption\"]]];\nconst _c1 = [\"caption\"];\nfunction CdkTextColumn_th_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"th\", 3);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r0.justify);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r0.headerText, \" \");\n} }\nfunction CdkTextColumn_td_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\", 4);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const data_r2 = ctx.$implicit;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r1.justify);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r1.dataAccessor(data_r2, ctx_r1.name), \" \");\n} }\nexport { DataSource } from '@angular/cdk/collections';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { BehaviorSubject, Observable, of, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * \\@docs-private\n * @template T\n * @param {?} base\n * @return {?}\n */\nfunction mixinHasStickyInput(base) {\n    return class extends base {\n        /**\n         * @param {...?} args\n         */\n        constructor(...args) {\n            super(...args);\n            this._sticky = false;\n            /**\n             * Whether the sticky input has changed since it was last checked.\n             */\n            this._hasStickyChanged = false;\n        }\n        /**\n         * Whether sticky positioning should be applied.\n         * @return {?}\n         */\n        get sticky() { return this._sticky; }\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set sticky(v) {\n            /** @type {?} */\n            const prevValue = this._sticky;\n            this._sticky = coerceBooleanProperty(v);\n            this._hasStickyChanged = prevValue !== this._sticky;\n        }\n        /**\n         * Whether the sticky value has changed since this was last called.\n         * @return {?}\n         */\n        hasStickyChanged() {\n            /** @type {?} */\n            const hasStickyChanged = this._hasStickyChanged;\n            this._hasStickyChanged = false;\n            return hasStickyChanged;\n        }\n        /**\n         * Resets the dirty check for cases where the sticky state has been used without checking.\n         * @return {?}\n         */\n        resetStickyChanged() {\n            this._hasStickyChanged = false;\n        }\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass CdkCellDef {\n    /**\n     * @param {?} template\n     */\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkCellDef.ɵfac = function CdkCellDef_Factory(t) { return new (t || CdkCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkCellDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkCellDef, selectors: [[\"\", \"cdkCellDef\", \"\"]] });\n/** @nocollapse */\nCdkCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCellDef, [{\n        type: Directive,\n        args: [{ selector: '[cdkCellDef]' }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass CdkHeaderCellDef {\n    /**\n     * @param {?} template\n     */\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkHeaderCellDef.ɵfac = function CdkHeaderCellDef_Factory(t) { return new (t || CdkHeaderCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkHeaderCellDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkHeaderCellDef, selectors: [[\"\", \"cdkHeaderCellDef\", \"\"]] });\n/** @nocollapse */\nCdkHeaderCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderCellDef, [{\n        type: Directive,\n        args: [{ selector: '[cdkHeaderCellDef]' }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass CdkFooterCellDef {\n    /**\n     * @param {?} template\n     */\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkFooterCellDef.ɵfac = function CdkFooterCellDef_Factory(t) { return new (t || CdkFooterCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkFooterCellDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkFooterCellDef, selectors: [[\"\", \"cdkFooterCellDef\", \"\"]] });\n/** @nocollapse */\nCdkFooterCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterCellDef, [{\n        type: Directive,\n        args: [{ selector: '[cdkFooterCellDef]' }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n// Boilerplate for applying mixins to CdkColumnDef.\n/**\n * \\@docs-private\n */\nclass CdkColumnDefBase {\n}\n/** @type {?} */\nconst _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nclass CdkColumnDef extends _CdkColumnDefBase {\n    constructor() {\n        super(...arguments);\n        this._stickyEnd = false;\n    }\n    /**\n     * Unique name for this column.\n     * @return {?}\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    set name(name) {\n        // If the directive is set without a name (updated programatically), then this setter will\n        // trigger with an empty string and should not overwrite the programatically set value.\n        if (!name) {\n            return;\n        }\n        this._name = name;\n        this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');\n    }\n    /**\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n     * has been changed.\n     * @return {?}\n     */\n    get stickyEnd() {\n        return this._stickyEnd;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set stickyEnd(v) {\n        /** @type {?} */\n        const prevValue = this._stickyEnd;\n        this._stickyEnd = coerceBooleanProperty(v);\n        this._hasStickyChanged = prevValue !== this._stickyEnd;\n    }\n}\nCdkColumnDef.ɵfac = /*@__PURE__*/ function () { let ɵCdkColumnDef_BaseFactory; return function CdkColumnDef_Factory(t) { return (ɵCdkColumnDef_BaseFactory || (ɵCdkColumnDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(CdkColumnDef)))(t || CdkColumnDef); }; }();\nCdkColumnDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkColumnDef, selectors: [[\"\", \"cdkColumnDef\", \"\"]], contentQueries: function CdkColumnDef_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkCellDef, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderCellDef, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterCellDef, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footerCell = _t.first);\n    } }, inputs: { sticky: \"sticky\", name: [\"cdkColumnDef\", \"name\"], stickyEnd: \"stickyEnd\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkColumnDef.propDecorators = {\n    name: [{ type: Input, args: ['cdkColumnDef',] }],\n    stickyEnd: [{ type: Input, args: ['stickyEnd',] }],\n    cell: [{ type: ContentChild, args: [CdkCellDef, { static: false },] }],\n    headerCell: [{ type: ContentChild, args: [CdkHeaderCellDef, { static: false },] }],\n    footerCell: [{ type: ContentChild, args: [CdkFooterCellDef, { static: false },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkColumnDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkColumnDef]',\n                inputs: ['sticky'],\n                providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }]\n            }]\n    }], null, { name: [{\n            type: Input,\n            args: ['cdkColumnDef']\n        }], stickyEnd: [{\n            type: Input,\n            args: ['stickyEnd']\n        }], cell: [{\n            type: ContentChild,\n            args: [CdkCellDef, { static: false }]\n        }], headerCell: [{\n            type: ContentChild,\n            args: [CdkHeaderCellDef, { static: false }]\n        }], footerCell: [{\n            type: ContentChild,\n            args: [CdkFooterCellDef, { static: false }]\n        }] }); })();\n/**\n * Base class for the cells. Adds a CSS classname that identifies the column it renders in.\n */\nclass BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        /** @type {?} */\n        const columnClassName = `cdk-column-${columnDef.cssClassFriendlyName}`;\n        elementRef.nativeElement.classList.add(columnClassName);\n    }\n}\n/**\n * Header cell template container that adds the right classes and role.\n */\nclass CdkHeaderCell extends BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkHeaderCell.ɵfac = function CdkHeaderCell_Factory(t) { return new (t || CdkHeaderCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkHeaderCell.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkHeaderCell, selectors: [[\"cdk-header-cell\"], [\"th\", \"cdk-header-cell\", \"\"]], hostAttrs: [\"role\", \"columnheader\", 1, \"cdk-header-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nCdkHeaderCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderCell, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-header-cell, th[cdk-header-cell]',\n                host: {\n                    'class': 'cdk-header-cell',\n                    'role': 'columnheader'\n                }\n            }]\n    }], function () { return [{ type: CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Footer cell template container that adds the right classes and role.\n */\nclass CdkFooterCell extends BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkFooterCell.ɵfac = function CdkFooterCell_Factory(t) { return new (t || CdkFooterCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkFooterCell.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkFooterCell, selectors: [[\"cdk-footer-cell\"], [\"td\", \"cdk-footer-cell\", \"\"]], hostAttrs: [\"role\", \"gridcell\", 1, \"cdk-footer-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nCdkFooterCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterCell, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n                host: {\n                    'class': 'cdk-footer-cell',\n                    'role': 'gridcell'\n                }\n            }]\n    }], function () { return [{ type: CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Cell template container that adds the right classes and role.\n */\nclass CdkCell extends BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkCell.ɵfac = function CdkCell_Factory(t) { return new (t || CdkCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkCell.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkCell, selectors: [[\"cdk-cell\"], [\"td\", \"cdk-cell\", \"\"]], hostAttrs: [\"role\", \"gridcell\", 1, \"cdk-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nCdkCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCell, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-cell, td[cdk-cell]',\n                host: {\n                    'class': 'cdk-cell',\n                    'role': 'gridcell'\n                }\n            }]\n    }], function () { return [{ type: CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @type {?}\n */\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n * @abstract\n */\nclass BaseRowDef {\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        this.template = template;\n        this._differs = _differs;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n        // of the columns property or an empty array if none is provided.\n        if (!this._columnsDiffer) {\n            /** @type {?} */\n            const columns = (changes['columns'] && changes['columns'].currentValue) || [];\n            this._columnsDiffer = this._differs.find(columns).create();\n            this._columnsDiffer.diff(columns);\n        }\n    }\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     * @return {?}\n     */\n    getColumnsDiff() {\n        return this._columnsDiffer.diff(this.columns);\n    }\n    /**\n     * Gets this row def's relevant cell template from the provided column def.\n     * @param {?} column\n     * @return {?}\n     */\n    extractCellTemplate(column) {\n        if (this instanceof CdkHeaderRowDef) {\n            return column.headerCell.template;\n        }\n        if (this instanceof CdkFooterRowDef) {\n            return column.footerCell.template;\n        }\n        else {\n            return column.cell.template;\n        }\n    }\n}\nBaseRowDef.ɵfac = function BaseRowDef_Factory(t) { ɵngcc0.ɵɵinvalidFactory(); };\nBaseRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: BaseRowDef, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n\n// Boilerplate for applying mixins to CdkHeaderRowDef.\n/**\n * \\@docs-private\n */\nclass CdkHeaderRowDefBase extends BaseRowDef {\n}\n/** @type {?} */\nconst _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass CdkHeaderRowDef extends _CdkHeaderRowDefBase {\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        super(template, _differs);\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkHeaderRowDef.ɵfac = function CdkHeaderRowDef_Factory(t) { return new (t || CdkHeaderRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };\nCdkHeaderRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkHeaderRowDef, selectors: [[\"\", \"cdkHeaderRowDef\", \"\"]], inputs: { columns: [\"cdkHeaderRowDef\", \"columns\"], sticky: [\"cdkHeaderRowDefSticky\", \"sticky\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nCdkHeaderRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkHeaderRowDef]',\n                inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky']\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }]; }, null); })();\n// Boilerplate for applying mixins to CdkFooterRowDef.\n/**\n * \\@docs-private\n */\nclass CdkFooterRowDefBase extends BaseRowDef {\n}\n/** @type {?} */\nconst _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass CdkFooterRowDef extends _CdkFooterRowDefBase {\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        super(template, _differs);\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkFooterRowDef.ɵfac = function CdkFooterRowDef_Factory(t) { return new (t || CdkFooterRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };\nCdkFooterRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkFooterRowDef, selectors: [[\"\", \"cdkFooterRowDef\", \"\"]], inputs: { columns: [\"cdkFooterRowDef\", \"columns\"], sticky: [\"cdkFooterRowDefSticky\", \"sticky\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nCdkFooterRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkFooterRowDef]',\n                inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky']\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }]; }, null); })();\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n * @template T\n */\nclass CdkRowDef extends BaseRowDef {\n    // TODO(andrewseguin): Add an input for providing a switch function to determine\n    //   if this template should be used.\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        super(template, _differs);\n    }\n}\nCdkRowDef.ɵfac = function CdkRowDef_Factory(t) { return new (t || CdkRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };\nCdkRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkRowDef, selectors: [[\"\", \"cdkRowDef\", \"\"]], inputs: { columns: [\"cdkRowDefColumns\", \"columns\"], when: [\"cdkRowDefWhen\", \"when\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nCdkRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkRowDef]',\n                inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen']\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }]; }, null); })();\n/**\n * Outlet for rendering cells inside of a row or header row.\n * \\@docs-private\n */\nclass CdkCellOutlet {\n    /**\n     * @param {?} _viewContainer\n     */\n    constructor(_viewContainer) {\n        this._viewContainer = _viewContainer;\n        CdkCellOutlet.mostRecentCellOutlet = this;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // If this was the last outlet being rendered in the view, remove the reference\n        // from the static property after it has been destroyed to avoid leaking memory.\n        if (CdkCellOutlet.mostRecentCellOutlet === this) {\n            CdkCellOutlet.mostRecentCellOutlet = null;\n        }\n    }\n}\nCdkCellOutlet.ɵfac = function CdkCellOutlet_Factory(t) { return new (t || CdkCellOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };\nCdkCellOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkCellOutlet, selectors: [[\"\", \"cdkCellOutlet\", \"\"]] });\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n */\nCdkCellOutlet.mostRecentCellOutlet = null;\n/** @nocollapse */\nCdkCellOutlet.ctorParameters = () => [\n    { type: ViewContainerRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCellOutlet, [{\n        type: Directive,\n        args: [{ selector: '[cdkCellOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, null); })();\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nclass CdkHeaderRow {\n}\nCdkHeaderRow.ɵfac = function CdkHeaderRow_Factory(t) { return new (t || CdkHeaderRow)(); };\nCdkHeaderRow.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkHeaderRow, selectors: [[\"cdk-header-row\"], [\"tr\", \"cdk-header-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"cdk-header-row\"], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function CdkHeaderRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, dependencies: [CdkCellOutlet], encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderRow, [{\n        type: Component,\n        args: [{ selector: 'cdk-header-row, tr[cdk-header-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-header-row',\n                    'role': 'row'\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], null, null); })();\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\nclass CdkFooterRow {\n}\nCdkFooterRow.ɵfac = function CdkFooterRow_Factory(t) { return new (t || CdkFooterRow)(); };\nCdkFooterRow.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkFooterRow, selectors: [[\"cdk-footer-row\"], [\"tr\", \"cdk-footer-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"cdk-footer-row\"], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function CdkFooterRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, dependencies: [CdkCellOutlet], encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterRow, [{\n        type: Component,\n        args: [{ selector: 'cdk-footer-row, tr[cdk-footer-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-footer-row',\n                    'role': 'row'\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], null, null); })();\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nclass CdkRow {\n}\nCdkRow.ɵfac = function CdkRow_Factory(t) { return new (t || CdkRow)(); };\nCdkRow.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkRow, selectors: [[\"cdk-row\"], [\"tr\", \"cdk-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"cdk-row\"], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function CdkRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, dependencies: [CdkCellOutlet], encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkRow, [{\n        type: Component,\n        args: [{ selector: 'cdk-row, tr[cdk-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-row',\n                    'role': 'row'\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * List of all possible directions that can be used for sticky positioning.\n * \\@docs-private\n * @type {?}\n */\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * \\@docs-private\n */\nclass StickyStyler {\n    /**\n     * @param {?} _isNativeHtmlTable Whether the sticky logic should be based on a table\n     *     that uses the native `<table>` element.\n     * @param {?} _stickCellCss The CSS class that will be applied to every row/cell that has\n     *     sticky positioning applied.\n     * @param {?} direction The directionality context of the table (ltr/rtl); affects column positioning\n     *     by reversing left/right positions.\n     * @param {?=} _isBrowser Whether the table is currently being rendered on the server or the client.\n     */\n    constructor(_isNativeHtmlTable, _stickCellCss, direction, _isBrowser = true) {\n        this._isNativeHtmlTable = _isNativeHtmlTable;\n        this._stickCellCss = _stickCellCss;\n        this.direction = direction;\n        this._isBrowser = _isBrowser;\n    }\n    /**\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n     * @param {?} rows The list of rows that should be cleared from sticking in the provided directions\n     * @param {?} stickyDirections The directions that should no longer be set as sticky on the rows.\n     * @return {?}\n     */\n    clearStickyPositioning(rows, stickyDirections) {\n        for (const row of rows) {\n            // If the row isn't an element (e.g. if it's an `ng-container`),\n            // it won't have inline styles or `children` so we skip it.\n            if (row.nodeType !== row.ELEMENT_NODE) {\n                continue;\n            }\n            this._removeStickyStyle(row, stickyDirections);\n            for (let i = 0; i < row.children.length; i++) {\n                /** @type {?} */\n                const cell = (/** @type {?} */ (row.children[i]));\n                this._removeStickyStyle(cell, stickyDirections);\n            }\n        }\n    }\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param {?} rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param {?} stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param {?} stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @return {?}\n     */\n    updateStickyColumns(rows, stickyStartStates, stickyEndStates) {\n        /** @type {?} */\n        const hasStickyColumns = stickyStartStates.some((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state => state)) || stickyEndStates.some((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state => state));\n        if (!rows.length || !hasStickyColumns || !this._isBrowser) {\n            return;\n        }\n        /** @type {?} */\n        const firstRow = rows[0];\n        /** @type {?} */\n        const numCells = firstRow.children.length;\n        /** @type {?} */\n        const cellWidths = this._getCellWidths(firstRow);\n        /** @type {?} */\n        const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n        /** @type {?} */\n        const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n        /** @type {?} */\n        const isRtl = this.direction === 'rtl';\n        for (const row of rows) {\n            for (let i = 0; i < numCells; i++) {\n                /** @type {?} */\n                const cell = (/** @type {?} */ (row.children[i]));\n                if (stickyStartStates[i]) {\n                    this._addStickyStyle(cell, isRtl ? 'right' : 'left', startPositions[i]);\n                }\n                if (stickyEndStates[i]) {\n                    this._addStickyStyle(cell, isRtl ? 'left' : 'right', endPositions[i]);\n                }\n            }\n        }\n    }\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param {?} rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param {?} stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param {?} position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     * @return {?}\n     */\n    stickRows(rowsToStick, stickyStates, position) {\n        // Since we can't measure the rows on the server, we can't stick the rows properly.\n        if (!this._isBrowser) {\n            return;\n        }\n        // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n        // position such that the last row stuck will be \"bottom: 0px\" and so on.\n        /** @type {?} */\n        const rows = position === 'bottom' ? rowsToStick.reverse() : rowsToStick;\n        /** @type {?} */\n        let stickyHeight = 0;\n        for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n            if (!stickyStates[rowIndex]) {\n                continue;\n            }\n            /** @type {?} */\n            const row = rows[rowIndex];\n            if (this._isNativeHtmlTable) {\n                for (let j = 0; j < row.children.length; j++) {\n                    /** @type {?} */\n                    const cell = (/** @type {?} */ (row.children[j]));\n                    this._addStickyStyle(cell, position, stickyHeight);\n                }\n            }\n            else {\n                // Flex does not respect the stick positioning on the cells, needs to be applied to the row.\n                // If this is applied on a native table, Safari causes the header to fly in wrong direction.\n                this._addStickyStyle(row, position, stickyHeight);\n            }\n            if (rowIndex === rows.length - 1) {\n                // prevent unnecessary reflow from getBoundingClientRect()\n                return;\n            }\n            stickyHeight += row.getBoundingClientRect().height;\n        }\n    }\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     * @param {?} tableElement\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    updateStickyFooterContainer(tableElement, stickyStates) {\n        if (!this._isNativeHtmlTable) {\n            return;\n        }\n        /** @type {?} */\n        const tfoot = (/** @type {?} */ (tableElement.querySelector('tfoot')));\n        if (stickyStates.some((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state => !state))) {\n            this._removeStickyStyle(tfoot, ['bottom']);\n        }\n        else {\n            this._addStickyStyle(tfoot, 'bottom', 0);\n        }\n    }\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     * @param {?} element\n     * @param {?} stickyDirections\n     * @return {?}\n     */\n    _removeStickyStyle(element, stickyDirections) {\n        for (const dir of stickyDirections) {\n            element.style[dir] = '';\n        }\n        element.style.zIndex = this._getCalculatedZIndex(element);\n        // If the element no longer has any more sticky directions, remove sticky positioning and\n        // the sticky CSS class.\n        /** @type {?} */\n        const hasDirection = STICKY_DIRECTIONS.some((/**\n         * @param {?} dir\n         * @return {?}\n         */\n        dir => !!element.style[dir]));\n        if (!hasDirection) {\n            element.style.position = '';\n            element.classList.remove(this._stickCellCss);\n        }\n    }\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     * @param {?} element\n     * @param {?} dir\n     * @param {?} dirValue\n     * @return {?}\n     */\n    _addStickyStyle(element, dir, dirValue) {\n        element.classList.add(this._stickCellCss);\n        element.style[dir] = `${dirValue}px`;\n        element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n        element.style.zIndex = this._getCalculatedZIndex(element);\n    }\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     * @param {?} element\n     * @return {?}\n     */\n    _getCalculatedZIndex(element) {\n        /** @type {?} */\n        const zIndexIncrements = {\n            top: 100,\n            bottom: 10,\n            left: 1,\n            right: 1,\n        };\n        /** @type {?} */\n        let zIndex = 0;\n        for (const dir of STICKY_DIRECTIONS) {\n            if (element.style[dir]) {\n                zIndex += zIndexIncrements[dir];\n            }\n        }\n        return zIndex ? `${zIndex}` : '';\n    }\n    /**\n     * Gets the widths for each cell in the provided row.\n     * @param {?} row\n     * @return {?}\n     */\n    _getCellWidths(row) {\n        /** @type {?} */\n        const cellWidths = [];\n        /** @type {?} */\n        const firstRowCells = row.children;\n        for (let i = 0; i < firstRowCells.length; i++) {\n            /** @type {?} */\n            let cell = (/** @type {?} */ (firstRowCells[i]));\n            cellWidths.push(cell.getBoundingClientRect().width);\n        }\n        return cellWidths;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     * @param {?} widths\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    _getStickyStartColumnPositions(widths, stickyStates) {\n        /** @type {?} */\n        const positions = [];\n        /** @type {?} */\n        let nextPosition = 0;\n        for (let i = 0; i < widths.length; i++) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     * @param {?} widths\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    _getStickyEndColumnPositions(widths, stickyStates) {\n        /** @type {?} */\n        const positions = [];\n        /** @type {?} */\n        let nextPosition = 0;\n        for (let i = widths.length; i > 0; i--) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * \\@docs-private\n * @param {?} id Id whose lookup failed.\n * @return {?}\n */\nfunction getTableUnknownColumnError(id) {\n    return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * \\@docs-private\n * @param {?} name\n * @return {?}\n */\nfunction getTableDuplicateColumnNameError(name) {\n    return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableMultipleDefaultRowDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * \\@docs-private\n * @param {?} data\n * @return {?}\n */\nfunction getTableMissingMatchingRowDefError(data) {\n    return Error(`Could not find a matching row definition for the` +\n        `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableMissingRowDefsError() {\n    return Error('Missing definitions for header, footer, and row; ' +\n        'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableUnknownDataSourceError() {\n    return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableTextColumnMissingParentTableError() {\n    return Error(`Text column could not find a parent table for registration.`);\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableTextColumnMissingNameError() {\n    return Error(`Table text column must have a name.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * \\@docs-private\n */\nclass DataRowOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?} elementRef\n     */\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nDataRowOutlet.ɵfac = function DataRowOutlet_Factory(t) { return new (t || DataRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nDataRowOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DataRowOutlet, selectors: [[\"\", \"rowOutlet\", \"\"]] });\n/** @nocollapse */\nDataRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DataRowOutlet, [{\n        type: Directive,\n        args: [{ selector: '[rowOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * \\@docs-private\n */\nclass HeaderRowOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?} elementRef\n     */\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nHeaderRowOutlet.ɵfac = function HeaderRowOutlet_Factory(t) { return new (t || HeaderRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nHeaderRowOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: HeaderRowOutlet, selectors: [[\"\", \"headerRowOutlet\", \"\"]] });\n/** @nocollapse */\nHeaderRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HeaderRowOutlet, [{\n        type: Directive,\n        args: [{ selector: '[headerRowOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * \\@docs-private\n */\nclass FooterRowOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?} elementRef\n     */\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nFooterRowOutlet.ɵfac = function FooterRowOutlet_Factory(t) { return new (t || FooterRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nFooterRowOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: FooterRowOutlet, selectors: [[\"\", \"footerRowOutlet\", \"\"]] });\n/** @nocollapse */\nFooterRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FooterRowOutlet, [{\n        type: Directive,\n        args: [{ selector: '[footerRowOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * \\@docs-private\n * @type {?}\n */\nconst CDK_TABLE_TEMPLATE = \n// Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n`\n  <ng-content select=\"caption\"></ng-content>\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>\n`;\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n * @template T\n */\nclass CdkTable {\n    /**\n     * @param {?} _differs\n     * @param {?} _changeDetectorRef\n     * @param {?} _elementRef\n     * @param {?} role\n     * @param {?} _dir\n     * @param {?} _document\n     * @param {?} _platform\n     */\n    constructor(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        this._platform = _platform;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._onDestroy = new Subject();\n        /**\n         * Map of all the user's defined columns (header, data, and footer cell template) identified by\n         * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n         * any custom column definitions added to `_customColumnDefs`.\n         */\n        this._columnDefsByName = new Map();\n        /**\n         * Column definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * column definitions as *its* content child.\n         */\n        this._customColumnDefs = new Set();\n        /**\n         * Data row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in data rows as *its* content child.\n         */\n        this._customRowDefs = new Set();\n        /**\n         * Header row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in header rows as *its* content child.\n         */\n        this._customHeaderRowDefs = new Set();\n        /**\n         * Footer row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n         * built-in footer row as *its* content child.\n         */\n        this._customFooterRowDefs = new Set();\n        /**\n         * Whether the header row definition has been changed. Triggers an update to the header row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._headerRowDefChanged = true;\n        /**\n         * Whether the footer row definition has been changed. Triggers an update to the footer row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._footerRowDefChanged = true;\n        /**\n         * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n         * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n         * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n         * and row template matches, which allows the `IterableDiffer` to check rows by reference\n         * and understand which rows are added/moved/removed.\n         *\n         * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n         * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n         * contains an array of created pairs. The array is necessary to handle cases where the data\n         * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n         * stored.\n         */\n        this._cachedRenderRowsMap = new Map();\n        /**\n         * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n         * table subclasses.\n         */\n        this.stickyCssClass = 'cdk-table-sticky';\n        this._multiTemplateDataRows = false;\n        // TODO(andrewseguin): Remove max value as the end index\n        //   and instead calculate the view on init and scroll.\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         *\n         * \\@docs-private\n         */\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n        if (!role) {\n            this._elementRef.nativeElement.setAttribute('role', 'grid');\n        }\n        this._document = _document;\n        this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n    }\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n     * relative to the function to know if a row should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     * @return {?}\n     */\n    get trackBy() {\n        return this._trackByFn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set trackBy(fn) {\n        if (isDevMode() && fn != null && typeof fn !== 'function' && (/** @type {?} */ (console)) &&\n            (/** @type {?} */ (console.warn))) {\n            console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n        }\n        this._trackByFn = fn;\n    }\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     * If a data array is provided, the table must be notified when the array's objects are\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n     * render the diff since the last table render. If the data array reference is changed, the table\n     * will automatically trigger an update to the rows.\n     *\n     * When providing an Observable stream, the table will trigger an update automatically when the\n     * stream emits a new array of data.\n     *\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\n     * provided by the connect function and trigger updates when that stream emits new data array\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n     * subscriptions registered during the connect process).\n     * @return {?}\n     */\n    get dataSource() {\n        return this._dataSource;\n    }\n    /**\n     * @param {?} dataSource\n     * @return {?}\n     */\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    /**\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\n     * defined in the table, or otherwise the default row which does not have a when predicate.\n     * @return {?}\n     */\n    get multiTemplateDataRows() {\n        return this._multiTemplateDataRows;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set multiTemplateDataRows(v) {\n        this._multiTemplateDataRows = coerceBooleanProperty(v);\n        // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n        // this setter will be invoked before the row outlet has been defined hence the null check.\n        if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n            this._forceRenderDataRows();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._setupStickyStyler();\n        if (this._isNativeHtmlTable) {\n            this._applyNativeTableSections();\n        }\n        // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n        // the user has provided a custom trackBy, return the result of that function as evaluated\n        // with the values of the `RenderRow`'s data and index.\n        this._dataDiffer = this._differs.find([]).create((/**\n         * @param {?} _i\n         * @param {?} dataRow\n         * @return {?}\n         */\n        (_i, dataRow) => {\n            return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n        this._cacheRowDefs();\n        this._cacheColumnDefs();\n        // Make sure that the user has at least added header, footer, or data row def.\n        if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length) {\n            throw getTableMissingRowDefsError();\n        }\n        // Render updates if the list of columns have been changed for the header, row, or footer defs.\n        this._renderUpdatedColumns();\n        // If the header row definition has been changed, trigger a render to the header row.\n        if (this._headerRowDefChanged) {\n            this._forceRenderHeaderRows();\n            this._headerRowDefChanged = false;\n        }\n        // If the footer row definition has been changed, trigger a render to the footer row.\n        if (this._footerRowDefChanged) {\n            this._forceRenderFooterRows();\n            this._footerRowDefChanged = false;\n        }\n        // If there is a data source and row definitions, connect to the data source unless a\n        // connection has already been made.\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n            this._observeRenderChanges();\n        }\n        this._checkStickyStates();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._rowOutlet.viewContainer.clear();\n        this._headerRowOutlet.viewContainer.clear();\n        this._footerRowOutlet.viewContainer.clear();\n        this._cachedRenderRowsMap.clear();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n    }\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     * @return {?}\n     */\n    renderRows() {\n        this._renderRows = this._getAllRenderRows();\n        /** @type {?} */\n        const changes = this._dataDiffer.diff(this._renderRows);\n        if (!changes) {\n            return;\n        }\n        /** @type {?} */\n        const viewContainer = this._rowOutlet.viewContainer;\n        changes.forEachOperation((/**\n         * @param {?} record\n         * @param {?} prevIndex\n         * @param {?} currentIndex\n         * @return {?}\n         */\n        (record, prevIndex, currentIndex) => {\n            if (record.previousIndex == null) {\n                this._insertRow(record.item, (/** @type {?} */ (currentIndex)));\n            }\n            else if (currentIndex == null) {\n                viewContainer.remove((/** @type {?} */ (prevIndex)));\n            }\n            else {\n                /** @type {?} */\n                const view = (/** @type {?} */ (viewContainer.get((/** @type {?} */ (prevIndex)))));\n                viewContainer.move((/** @type {?} */ (view)), currentIndex);\n            }\n        }));\n        // Update the meta context of a row's context data (index, count, first, last, ...)\n        this._updateRowIndexContext();\n        // Update rows that did not get added/removed/moved but may have had their identity changed,\n        // e.g. if trackBy matched data on some property but the actual data reference changed.\n        changes.forEachIdentityChange((/**\n         * @param {?} record\n         * @return {?}\n         */\n        (record) => {\n            /** @type {?} */\n            const rowView = (/** @type {?} */ (viewContainer.get((/** @type {?} */ (record.currentIndex)))));\n            rowView.context.$implicit = record.item.data;\n        }));\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Sets the header row definition to be used. Overrides the header row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the\n     * table's content is checked.\n     * \\@docs-private\n     * @deprecated Use `addHeaderRowDef` and `removeHeaderRowDef` instead\n     * \\@breaking-change 8.0.0\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    setHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs = new Set([headerRowDef]);\n        this._headerRowDefChanged = true;\n    }\n    /**\n     * Sets the footer row definition to be used. Overrides the footer row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the\n     * table's content is checked.\n     * \\@docs-private\n     * @deprecated Use `addFooterRowDef` and `removeFooterRowDef` instead\n     * \\@breaking-change 8.0.0\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    setFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs = new Set([footerRowDef]);\n        this._footerRowDefChanged = true;\n    }\n    /**\n     * Adds a column definition that was not included as part of the content children.\n     * @param {?} columnDef\n     * @return {?}\n     */\n    addColumnDef(columnDef) {\n        this._customColumnDefs.add(columnDef);\n    }\n    /**\n     * Removes a column definition that was not included as part of the content children.\n     * @param {?} columnDef\n     * @return {?}\n     */\n    removeColumnDef(columnDef) {\n        this._customColumnDefs.delete(columnDef);\n    }\n    /**\n     * Adds a row definition that was not included as part of the content children.\n     * @param {?} rowDef\n     * @return {?}\n     */\n    addRowDef(rowDef) {\n        this._customRowDefs.add(rowDef);\n    }\n    /**\n     * Removes a row definition that was not included as part of the content children.\n     * @param {?} rowDef\n     * @return {?}\n     */\n    removeRowDef(rowDef) {\n        this._customRowDefs.delete(rowDef);\n    }\n    /**\n     * Adds a header row definition that was not included as part of the content children.\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    addHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.add(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /**\n     * Removes a header row definition that was not included as part of the content children.\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    removeHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.delete(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /**\n     * Adds a footer row definition that was not included as part of the content children.\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    addFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.add(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /**\n     * Removes a footer row definition that was not included as part of the content children.\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    removeFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.delete(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     * @return {?}\n     */\n    updateStickyHeaderRowStyles() {\n        /** @type {?} */\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        /** @type {?} */\n        const tableElement = (/** @type {?} */ (this._elementRef.nativeElement));\n        // Hide the thead element if there are no header rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        /** @type {?} */\n        const thead = tableElement.querySelector('thead');\n        if (thead) {\n            thead.style.display = headerRows.length ? '' : 'none';\n        }\n        /** @type {?} */\n        const stickyStates = this._headerRowDefs.map((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.sticky));\n        this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n        this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._headerRowDefs.forEach((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.resetStickyChanged()));\n    }\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     * @return {?}\n     */\n    updateStickyFooterRowStyles() {\n        /** @type {?} */\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        /** @type {?} */\n        const tableElement = (/** @type {?} */ (this._elementRef.nativeElement));\n        // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        /** @type {?} */\n        const tfoot = tableElement.querySelector('tfoot');\n        if (tfoot) {\n            tfoot.style.display = footerRows.length ? '' : 'none';\n        }\n        /** @type {?} */\n        const stickyStates = this._footerRowDefs.map((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.sticky));\n        this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n        this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n        this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._footerRowDefs.forEach((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.resetStickyChanged()));\n    }\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     * @return {?}\n     */\n    updateStickyColumnStyles() {\n        /** @type {?} */\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        /** @type {?} */\n        const dataRows = this._getRenderedRows(this._rowOutlet);\n        /** @type {?} */\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // Clear the left and right positioning from all columns in the table across all rows since\n        // sticky columns span across all table sections (header, data, footer)\n        this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n        // Update the sticky styles for each header row depending on the def's sticky state\n        headerRows.forEach((/**\n         * @param {?} headerRow\n         * @param {?} i\n         * @return {?}\n         */\n        (headerRow, i) => {\n            this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n        }));\n        // Update the sticky styles for each data row depending on its def's sticky state\n        this._rowDefs.forEach((/**\n         * @param {?} rowDef\n         * @return {?}\n         */\n        rowDef => {\n            // Collect all the rows rendered with this row definition.\n            /** @type {?} */\n            const rows = [];\n            for (let i = 0; i < dataRows.length; i++) {\n                if (this._renderRows[i].rowDef === rowDef) {\n                    rows.push(dataRows[i]);\n                }\n            }\n            this._addStickyColumnStyles(rows, rowDef);\n        }));\n        // Update the sticky styles for each footer row depending on the def's sticky state\n        footerRows.forEach((/**\n         * @param {?} footerRow\n         * @param {?} i\n         * @return {?}\n         */\n        (footerRow, i) => {\n            this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n        }));\n        // Reset the dirty state of the sticky input change since it has been used.\n        Array.from(this._columnDefsByName.values()).forEach((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.resetStickyChanged()));\n    }\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     * @private\n     * @return {?}\n     */\n    _getAllRenderRows() {\n        /** @type {?} */\n        const renderRows = [];\n        // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n        // new cache while unused ones can be picked up by garbage collection.\n        /** @type {?} */\n        const prevCachedRenderRows = this._cachedRenderRowsMap;\n        this._cachedRenderRowsMap = new Map();\n        // For each data object, get the list of rows that should be rendered, represented by the\n        // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n        for (let i = 0; i < this._data.length; i++) {\n            /** @type {?} */\n            let data = this._data[i];\n            /** @type {?} */\n            const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n            if (!this._cachedRenderRowsMap.has(data)) {\n                this._cachedRenderRowsMap.set(data, new WeakMap());\n            }\n            for (let j = 0; j < renderRowsForData.length; j++) {\n                /** @type {?} */\n                let renderRow = renderRowsForData[j];\n                /** @type {?} */\n                const cache = (/** @type {?} */ (this._cachedRenderRowsMap.get(renderRow.data)));\n                if (cache.has(renderRow.rowDef)) {\n                    (/** @type {?} */ (cache.get(renderRow.rowDef))).push(renderRow);\n                }\n                else {\n                    cache.set(renderRow.rowDef, [renderRow]);\n                }\n                renderRows.push(renderRow);\n            }\n        }\n        return renderRows;\n    }\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     * @private\n     * @param {?} data\n     * @param {?} dataIndex\n     * @param {?=} cache\n     * @return {?}\n     */\n    _getRenderRowsForData(data, dataIndex, cache) {\n        /** @type {?} */\n        const rowDefs = this._getRowDefs(data, dataIndex);\n        return rowDefs.map((/**\n         * @param {?} rowDef\n         * @return {?}\n         */\n        rowDef => {\n            /** @type {?} */\n            const cachedRenderRows = (cache && cache.has(rowDef)) ? (/** @type {?} */ (cache.get(rowDef))) : [];\n            if (cachedRenderRows.length) {\n                /** @type {?} */\n                const dataRow = (/** @type {?} */ (cachedRenderRows.shift()));\n                dataRow.dataIndex = dataIndex;\n                return dataRow;\n            }\n            else {\n                return { data, rowDef, dataIndex };\n            }\n        }));\n    }\n    /**\n     * Update the map containing the content's column definitions.\n     * @private\n     * @return {?}\n     */\n    _cacheColumnDefs() {\n        this._columnDefsByName.clear();\n        /** @type {?} */\n        const columnDefs = mergeQueryListAndSet(this._contentColumnDefs, this._customColumnDefs);\n        columnDefs.forEach((/**\n         * @param {?} columnDef\n         * @return {?}\n         */\n        columnDef => {\n            if (this._columnDefsByName.has(columnDef.name)) {\n                throw getTableDuplicateColumnNameError(columnDef.name);\n            }\n            this._columnDefsByName.set(columnDef.name, columnDef);\n        }));\n    }\n    /**\n     * Update the list of all available row definitions that can be used.\n     * @private\n     * @return {?}\n     */\n    _cacheRowDefs() {\n        this._headerRowDefs =\n            mergeQueryListAndSet(this._contentHeaderRowDefs, this._customHeaderRowDefs);\n        this._footerRowDefs =\n            mergeQueryListAndSet(this._contentFooterRowDefs, this._customFooterRowDefs);\n        this._rowDefs = mergeQueryListAndSet(this._contentRowDefs, this._customRowDefs);\n        // After all row definitions are determined, find the row definition to be considered default.\n        /** @type {?} */\n        const defaultRowDefs = this._rowDefs.filter((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => !def.when));\n        if (!this.multiTemplateDataRows && defaultRowDefs.length > 1) {\n            throw getTableMultipleDefaultRowDefsError();\n        }\n        this._defaultRowDef = defaultRowDefs[0];\n    }\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     * @private\n     * @return {?}\n     */\n    _renderUpdatedColumns() {\n        /** @type {?} */\n        const columnsDiffReducer = (/**\n         * @param {?} acc\n         * @param {?} def\n         * @return {?}\n         */\n        (acc, def) => acc || !!def.getColumnsDiff());\n        // Force re-render data rows if the list of column definitions have changed.\n        if (this._rowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderDataRows();\n        }\n        // Force re-render header/footer rows if the list of column definitions have changed..\n        if (this._headerRowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderHeaderRows();\n        }\n        if (this._footerRowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderFooterRows();\n        }\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     * @private\n     * @param {?} dataSource\n     * @return {?}\n     */\n    _switchDataSource(dataSource) {\n        this._data = [];\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n        // Stop listening for data from the previous data source.\n        if (this._renderChangeSubscription) {\n            this._renderChangeSubscription.unsubscribe();\n            this._renderChangeSubscription = null;\n        }\n        if (!dataSource) {\n            if (this._dataDiffer) {\n                this._dataDiffer.diff([]);\n            }\n            this._rowOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n    }\n    /**\n     * Set up a subscription for the data provided by the data source.\n     * @private\n     * @return {?}\n     */\n    _observeRenderChanges() {\n        // If no data source has been set, there is nothing to observe for changes.\n        if (!this.dataSource) {\n            return;\n        }\n        /** @type {?} */\n        let dataStream;\n        if (isDataSource(this.dataSource)) {\n            dataStream = this.dataSource.connect(this);\n        }\n        else if (this.dataSource instanceof Observable) {\n            dataStream = this.dataSource;\n        }\n        else if (Array.isArray(this.dataSource)) {\n            dataStream = of(this.dataSource);\n        }\n        if (dataStream === undefined) {\n            throw getTableUnknownDataSourceError();\n        }\n        this._renderChangeSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe((/**\n         * @param {?} data\n         * @return {?}\n         */\n        data => {\n            this._data = data || [];\n            this.renderRows();\n        }));\n    }\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     * @private\n     * @return {?}\n     */\n    _forceRenderHeaderRows() {\n        // Clear the header row outlet if any content exists.\n        if (this._headerRowOutlet.viewContainer.length > 0) {\n            this._headerRowOutlet.viewContainer.clear();\n        }\n        this._headerRowDefs.forEach((/**\n         * @param {?} def\n         * @param {?} i\n         * @return {?}\n         */\n        (def, i) => this._renderRow(this._headerRowOutlet, def, i)));\n        this.updateStickyHeaderRowStyles();\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     * @private\n     * @return {?}\n     */\n    _forceRenderFooterRows() {\n        // Clear the footer row outlet if any content exists.\n        if (this._footerRowOutlet.viewContainer.length > 0) {\n            this._footerRowOutlet.viewContainer.clear();\n        }\n        this._footerRowDefs.forEach((/**\n         * @param {?} def\n         * @param {?} i\n         * @return {?}\n         */\n        (def, i) => this._renderRow(this._footerRowOutlet, def, i)));\n        this.updateStickyFooterRowStyles();\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Adds the sticky column styles for the rows according to the columns' stick states.\n     * @private\n     * @param {?} rows\n     * @param {?} rowDef\n     * @return {?}\n     */\n    _addStickyColumnStyles(rows, rowDef) {\n        /** @type {?} */\n        const columnDefs = Array.from(rowDef.columns || []).map((/**\n         * @param {?} columnName\n         * @return {?}\n         */\n        columnName => {\n            /** @type {?} */\n            const columnDef = this._columnDefsByName.get(columnName);\n            if (!columnDef) {\n                throw getTableUnknownColumnError(columnName);\n            }\n            return (/** @type {?} */ (columnDef));\n        }));\n        /** @type {?} */\n        const stickyStartStates = columnDefs.map((/**\n         * @param {?} columnDef\n         * @return {?}\n         */\n        columnDef => columnDef.sticky));\n        /** @type {?} */\n        const stickyEndStates = columnDefs.map((/**\n         * @param {?} columnDef\n         * @return {?}\n         */\n        columnDef => columnDef.stickyEnd));\n        this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates);\n    }\n    /**\n     * Gets the list of rows that have been rendered in the row outlet.\n     * @param {?} rowOutlet\n     * @return {?}\n     */\n    _getRenderedRows(rowOutlet) {\n        /** @type {?} */\n        const renderedRows = [];\n        for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n            /** @type {?} */\n            const viewRef = ((/** @type {?} */ ((/** @type {?} */ (rowOutlet.viewContainer.get(i))))));\n            renderedRows.push(viewRef.rootNodes[0]);\n        }\n        return renderedRows;\n    }\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     * @param {?} data\n     * @param {?} dataIndex\n     * @return {?}\n     */\n    _getRowDefs(data, dataIndex) {\n        if (this._rowDefs.length == 1) {\n            return [this._rowDefs[0]];\n        }\n        /** @type {?} */\n        let rowDefs = [];\n        if (this.multiTemplateDataRows) {\n            rowDefs = this._rowDefs.filter((/**\n             * @param {?} def\n             * @return {?}\n             */\n            def => !def.when || def.when(dataIndex, data)));\n        }\n        else {\n            /** @type {?} */\n            let rowDef = this._rowDefs.find((/**\n             * @param {?} def\n             * @return {?}\n             */\n            def => def.when && def.when(dataIndex, data))) || this._defaultRowDef;\n            if (rowDef) {\n                rowDefs.push(rowDef);\n            }\n        }\n        if (!rowDefs.length) {\n            throw getTableMissingMatchingRowDefError(data);\n        }\n        return rowDefs;\n    }\n    /**\n     * Create the embedded view for the data row template and place it in the correct index location\n     * within the data row view container.\n     * @private\n     * @param {?} renderRow\n     * @param {?} renderIndex\n     * @return {?}\n     */\n    _insertRow(renderRow, renderIndex) {\n        /** @type {?} */\n        const rowDef = renderRow.rowDef;\n        /** @type {?} */\n        const context = { $implicit: renderRow.data };\n        this._renderRow(this._rowOutlet, rowDef, renderIndex, context);\n    }\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     * @private\n     * @param {?} outlet\n     * @param {?} rowDef\n     * @param {?} index\n     * @param {?=} context\n     * @return {?}\n     */\n    _renderRow(outlet, rowDef, index, context = {}) {\n        // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n        outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n        for (let cellTemplate of this._getCellTemplates(rowDef)) {\n            if (CdkCellOutlet.mostRecentCellOutlet) {\n                CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     * @private\n     * @return {?}\n     */\n    _updateRowIndexContext() {\n        /** @type {?} */\n        const viewContainer = this._rowOutlet.viewContainer;\n        for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n            /** @type {?} */\n            const viewRef = (/** @type {?} */ (viewContainer.get(renderIndex)));\n            /** @type {?} */\n            const context = (/** @type {?} */ (viewRef.context));\n            context.count = count;\n            context.first = renderIndex === 0;\n            context.last = renderIndex === count - 1;\n            context.even = renderIndex % 2 === 0;\n            context.odd = !context.even;\n            if (this.multiTemplateDataRows) {\n                context.dataIndex = this._renderRows[renderIndex].dataIndex;\n                context.renderIndex = renderIndex;\n            }\n            else {\n                context.index = this._renderRows[renderIndex].dataIndex;\n            }\n        }\n    }\n    /**\n     * Gets the column definitions for the provided row def.\n     * @private\n     * @param {?} rowDef\n     * @return {?}\n     */\n    _getCellTemplates(rowDef) {\n        if (!rowDef || !rowDef.columns) {\n            return [];\n        }\n        return Array.from(rowDef.columns, (/**\n         * @param {?} columnId\n         * @return {?}\n         */\n        columnId => {\n            /** @type {?} */\n            const column = this._columnDefsByName.get(columnId);\n            if (!column) {\n                throw getTableUnknownColumnError(columnId);\n            }\n            return rowDef.extractCellTemplate(column);\n        }));\n    }\n    /**\n     * Adds native table sections (e.g. tbody) and moves the row outlets into them.\n     * @private\n     * @return {?}\n     */\n    _applyNativeTableSections() {\n        /** @type {?} */\n        const documentFragment = this._document.createDocumentFragment();\n        /** @type {?} */\n        const sections = [\n            { tag: 'thead', outlet: this._headerRowOutlet },\n            { tag: 'tbody', outlet: this._rowOutlet },\n            { tag: 'tfoot', outlet: this._footerRowOutlet },\n        ];\n        for (const section of sections) {\n            /** @type {?} */\n            const element = this._document.createElement(section.tag);\n            element.setAttribute('role', 'rowgroup');\n            element.appendChild(section.outlet.elementRef.nativeElement);\n            documentFragment.appendChild(element);\n        }\n        // Use a DocumentFragment so we don't hit the DOM on each iteration.\n        this._elementRef.nativeElement.appendChild(documentFragment);\n    }\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     * @private\n     * @return {?}\n     */\n    _forceRenderDataRows() {\n        this._dataDiffer.diff([]);\n        this._rowOutlet.viewContainer.clear();\n        this.renderRows();\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     * @private\n     * @return {?}\n     */\n    _checkStickyStates() {\n        /** @type {?} */\n        const stickyCheckReducer = (/**\n         * @param {?} acc\n         * @param {?} d\n         * @return {?}\n         */\n        (acc, d) => {\n            return acc || d.hasStickyChanged();\n        });\n        // Note that the check needs to occur for every definition since it notifies the definition\n        // that it can reset its dirty state. Using another operator like `some` may short-circuit\n        // remaining definitions and leave them in an unchecked state.\n        if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyHeaderRowStyles();\n        }\n        if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyFooterRowStyles();\n        }\n        if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     * @private\n     * @return {?}\n     */\n    _setupStickyStyler() {\n        /** @type {?} */\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._platform.isBrowser);\n        (this._dir ? this._dir.change : of())\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe((/**\n         * @param {?} value\n         * @return {?}\n         */\n        value => {\n            this._stickyStyler.direction = value;\n            this.updateStickyColumnStyles();\n        }));\n    }\n}\nCdkTable.ɵfac = function CdkTable_Factory(t) { return new (t || CdkTable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinjectAttribute('role'), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Platform)); };\nCdkTable.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkTable, selectors: [[\"cdk-table\"], [\"table\", \"cdk-table\", \"\"]], contentQueries: function CdkTable_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkColumnDef, 4);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkRowDef, 4);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderRowDef, 4);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterRowDef, 4);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentColumnDefs = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentRowDefs = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentHeaderRowDefs = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentFooterRowDefs = _t);\n    } }, viewQuery: function CdkTable_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(DataRowOutlet, 7);\n        ɵngcc0.ɵɵviewQuery(HeaderRowOutlet, 7);\n        ɵngcc0.ɵɵviewQuery(FooterRowOutlet, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._rowOutlet = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headerRowOutlet = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._footerRowOutlet = _t.first);\n    } }, hostAttrs: [1, \"cdk-table\"], inputs: { trackBy: \"trackBy\", dataSource: \"dataSource\", multiTemplateDataRows: \"multiTemplateDataRows\" }, exportAs: [\"cdkTable\"], ngContentSelectors: _c1, decls: 4, vars: 0, consts: [[\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]], template: function CdkTable_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementContainer(1, 0)(2, 1)(3, 2);\n    } }, dependencies: [DataRowOutlet, HeaderRowOutlet, FooterRowOutlet], encapsulation: 2 });\n/** @nocollapse */\nCdkTable.ctorParameters = () => [\n    { type: IterableDiffers },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: String, decorators: [{ type: Attribute, args: ['role',] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\nCdkTable.propDecorators = {\n    trackBy: [{ type: Input }],\n    dataSource: [{ type: Input }],\n    multiTemplateDataRows: [{ type: Input }],\n    _rowOutlet: [{ type: ViewChild, args: [DataRowOutlet, { static: true },] }],\n    _headerRowOutlet: [{ type: ViewChild, args: [HeaderRowOutlet, { static: true },] }],\n    _footerRowOutlet: [{ type: ViewChild, args: [FooterRowOutlet, { static: true },] }],\n    _contentColumnDefs: [{ type: ContentChildren, args: [CdkColumnDef,] }],\n    _contentRowDefs: [{ type: ContentChildren, args: [CdkRowDef,] }],\n    _contentHeaderRowDefs: [{ type: ContentChildren, args: [CdkHeaderRowDef,] }],\n    _contentFooterRowDefs: [{ type: ContentChildren, args: [CdkFooterRowDef,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTable, [{\n        type: Component,\n        args: [{ selector: 'cdk-table, table[cdk-table]',\n                exportAs: 'cdkTable',\n                template: CDK_TABLE_TEMPLATE,\n                host: {\n                    'class': 'cdk-table'\n                },\n                encapsulation: ViewEncapsulation.None,\n                // The \"OnPush\" status for the `MatTable` component is effectively a noop, so we are removing it.\n                // The view for `MatTable` consists entirely of templates declared in other views. As they are\n                // declared elsewhere, they are checked when their declaration points are checked.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default\n            }]\n    }], function () { return [{ type: ɵngcc0.IterableDiffers }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['role']\n            }] }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, { trackBy: [{\n            type: Input\n        }], dataSource: [{\n            type: Input\n        }], multiTemplateDataRows: [{\n            type: Input\n        }], _rowOutlet: [{\n            type: ViewChild,\n            args: [DataRowOutlet, { static: true }]\n        }], _headerRowOutlet: [{\n            type: ViewChild,\n            args: [HeaderRowOutlet, { static: true }]\n        }], _footerRowOutlet: [{\n            type: ViewChild,\n            args: [FooterRowOutlet, { static: true }]\n        }], _contentColumnDefs: [{\n            type: ContentChildren,\n            args: [CdkColumnDef]\n        }], _contentRowDefs: [{\n            type: ContentChildren,\n            args: [CdkRowDef]\n        }], _contentHeaderRowDefs: [{\n            type: ContentChildren,\n            args: [CdkHeaderRowDef]\n        }], _contentFooterRowDefs: [{\n            type: ContentChildren,\n            args: [CdkFooterRowDef]\n        }] }); })();\n/**\n * Utility function that gets a merged list of the entries in a QueryList and values of a Set.\n * @template T\n * @param {?} queryList\n * @param {?} set\n * @return {?}\n */\nfunction mergeQueryListAndSet(queryList, set) {\n    return queryList.toArray().concat(Array.from(set));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to specify the text column options.\n * @type {?}\n */\nconst TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n * @template T\n */\nclass CdkTextColumn {\n    /**\n     * @param {?} _table\n     * @param {?} _options\n     */\n    constructor(_table, _options) {\n        this._table = _table;\n        this._options = _options;\n        /**\n         * Alignment of the cell values.\n         */\n        this.justify = 'start';\n        this._options = _options || {};\n    }\n    /**\n     * Column name that should be used to reference this column.\n     * @return {?}\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    set name(name) {\n        this._name = name;\n        // With Ivy, inputs can be initialized before static query results are\n        // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n        this._syncColumnDefName();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._syncColumnDefName();\n        if (this.headerText === undefined) {\n            this.headerText = this._createDefaultHeaderText();\n        }\n        if (!this.dataAccessor) {\n            this.dataAccessor =\n                this._options.defaultDataAccessor || ((/**\n                 * @param {?} data\n                 * @param {?} name\n                 * @return {?}\n                 */\n                (data, name) => ((/** @type {?} */ (data)))[name]));\n        }\n        if (this._table) {\n            // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n            // since the columnDef will not pick up its content by the time the table finishes checking\n            // its content and initializing the rows.\n            this.columnDef.cell = this.cell;\n            this.columnDef.headerCell = this.headerCell;\n            this._table.addColumnDef(this.columnDef);\n        }\n        else {\n            throw getTableTextColumnMissingParentTableError();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._table) {\n            this._table.removeColumnDef(this.columnDef);\n        }\n    }\n    /**\n     * Creates a default header text. Use the options' header text transformation function if one\n     * has been provided. Otherwise simply capitalize the column name.\n     * @return {?}\n     */\n    _createDefaultHeaderText() {\n        /** @type {?} */\n        const name = this.name;\n        if (isDevMode() && !name) {\n            throw getTableTextColumnMissingNameError();\n        }\n        if (this._options && this._options.defaultHeaderTextTransform) {\n            return this._options.defaultHeaderTextTransform(name);\n        }\n        return name[0].toUpperCase() + name.slice(1);\n    }\n    /**\n     * Synchronizes the column definition name with the text column name.\n     * @private\n     * @return {?}\n     */\n    _syncColumnDefName() {\n        if (this.columnDef) {\n            this.columnDef.name = this.name;\n        }\n    }\n}\nCdkTextColumn.ɵfac = function CdkTextColumn_Factory(t) { return new (t || CdkTextColumn)(ɵngcc0.ɵɵdirectiveInject(CdkTable, 8), ɵngcc0.ɵɵdirectiveInject(TEXT_COLUMN_OPTIONS, 8)); };\nCdkTextColumn.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkTextColumn, selectors: [[\"cdk-text-column\"]], viewQuery: function CdkTextColumn_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkColumnDef, 7);\n        ɵngcc0.ɵɵviewQuery(CdkCellDef, 7);\n        ɵngcc0.ɵɵviewQuery(CdkHeaderCellDef, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columnDef = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n    } }, inputs: { justify: \"justify\", name: \"name\", headerText: \"headerText\", dataAccessor: \"dataAccessor\" }, decls: 3, vars: 0, consts: [[\"cdkColumnDef\", \"\"], [\"cdk-header-cell\", \"\", 3, \"text-align\", 4, \"cdkHeaderCellDef\"], [\"cdk-cell\", \"\", 3, \"text-align\", 4, \"cdkCellDef\"], [\"cdk-header-cell\", \"\"], [\"cdk-cell\", \"\"]], template: function CdkTextColumn_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainerStart(0, 0);\n        ɵngcc0.ɵɵtemplate(1, CdkTextColumn_th_1_Template, 2, 3, \"th\", 1);\n        ɵngcc0.ɵɵtemplate(2, CdkTextColumn_td_2_Template, 2, 3, \"td\", 2);\n        ɵngcc0.ɵɵelementContainerEnd();\n    } }, dependencies: [CdkCellDef, CdkHeaderCellDef, CdkColumnDef, CdkCell, CdkHeaderCell], encapsulation: 2 });\n/** @nocollapse */\nCdkTextColumn.ctorParameters = () => [\n    { type: CdkTable, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TEXT_COLUMN_OPTIONS,] }] }\n];\nCdkTextColumn.propDecorators = {\n    name: [{ type: Input }],\n    headerText: [{ type: Input }],\n    dataAccessor: [{ type: Input }],\n    justify: [{ type: Input }],\n    columnDef: [{ type: ViewChild, args: [CdkColumnDef, { static: true },] }],\n    cell: [{ type: ViewChild, args: [CdkCellDef, { static: true },] }],\n    headerCell: [{ type: ViewChild, args: [CdkHeaderCellDef, { static: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTextColumn, [{\n        type: Component,\n        args: [{ selector: 'cdk-text-column',\n                template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                encapsulation: ViewEncapsulation.None,\n                // Change detection is intentionally not set to OnPush. This component's template will be provided\n                // to the table to be inserted into its view. This is problematic when change detection runs since\n                // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                // mean's the template in the table's view will not have the updated value (and in fact will cause\n                // an ExpressionChangedAfterItHasBeenCheckedError).\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default\n            }]\n    }], function () { return [{ type: CdkTable, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [TEXT_COLUMN_OPTIONS]\n            }] }]; }, { justify: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], headerText: [{\n            type: Input\n        }], dataAccessor: [{\n            type: Input\n        }], columnDef: [{\n            type: ViewChild,\n            args: [CdkColumnDef, { static: true }]\n        }], cell: [{\n            type: ViewChild,\n            args: [CdkCellDef, { static: true }]\n        }], headerCell: [{\n            type: ViewChild,\n            args: [CdkHeaderCellDef, { static: true }]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EXPORTED_DECLARATIONS = [\n    CdkTable,\n    CdkRowDef,\n    CdkCellDef,\n    CdkCellOutlet,\n    CdkHeaderCellDef,\n    CdkFooterCellDef,\n    CdkColumnDef,\n    CdkCell,\n    CdkRow,\n    CdkHeaderCell,\n    CdkFooterCell,\n    CdkHeaderRow,\n    CdkHeaderRowDef,\n    CdkFooterRow,\n    CdkFooterRowDef,\n    DataRowOutlet,\n    HeaderRowOutlet,\n    FooterRowOutlet,\n    CdkTextColumn,\n];\nclass CdkTableModule {\n}\nCdkTableModule.ɵfac = function CdkTableModule_Factory(t) { return new (t || CdkTableModule)(); };\nCdkTableModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CdkTableModule });\nCdkTableModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [CommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTableModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule],\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTableModule, { declarations: function () { return [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn]; }, imports: function () { return [CommonModule]; }, exports: function () { return [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CDK_TABLE_TEMPLATE, CdkTable, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, BaseCdkCell, CdkHeaderCell, CdkFooterCell, CdkCell, CDK_ROW_TEMPLATE, BaseRowDef, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkCellOutlet, CdkHeaderRow, CdkFooterRow, CdkRow, CdkTableModule, STICKY_DIRECTIONS, StickyStyler, mixinHasStickyInput, TEXT_COLUMN_OPTIONS, CdkTextColumn };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}