{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Input, Output, ViewChild, ViewEncapsulation, NgZone, Optional, Inject, Directive, NgModule } from '@angular/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, CheckboxRequiredValidator, NG_VALIDATORS } from '@angular/forms';\nimport { mixinColor, mixinDisabled, mixinDisableRipple, mixinTabIndex, GestureConfig, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token to be used to override the default options for `mat-slide-toggle`.\n * @type {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/material/core';\nimport * as ɵngcc4 from '@angular/cdk/observers';\nconst _c0 = [\"thumbContainer\"];\nconst _c1 = [\"toggleBar\"];\nconst _c2 = [\"input\"];\nconst _c3 = function () {\n  return {\n    enterDuration: 150\n  };\n};\nconst _c4 = [\"*\"];\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n  providedIn: 'root',\n  factory:\n  /**\n  * @return {?}\n  */\n  () => ({\n    disableToggleValue: false,\n    disableDragValue: false\n  })\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Increasing integer for generating unique ids for slide-toggle components.\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(\n  /**\n  * @return {?}\n  */\n  () => MatSlideToggle),\n  multi: true\n};\n/**\n * Change event object emitted by a MatSlideToggle.\n */\nclass MatSlideToggleChange {\n  /**\n   * @param {?} source\n   * @param {?} checked\n   */\n  constructor(source, checked) {\n    this.source = source;\n    this.checked = checked;\n  }\n}\n// Boilerplate for applying mixins to MatSlideToggle.\n/**\n * \\@docs-private\n */\nclass MatSlideToggleBase {\n  /**\n   * @param {?} _elementRef\n   */\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n}\n/** @type {?} */\nconst _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n/**\n * Represents a slidable \"switch\" toggle that can be moved between on and off.\n */\nclass MatSlideToggle extends _MatSlideToggleMixinBase {\n  /**\n   * @param {?} elementRef\n   * @param {?} _focusMonitor\n   * @param {?} _changeDetectorRef\n   * @param {?} tabIndex\n   * @param {?} _ngZone\n   * @param {?} defaults\n   * @param {?=} _animationMode\n   * @param {?=} _dir\n   */\n  constructor(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, _ngZone, defaults, _animationMode, _dir) {\n    super(elementRef);\n    this._focusMonitor = _focusMonitor;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._ngZone = _ngZone;\n    this.defaults = defaults;\n    this._animationMode = _animationMode;\n    this._dir = _dir;\n    this._onChange =\n    /**\n    * @param {?} _\n    * @return {?}\n    */\n    _ => {};\n    this._onTouched =\n    /**\n    * @return {?}\n    */\n    () => {};\n    this._uniqueId = `mat-slide-toggle-${++nextUniqueId}`;\n    this._required = false;\n    this._checked = false;\n    /**\n     * Whether the thumb is currently being dragged.\n     */\n    this._dragging = false;\n    /**\n     * Name value will be applied to the input element if present.\n     */\n    this.name = null;\n    /**\n     * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n     */\n    this.id = this._uniqueId;\n    /**\n     * Whether the label should appear after or before the slide-toggle. Defaults to 'after'.\n     */\n    this.labelPosition = 'after';\n    /**\n     * Used to set the aria-label attribute on the underlying input element.\n     */\n    this.ariaLabel = null;\n    /**\n     * Used to set the aria-labelledby attribute on the underlying input element.\n     */\n    this.ariaLabelledby = null;\n    /**\n     * An event will be dispatched each time the slide-toggle changes its value.\n     */\n    this.change = new EventEmitter();\n    /**\n     * An event will be dispatched each time the slide-toggle input is toggled.\n     * This event is always emitted when the user toggles the slide toggle, but this does not mean\n     * the slide toggle's value has changed. The event does not fire when the user drags to change\n     * the slide toggle value.\n     */\n    this.toggleChange = new EventEmitter();\n    /**\n     * An event will be dispatched each time the slide-toggle is dragged.\n     * This event is always emitted when the user drags the slide toggle to make a change greater\n     * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n     * the user toggles the slide toggle to change its value.\n     */\n    this.dragChange = new EventEmitter();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n  /**\n   * Whether the slide-toggle is required.\n   * @return {?}\n   */\n  get required() {\n    return this._required;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the slide-toggle element is checked or not.\n   * @return {?}\n   */\n  get checked() {\n    return this._checked;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Returns the unique id for the visual hidden input.\n   * @return {?}\n   */\n  get inputId() {\n    return `${this.id || this._uniqueId}-input`;\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    this._focusMonitor.monitor(this._elementRef, true).subscribe(\n    /**\n    * @param {?} focusOrigin\n    * @return {?}\n    */\n    focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state\n        // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n        // error. See https://github.com/angular/angular/issues/17793. To work around this,\n        // we defer telling the form control it has been touched until the next tick.\n        Promise.resolve().then(\n        /**\n        * @return {?}\n        */\n        () => this._onTouched());\n      }\n    });\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n  /**\n   * Method being called whenever the underlying input emits a change event.\n   * @param {?} event\n   * @return {?}\n   */\n  _onChangeEvent(event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n  /**\n   * Method being called whenever the slide-toggle has been clicked.\n   * @param {?} event\n   * @return {?}\n   */\n  _onInputClick(event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @param {?} value\n   * @return {?}\n   */\n  writeValue(value) {\n    this.checked = !!value;\n  }\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  /**\n   * Implemented as a part of ControlValueAccessor.\n   * @param {?} isDisabled\n   * @return {?}\n   */\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Focuses the slide-toggle.\n   * @param {?=} options\n   * @return {?}\n   */\n  focus(options) {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n  }\n  /**\n   * Toggles the checked state of the slide-toggle.\n   * @return {?}\n   */\n  toggle() {\n    this.checked = !this.checked;\n    this._onChange(this.checked);\n  }\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   * @private\n   * @return {?}\n   */\n  _emitChangeEvent() {\n    this._onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n  /**\n   * Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100.\n   * @private\n   * @param {?} distance\n   * @return {?}\n   */\n  _getDragPercentage(distance) {\n    /** @type {?} */\n    let percentage = distance / this._thumbBarWidth * 100;\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n    return Math.max(0, Math.min(percentage, 100));\n  }\n  /**\n   * @return {?}\n   */\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      /** @type {?} */\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  _onDrag(event) {\n    if (this._dragging) {\n      /** @type {?} */\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      /** @type {?} */\n      const dragX = this._dragPercentage / 100 * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n  /**\n   * @return {?}\n   */\n  _onDragEnd() {\n    if (this._dragging) {\n      /** @type {?} */\n      const newCheckedValue = this._dragPercentage > 50;\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      () => setTimeout(\n      /**\n      * @return {?}\n      */\n      () => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n  /**\n   * Method being called whenever the label text changes.\n   * @return {?}\n   */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and its children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\nMatSlideToggle.ɵfac = function MatSlideToggle_Factory(t) {\n  return new (t || MatSlideToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8));\n};\nMatSlideToggle.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatSlideToggle,\n  selectors: [[\"mat-slide-toggle\"]],\n  viewQuery: function MatSlideToggle_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 5);\n      ɵngcc0.ɵɵviewQuery(_c1, 5);\n      ɵngcc0.ɵɵviewQuery(_c2, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbEl = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbBarEl = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-slide-toggle\"],\n  hostVars: 12,\n  hostBindings: function MatSlideToggle_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"focus\", function MatSlideToggle_focus_HostBindingHandler() {\n        return ctx._inputElement.nativeElement.focus();\n      });\n    }\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n      ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : -1)(\"aria-label\", null)(\"aria-labelledby\", null);\n      ɵngcc0.ɵɵclassProp(\"mat-checked\", ctx.checked)(\"mat-disabled\", ctx.disabled)(\"mat-slide-toggle-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    disableRipple: \"disableRipple\",\n    color: \"color\",\n    tabIndex: \"tabIndex\",\n    name: \"name\",\n    id: \"id\",\n    labelPosition: \"labelPosition\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    required: \"required\",\n    checked: \"checked\"\n  },\n  outputs: {\n    change: \"change\",\n    toggleChange: \"toggleChange\",\n    dragChange: \"dragChange\"\n  },\n  exportAs: [\"matSlideToggle\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c4,\n  decls: 16,\n  vars: 18,\n  consts: [[1, \"mat-slide-toggle-label\"], [\"label\", \"\"], [1, \"mat-slide-toggle-bar\"], [\"toggleBar\", \"\"], [\"type\", \"checkbox\", \"role\", \"switch\", 1, \"mat-slide-toggle-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"tabIndex\", \"checked\", \"disabled\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-slide-toggle-thumb-container\", 3, \"slidestart\", \"slide\", \"slideend\"], [\"thumbContainer\", \"\"], [1, \"mat-slide-toggle-thumb\"], [\"mat-ripple\", \"\", 1, \"mat-slide-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-slide-toggle-persistent-ripple\"], [1, \"mat-slide-toggle-content\", 3, \"cdkObserveContent\"], [\"labelContent\", \"\"], [2, \"display\", \"none\"]],\n  template: function MatSlideToggle_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1)(2, \"div\", 2, 3)(4, \"input\", 4, 5);\n      ɵngcc0.ɵɵlistener(\"change\", function MatSlideToggle_Template_input_change_4_listener($event) {\n        return ctx._onChangeEvent($event);\n      })(\"click\", function MatSlideToggle_Template_input_click_4_listener($event) {\n        return ctx._onInputClick($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(6, \"div\", 6, 7);\n      ɵngcc0.ɵɵlistener(\"slidestart\", function MatSlideToggle_Template_div_slidestart_6_listener() {\n        return ctx._onDragStart();\n      })(\"slide\", function MatSlideToggle_Template_div_slide_6_listener($event) {\n        return ctx._onDrag($event);\n      })(\"slideend\", function MatSlideToggle_Template_div_slideend_6_listener() {\n        return ctx._onDragEnd();\n      });\n      ɵngcc0.ɵɵelement(8, \"div\", 8);\n      ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n      ɵngcc0.ɵɵelement(10, \"div\", 10);\n      ɵngcc0.ɵɵelementEnd()()();\n      ɵngcc0.ɵɵelementStart(11, \"span\", 11, 12);\n      ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatSlideToggle_Template_span_cdkObserveContent_11_listener() {\n        return ctx._onLabelTextChange();\n      });\n      ɵngcc0.ɵɵelementStart(13, \"span\", 13);\n      ɵngcc0.ɵɵtext(14, \"\\u00A0\");\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵprojection(15);\n      ɵngcc0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      const _r0 = ɵngcc0.ɵɵreference(1);\n      const _r4 = ɵngcc0.ɵɵreference(12);\n      ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵclassProp(\"mat-slide-toggle-bar-no-side-margin\", !_r4.textContent || !_r4.textContent.trim());\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"tabIndex\", ctx.tabIndex)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n      ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"aria-checked\", ctx.checked.toString())(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n      ɵngcc0.ɵɵadvance(5);\n      ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(17, _c3));\n    }\n  },\n  dependencies: [ɵngcc3.MatRipple, ɵngcc4.CdkObserveContent],\n  styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px,0,0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px,0,0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}.mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-right:8px;margin-left:0}.mat-slide-toggle-label-before .mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0,0,0);transition:all 80ms linear;transition-property:transform;cursor:-webkit-grab;cursor:grab}.mat-slide-toggle-thumb-container.mat-dragging{transition-duration:0s}.mat-slide-toggle-thumb-container:active{cursor:-webkit-grabbing;cursor:grabbing}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media (hover:none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}@media (-ms-high-contrast:active){.mat-slide-toggle-thumb{background:#fff;border:1px solid #000}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb{background:#000;border:1px solid #fff}.mat-slide-toggle-bar{background:#fff}.mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:1px dotted;outline-offset:5px}}@media (-ms-high-contrast:black-on-white){.mat-slide-toggle-bar{border:1px solid #000}}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\nMatSlideToggle.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: FocusMonitor\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}];\nMatSlideToggle.propDecorators = {\n  _thumbEl: [{\n    type: ViewChild,\n    args: ['thumbContainer', {\n      static: false\n    }]\n  }],\n  _thumbBarEl: [{\n    type: ViewChild,\n    args: ['toggleBar', {\n      static: false\n    }]\n  }],\n  name: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  labelPosition: [{\n    type: Input\n  }],\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  required: [{\n    type: Input\n  }],\n  checked: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }],\n  toggleChange: [{\n    type: Output\n  }],\n  dragChange: [{\n    type: Output\n  }],\n  _inputElement: [{\n    type: ViewChild,\n    args: ['input', {\n      static: false\n    }]\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggle, [{\n    type: Component,\n    args: [{\n      selector: 'mat-slide-toggle',\n      exportAs: 'matSlideToggle',\n      host: {\n        'class': 'mat-slide-toggle',\n        '[id]': 'id',\n        // Needs to be `-1` so it can still receive programmatic focus.\n        '[attr.tabindex]': 'disabled ? null : -1',\n        '[attr.aria-label]': 'null',\n        '[attr.aria-labelledby]': 'null',\n        '[class.mat-checked]': 'checked',\n        '[class.mat-disabled]': 'disabled',\n        '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n        '(focus)': '_inputElement.nativeElement.focus()'\n      },\n      template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label><div #toggleBar class=\\\"mat-slide-toggle-bar\\\" [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\"><input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\" role=\\\"switch\\\" [id]=\\\"inputId\\\" [required]=\\\"required\\\" [tabIndex]=\\\"tabIndex\\\" [checked]=\\\"checked\\\" [disabled]=\\\"disabled\\\" [attr.name]=\\\"name\\\" [attr.aria-checked]=\\\"checked.toString()\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" (change)=\\\"_onChangeEvent($event)\\\" (click)=\\\"_onInputClick($event)\\\"><div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer (slidestart)=\\\"_onDragStart()\\\" (slide)=\\\"_onDrag($event)\\\" (slideend)=\\\"_onDragEnd()\\\"><div class=\\\"mat-slide-toggle-thumb\\\"></div><div class=\\\"mat-slide-toggle-ripple\\\" mat-ripple [matRippleTrigger]=\\\"label\\\" [matRippleDisabled]=\\\"disableRipple || disabled\\\" [matRippleCentered]=\\\"true\\\" [matRippleRadius]=\\\"20\\\" [matRippleAnimation]=\\\"{enterDuration: 150}\\\"><div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div></div></div></div><span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\"><span style=\\\"display:none\\\">&nbsp;</span><ng-content></ng-content></span></label>\",\n      providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n      inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px,0,0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px,0,0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}.mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-right:8px;margin-left:0}.mat-slide-toggle-label-before .mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0,0,0);transition:all 80ms linear;transition-property:transform;cursor:-webkit-grab;cursor:grab}.mat-slide-toggle-thumb-container.mat-dragging{transition-duration:0s}.mat-slide-toggle-thumb-container:active{cursor:-webkit-grabbing;cursor:grabbing}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media (hover:none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}@media (-ms-high-contrast:active){.mat-slide-toggle-thumb{background:#fff;border:1px solid #000}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb{background:#000;border:1px solid #fff}.mat-slide-toggle-bar{background:#fff}.mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:1px dotted;outline-offset:5px}}@media (-ms-high-contrast:black-on-white){.mat-slide-toggle-bar{border:1px solid #000}}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.FocusMonitor\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: ɵngcc2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    name: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    labelPosition: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    change: [{\n      type: Output\n    }],\n    toggleChange: [{\n      type: Output\n    }],\n    dragChange: [{\n      type: Output\n    }],\n    required: [{\n      type: Input\n    }],\n    checked: [{\n      type: Input\n    }],\n    _thumbEl: [{\n      type: ViewChild,\n      args: ['thumbContainer', {\n        static: false\n      }]\n    }],\n    _thumbBarEl: [{\n      type: ViewChild,\n      args: ['toggleBar', {\n        static: false\n      }]\n    }],\n    _inputElement: [{\n      type: ViewChild,\n      args: ['input', {\n        static: false\n      }]\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(\n  /**\n  * @return {?}\n  */\n  () => MatSlideToggleRequiredValidator),\n  multi: true\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\nclass MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {}\nMatSlideToggleRequiredValidator.ɵfac = /*@__PURE__*/function () {\n  let ɵMatSlideToggleRequiredValidator_BaseFactory;\n  return function MatSlideToggleRequiredValidator_Factory(t) {\n    return (ɵMatSlideToggleRequiredValidator_BaseFactory || (ɵMatSlideToggleRequiredValidator_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSlideToggleRequiredValidator)))(t || MatSlideToggleRequiredValidator);\n  };\n}();\nMatSlideToggleRequiredValidator.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatSlideToggleRequiredValidator,\n  selectors: [[\"mat-slide-toggle\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"formControl\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"ngModel\", \"\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggleRequiredValidator, [{\n    type: Directive,\n    args: [{\n      selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n      providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]\n    }]\n  }], null, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This module is used by both original and MDC-based slide-toggle implementations.\n */\n// tslint:disable-next-line:class-name\nclass _MatSlideToggleRequiredValidatorModule {}\n_MatSlideToggleRequiredValidatorModule.ɵfac = function _MatSlideToggleRequiredValidatorModule_Factory(t) {\n  return new (t || _MatSlideToggleRequiredValidatorModule)();\n};\n_MatSlideToggleRequiredValidatorModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: _MatSlideToggleRequiredValidatorModule\n});\n_MatSlideToggleRequiredValidatorModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatSlideToggleRequiredValidatorModule, [{\n    type: NgModule,\n    args: [{\n      exports: [MatSlideToggleRequiredValidator],\n      declarations: [MatSlideToggleRequiredValidator]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatSlideToggleRequiredValidatorModule, {\n    declarations: [MatSlideToggleRequiredValidator],\n    exports: [MatSlideToggleRequiredValidator]\n  });\n})();\nclass MatSlideToggleModule {}\nMatSlideToggleModule.ɵfac = function MatSlideToggleModule_Factory(t) {\n  return new (t || MatSlideToggleModule)();\n};\nMatSlideToggleModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatSlideToggleModule\n});\nMatSlideToggleModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [{\n    provide: HAMMER_GESTURE_CONFIG,\n    useClass: GestureConfig\n  }],\n  imports: [_MatSlideToggleRequiredValidatorModule, MatRippleModule, MatCommonModule, ObserversModule, _MatSlideToggleRequiredValidatorModule, MatCommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggleModule, [{\n    type: NgModule,\n    args: [{\n      imports: [_MatSlideToggleRequiredValidatorModule, MatRippleModule, MatCommonModule, ObserversModule],\n      exports: [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule],\n      declarations: [MatSlideToggle],\n      providers: [{\n        provide: HAMMER_GESTURE_CONFIG,\n        useClass: GestureConfig\n      }]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSlideToggleModule, {\n    declarations: function () {\n      return [MatSlideToggle];\n    },\n    imports: function () {\n      return [_MatSlideToggleRequiredValidatorModule, MatRippleModule, MatCommonModule, ObserversModule];\n    },\n    exports: function () {\n      return [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule];\n    }\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { _MatSlideToggleRequiredValidatorModule, MatSlideToggleModule, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggleChange, MatSlideToggle, MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MatSlideToggleRequiredValidator };","map":{"version":3,"names":["InjectionToken","Attribute","ChangeDetectionStrategy","ChangeDetectorRef","Component","ElementRef","EventEmitter","forwardRef","Input","Output","ViewChild","ViewEncapsulation","NgZone","Optional","Inject","Directive","NgModule","FocusMonitor","Directionality","coerceBooleanProperty","NG_VALUE_ACCESSOR","CheckboxRequiredValidator","NG_VALIDATORS","mixinColor","mixinDisabled","mixinDisableRipple","mixinTabIndex","GestureConfig","MatCommonModule","MatRippleModule","ANIMATION_MODULE_TYPE","ObserversModule","HAMMER_GESTURE_CONFIG","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","_c0","_c1","_c2","_c3","enterDuration","_c4","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","providedIn","factory","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","provide","useExisting","MatSlideToggle","multi","MatSlideToggleChange","constructor","source","checked","MatSlideToggleBase","_elementRef","_MatSlideToggleMixinBase","elementRef","_focusMonitor","_changeDetectorRef","tabIndex","_ngZone","defaults","_animationMode","_dir","_onChange","_","_onTouched","_uniqueId","_required","_checked","_dragging","name","id","labelPosition","ariaLabel","ariaLabelledby","change","toggleChange","dragChange","parseInt","required","value","markForCheck","inputId","ngAfterContentInit","monitor","subscribe","focusOrigin","Promise","resolve","then","ngOnDestroy","stopMonitoring","_onChangeEvent","event","stopPropagation","emit","_inputElement","nativeElement","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","focus","options","focusVia","toggle","_getDragPercentage","distance","percentage","_thumbBarWidth","_previousChecked","Math","max","min","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","classList","add","_onDrag","direction","_dragPercentage","deltaX","dragX","style","transform","_onDragEnd","newCheckedValue","runOutsideAngular","setTimeout","remove","_onLabelTextChange","detectChanges","ɵfac","MatSlideToggle_Factory","t","ɵɵdirectiveInject","ɵɵinjectAttribute","ɵcmp","ɵɵdefineComponent","type","selectors","viewQuery","MatSlideToggle_Query","rf","ctx","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","hostAttrs","hostVars","hostBindings","MatSlideToggle_HostBindings","ɵɵlistener","MatSlideToggle_focus_HostBindingHandler","ɵɵhostProperty","ɵɵattribute","ɵɵclassProp","inputs","disableRipple","color","outputs","exportAs","features","ɵɵProvidersFeature","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","consts","template","MatSlideToggle_Template","ɵɵprojectionDef","ɵɵelementStart","MatSlideToggle_Template_input_change_4_listener","$event","MatSlideToggle_Template_input_click_4_listener","ɵɵelementEnd","MatSlideToggle_Template_div_slidestart_6_listener","MatSlideToggle_Template_div_slide_6_listener","MatSlideToggle_Template_div_slideend_6_listener","ɵɵelement","MatSlideToggle_Template_span_cdkObserveContent_11_listener","ɵɵtext","ɵɵprojection","_r0","ɵɵreference","_r4","ɵɵadvance","textContent","trim","ɵɵproperty","toString","ɵɵpureFunction0","dependencies","MatRipple","CdkObserveContent","styles","encapsulation","changeDetection","ctorParameters","String","decorators","args","undefined","propDecorators","static","ngDevMode","ɵsetClassMetadata","selector","host","providers","None","OnPush","MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR","MatSlideToggleRequiredValidator","ɵMatSlideToggleRequiredValidator_BaseFactory","MatSlideToggleRequiredValidator_Factory","ɵɵgetInheritedFactory","ɵdir","ɵɵdefineDirective","_MatSlideToggleRequiredValidatorModule","_MatSlideToggleRequiredValidatorModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","exports","declarations","ngJitMode","ɵɵsetNgModuleScope","MatSlideToggleModule","MatSlideToggleModule_Factory","useClass","imports"],"sources":["C:/Users/dalci/OneDrive/Masaüstü/dotnet-angular-web-explorer/ClientApp/node_modules/@angular/material/__ivy_ngcc__/esm2015/slide-toggle.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Input, Output, ViewChild, ViewEncapsulation, NgZone, Optional, Inject, Directive, NgModule } from '@angular/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, CheckboxRequiredValidator, NG_VALIDATORS } from '@angular/forms';\nimport { mixinColor, mixinDisabled, mixinDisableRipple, mixinTabIndex, GestureConfig, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token to be used to override the default options for `mat-slide-toggle`.\n * @type {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/material/core';\nimport * as ɵngcc4 from '@angular/cdk/observers';\n\nconst _c0 = [\"thumbContainer\"];\nconst _c1 = [\"toggleBar\"];\nconst _c2 = [\"input\"];\nconst _c3 = function () { return { enterDuration: 150 }; };\nconst _c4 = [\"*\"];\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: (/**\n     * @return {?}\n     */\n    () => ({ disableToggleValue: false, disableDragValue: false }))\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Increasing integer for generating unique ids for slide-toggle components.\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatSlideToggle)),\n    multi: true\n};\n/**\n * Change event object emitted by a MatSlideToggle.\n */\nclass MatSlideToggleChange {\n    /**\n     * @param {?} source\n     * @param {?} checked\n     */\n    constructor(source, checked) {\n        this.source = source;\n        this.checked = checked;\n    }\n}\n// Boilerplate for applying mixins to MatSlideToggle.\n/**\n * \\@docs-private\n */\nclass MatSlideToggleBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/** @type {?} */\nconst _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n/**\n * Represents a slidable \"switch\" toggle that can be moved between on and off.\n */\nclass MatSlideToggle extends _MatSlideToggleMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _focusMonitor\n     * @param {?} _changeDetectorRef\n     * @param {?} tabIndex\n     * @param {?} _ngZone\n     * @param {?} defaults\n     * @param {?=} _animationMode\n     * @param {?=} _dir\n     */\n    constructor(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, _ngZone, defaults, _animationMode, _dir) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this.defaults = defaults;\n        this._animationMode = _animationMode;\n        this._dir = _dir;\n        this._onChange = (/**\n         * @param {?} _\n         * @return {?}\n         */\n        (_) => { });\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        this._uniqueId = `mat-slide-toggle-${++nextUniqueId}`;\n        this._required = false;\n        this._checked = false;\n        /**\n         * Whether the thumb is currently being dragged.\n         */\n        this._dragging = false;\n        /**\n         * Name value will be applied to the input element if present.\n         */\n        this.name = null;\n        /**\n         * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n         */\n        this.id = this._uniqueId;\n        /**\n         * Whether the label should appear after or before the slide-toggle. Defaults to 'after'.\n         */\n        this.labelPosition = 'after';\n        /**\n         * Used to set the aria-label attribute on the underlying input element.\n         */\n        this.ariaLabel = null;\n        /**\n         * Used to set the aria-labelledby attribute on the underlying input element.\n         */\n        this.ariaLabelledby = null;\n        /**\n         * An event will be dispatched each time the slide-toggle changes its value.\n         */\n        this.change = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle input is toggled.\n         * This event is always emitted when the user toggles the slide toggle, but this does not mean\n         * the slide toggle's value has changed. The event does not fire when the user drags to change\n         * the slide toggle value.\n         */\n        this.toggleChange = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle is dragged.\n         * This event is always emitted when the user drags the slide toggle to make a change greater\n         * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n         * the user toggles the slide toggle to change its value.\n         */\n        this.dragChange = new EventEmitter();\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n    /**\n     * Whether the slide-toggle is required.\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /**\n     * Whether the slide-toggle element is checked or not.\n     * @return {?}\n     */\n    get checked() { return this._checked; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set checked(value) {\n        this._checked = coerceBooleanProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Returns the unique id for the visual hidden input.\n     * @return {?}\n     */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe((/**\n         * @param {?} focusOrigin\n         * @return {?}\n         */\n        focusOrigin => {\n            if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state\n                // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n                // error. See https://github.com/angular/angular/issues/17793. To work around this,\n                // we defer telling the form control it has been touched until the next tick.\n                Promise.resolve().then((/**\n                 * @return {?}\n                 */\n                () => this._onTouched()));\n            }\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Method being called whenever the underlying input emits a change event.\n     * @param {?} event\n     * @return {?}\n     */\n    _onChangeEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the component's `change` output.\n        event.stopPropagation();\n        if (!this._dragging) {\n            this.toggleChange.emit();\n        }\n        // Releasing the pointer over the `<label>` element while dragging triggers another\n        // click event on the `<label>` element. This means that the checked state of the underlying\n        // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n        // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n        // does not change, and the checked state of the underlying input needs to be changed back.\n        if (this._dragging || this.defaults.disableToggleValue) {\n            this._inputElement.nativeElement.checked = this.checked;\n            return;\n        }\n        // Sync the value from the underlying input element with the component instance.\n        this.checked = this._inputElement.nativeElement.checked;\n        // Emit our custom change event only if the underlying input emitted one. This ensures that\n        // there is no change event, when the checked state changes programmatically.\n        this._emitChangeEvent();\n    }\n    /**\n     * Method being called whenever the slide-toggle has been clicked.\n     * @param {?} event\n     * @return {?}\n     */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Focuses the slide-toggle.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n    }\n    /**\n     * Toggles the checked state of the slide-toggle.\n     * @return {?}\n     */\n    toggle() {\n        this.checked = !this.checked;\n        this._onChange(this.checked);\n    }\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     * @private\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        this._onChange(this.checked);\n        this.change.emit(new MatSlideToggleChange(this, this.checked));\n    }\n    /**\n     * Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100.\n     * @private\n     * @param {?} distance\n     * @return {?}\n     */\n    _getDragPercentage(distance) {\n        /** @type {?} */\n        let percentage = (distance / this._thumbBarWidth) * 100;\n        // When the toggle was initially checked, then we have to start the drag at the end.\n        if (this._previousChecked) {\n            percentage += 100;\n        }\n        return Math.max(0, Math.min(percentage, 100));\n    }\n    /**\n     * @return {?}\n     */\n    _onDragStart() {\n        if (!this.disabled && !this._dragging) {\n            /** @type {?} */\n            const thumbEl = this._thumbEl.nativeElement;\n            this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n            thumbEl.classList.add('mat-dragging');\n            this._previousChecked = this.checked;\n            this._dragging = true;\n        }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _onDrag(event) {\n        if (this._dragging) {\n            /** @type {?} */\n            const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n            this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n            // Calculate the moved distance based on the thumb bar width.\n            /** @type {?} */\n            const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n            this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _onDragEnd() {\n        if (this._dragging) {\n            /** @type {?} */\n            const newCheckedValue = this._dragPercentage > 50;\n            if (newCheckedValue !== this.checked) {\n                this.dragChange.emit();\n                if (!this.defaults.disableDragValue) {\n                    this.checked = newCheckedValue;\n                    this._emitChangeEvent();\n                }\n            }\n            // The drag should be stopped outside of the current event handler, otherwise the\n            // click event will be fired before it and will revert the drag change.\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => setTimeout((/**\n             * @return {?}\n             */\n            () => {\n                if (this._dragging) {\n                    this._dragging = false;\n                    this._thumbEl.nativeElement.classList.remove('mat-dragging');\n                    // Reset the transform because the component will take care\n                    // of the thumb position after drag.\n                    this._thumbEl.nativeElement.style.transform = '';\n                }\n            }))));\n        }\n    }\n    /**\n     * Method being called whenever the label text changes.\n     * @return {?}\n     */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n        // slide-toggle component will be only marked for check, but no actual change detection runs\n        // automatically. Instead of going back into the zone in order to trigger a change detection\n        // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n        // we only trigger an explicit change detection for the slide-toggle view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n}\nMatSlideToggle.ɵfac = function MatSlideToggle_Factory(t) { return new (t || MatSlideToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8)); };\nMatSlideToggle.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSlideToggle, selectors: [[\"mat-slide-toggle\"]], viewQuery: function MatSlideToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n        ɵngcc0.ɵɵviewQuery(_c1, 5);\n        ɵngcc0.ɵɵviewQuery(_c2, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbBarEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    } }, hostAttrs: [1, \"mat-slide-toggle\"], hostVars: 12, hostBindings: function MatSlideToggle_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatSlideToggle_focus_HostBindingHandler() { return ctx._inputElement.nativeElement.focus(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : -1)(\"aria-label\", null)(\"aria-labelledby\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-checked\", ctx.checked)(\"mat-disabled\", ctx.disabled)(\"mat-slide-toggle-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", name: \"name\", id: \"id\", labelPosition: \"labelPosition\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], required: \"required\", checked: \"checked\" }, outputs: { change: \"change\", toggleChange: \"toggleChange\", dragChange: \"dragChange\" }, exportAs: [\"matSlideToggle\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c4, decls: 16, vars: 18, consts: [[1, \"mat-slide-toggle-label\"], [\"label\", \"\"], [1, \"mat-slide-toggle-bar\"], [\"toggleBar\", \"\"], [\"type\", \"checkbox\", \"role\", \"switch\", 1, \"mat-slide-toggle-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"tabIndex\", \"checked\", \"disabled\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-slide-toggle-thumb-container\", 3, \"slidestart\", \"slide\", \"slideend\"], [\"thumbContainer\", \"\"], [1, \"mat-slide-toggle-thumb\"], [\"mat-ripple\", \"\", 1, \"mat-slide-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-slide-toggle-persistent-ripple\"], [1, \"mat-slide-toggle-content\", 3, \"cdkObserveContent\"], [\"labelContent\", \"\"], [2, \"display\", \"none\"]], template: function MatSlideToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1)(2, \"div\", 2, 3)(4, \"input\", 4, 5);\n        ɵngcc0.ɵɵlistener(\"change\", function MatSlideToggle_Template_input_change_4_listener($event) { return ctx._onChangeEvent($event); })(\"click\", function MatSlideToggle_Template_input_click_4_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 6, 7);\n        ɵngcc0.ɵɵlistener(\"slidestart\", function MatSlideToggle_Template_div_slidestart_6_listener() { return ctx._onDragStart(); })(\"slide\", function MatSlideToggle_Template_div_slide_6_listener($event) { return ctx._onDrag($event); })(\"slideend\", function MatSlideToggle_Template_div_slideend_6_listener() { return ctx._onDragEnd(); });\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n        ɵngcc0.ɵɵelement(10, \"div\", 10);\n        ɵngcc0.ɵɵelementEnd()()();\n        ɵngcc0.ɵɵelementStart(11, \"span\", 11, 12);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatSlideToggle_Template_span_cdkObserveContent_11_listener() { return ctx._onLabelTextChange(); });\n        ɵngcc0.ɵɵelementStart(13, \"span\", 13);\n        ɵngcc0.ɵɵtext(14, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(15);\n        ɵngcc0.ɵɵelementEnd()();\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        const _r4 = ɵngcc0.ɵɵreference(12);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-slide-toggle-bar-no-side-margin\", !_r4.textContent || !_r4.textContent.trim());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"tabIndex\", ctx.tabIndex)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"aria-checked\", ctx.checked.toString())(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(17, _c3));\n    } }, dependencies: [ɵngcc3.MatRipple, ɵngcc4.CdkObserveContent], styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px,0,0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px,0,0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}.mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-right:8px;margin-left:0}.mat-slide-toggle-label-before .mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0,0,0);transition:all 80ms linear;transition-property:transform;cursor:-webkit-grab;cursor:grab}.mat-slide-toggle-thumb-container.mat-dragging{transition-duration:0s}.mat-slide-toggle-thumb-container:active{cursor:-webkit-grabbing;cursor:grabbing}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media (hover:none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}@media (-ms-high-contrast:active){.mat-slide-toggle-thumb{background:#fff;border:1px solid #000}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb{background:#000;border:1px solid #fff}.mat-slide-toggle-bar{background:#fff}.mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:1px dotted;outline-offset:5px}}@media (-ms-high-contrast:black-on-white){.mat-slide-toggle-bar{border:1px solid #000}}\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatSlideToggle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nMatSlideToggle.propDecorators = {\n    _thumbEl: [{ type: ViewChild, args: ['thumbContainer', { static: false },] }],\n    _thumbBarEl: [{ type: ViewChild, args: ['toggleBar', { static: false },] }],\n    name: [{ type: Input }],\n    id: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    required: [{ type: Input }],\n    checked: [{ type: Input }],\n    change: [{ type: Output }],\n    toggleChange: [{ type: Output }],\n    dragChange: [{ type: Output }],\n    _inputElement: [{ type: ViewChild, args: ['input', { static: false },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggle, [{\n        type: Component,\n        args: [{ selector: 'mat-slide-toggle', exportAs: 'matSlideToggle', host: {\n                    'class': 'mat-slide-toggle',\n                    '[id]': 'id',\n                    // Needs to be `-1` so it can still receive programmatic focus.\n                    '[attr.tabindex]': 'disabled ? null : -1',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[class.mat-checked]': 'checked',\n                    '[class.mat-disabled]': 'disabled',\n                    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    '(focus)': '_inputElement.nativeElement.focus()'\n                }, template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label><div #toggleBar class=\\\"mat-slide-toggle-bar\\\" [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\"><input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\" role=\\\"switch\\\" [id]=\\\"inputId\\\" [required]=\\\"required\\\" [tabIndex]=\\\"tabIndex\\\" [checked]=\\\"checked\\\" [disabled]=\\\"disabled\\\" [attr.name]=\\\"name\\\" [attr.aria-checked]=\\\"checked.toString()\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" (change)=\\\"_onChangeEvent($event)\\\" (click)=\\\"_onInputClick($event)\\\"><div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer (slidestart)=\\\"_onDragStart()\\\" (slide)=\\\"_onDrag($event)\\\" (slideend)=\\\"_onDragEnd()\\\"><div class=\\\"mat-slide-toggle-thumb\\\"></div><div class=\\\"mat-slide-toggle-ripple\\\" mat-ripple [matRippleTrigger]=\\\"label\\\" [matRippleDisabled]=\\\"disableRipple || disabled\\\" [matRippleCentered]=\\\"true\\\" [matRippleRadius]=\\\"20\\\" [matRippleAnimation]=\\\"{enterDuration: 150}\\\"><div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div></div></div></div><span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\"><span style=\\\"display:none\\\">&nbsp;</span><ng-content></ng-content></span></label>\", providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR], inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px,0,0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px,0,0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}.mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-right:8px;margin-left:0}.mat-slide-toggle-label-before .mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0,0,0);transition:all 80ms linear;transition-property:transform;cursor:-webkit-grab;cursor:grab}.mat-slide-toggle-thumb-container.mat-dragging{transition-duration:0s}.mat-slide-toggle-thumb-container:active{cursor:-webkit-grabbing;cursor:grabbing}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media (hover:none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}@media (-ms-high-contrast:active){.mat-slide-toggle-thumb{background:#fff;border:1px solid #000}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb{background:#000;border:1px solid #fff}.mat-slide-toggle-bar{background:#fff}.mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:1px dotted;outline-offset:5px}}@media (-ms-high-contrast:black-on-white){.mat-slide-toggle-bar{border:1px solid #000}}\"] }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { name: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], toggleChange: [{\n            type: Output\n        }], dragChange: [{\n            type: Output\n        }], required: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], _thumbEl: [{\n            type: ViewChild,\n            args: ['thumbContainer', { static: false }]\n        }], _thumbBarEl: [{\n            type: ViewChild,\n            args: ['toggleBar', { static: false }]\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input', { static: false }]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatSlideToggleRequiredValidator)),\n    multi: true\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\nclass MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {\n}\nMatSlideToggleRequiredValidator.ɵfac = /*@__PURE__*/ function () { let ɵMatSlideToggleRequiredValidator_BaseFactory; return function MatSlideToggleRequiredValidator_Factory(t) { return (ɵMatSlideToggleRequiredValidator_BaseFactory || (ɵMatSlideToggleRequiredValidator_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSlideToggleRequiredValidator)))(t || MatSlideToggleRequiredValidator); }; }();\nMatSlideToggleRequiredValidator.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatSlideToggleRequiredValidator, selectors: [[\"mat-slide-toggle\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"formControl\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"ngModel\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggleRequiredValidator, [{\n        type: Directive,\n        args: [{\n                selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n                providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This module is used by both original and MDC-based slide-toggle implementations.\n */\n// tslint:disable-next-line:class-name\nclass _MatSlideToggleRequiredValidatorModule {\n}\n_MatSlideToggleRequiredValidatorModule.ɵfac = function _MatSlideToggleRequiredValidatorModule_Factory(t) { return new (t || _MatSlideToggleRequiredValidatorModule)(); };\n_MatSlideToggleRequiredValidatorModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: _MatSlideToggleRequiredValidatorModule });\n_MatSlideToggleRequiredValidatorModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatSlideToggleRequiredValidatorModule, [{\n        type: NgModule,\n        args: [{\n                exports: [MatSlideToggleRequiredValidator],\n                declarations: [MatSlideToggleRequiredValidator]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatSlideToggleRequiredValidatorModule, { declarations: [MatSlideToggleRequiredValidator], exports: [MatSlideToggleRequiredValidator] }); })();\nclass MatSlideToggleModule {\n}\nMatSlideToggleModule.ɵfac = function MatSlideToggleModule_Factory(t) { return new (t || MatSlideToggleModule)(); };\nMatSlideToggleModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatSlideToggleModule });\nMatSlideToggleModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        { provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig }\n    ], imports: [_MatSlideToggleRequiredValidatorModule,\n        MatRippleModule,\n        MatCommonModule,\n        ObserversModule, _MatSlideToggleRequiredValidatorModule, MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatRippleModule,\n                    MatCommonModule,\n                    ObserversModule,\n                ],\n                exports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatSlideToggle,\n                    MatCommonModule\n                ],\n                declarations: [MatSlideToggle],\n                providers: [\n                    { provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig }\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSlideToggleModule, { declarations: function () { return [MatSlideToggle]; }, imports: function () { return [_MatSlideToggleRequiredValidatorModule, MatRippleModule,\n        MatCommonModule,\n        ObserversModule]; }, exports: function () { return [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { _MatSlideToggleRequiredValidatorModule, MatSlideToggleModule, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggleChange, MatSlideToggle, MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MatSlideToggleRequiredValidator };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}