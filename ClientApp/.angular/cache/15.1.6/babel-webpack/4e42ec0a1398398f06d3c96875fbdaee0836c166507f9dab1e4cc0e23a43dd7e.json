{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, keyframes, state, style, transition, trigger } from '@angular/animations';\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { Platform } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, ElementRef, Inject, InjectionToken, Input, NgZone, Optional, ViewContainerRef, ViewEncapsulation, NgModule } from '@angular/core';\nimport { HAMMER_LOADER, HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\nimport { Subject } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\nimport { GestureConfig, MatCommonModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by MatTooltip.\n * \\@docs-private\n * @type {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/overlay';\nimport * as ɵngcc2 from '@angular/cdk/scrolling';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/a11y';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\nimport * as ɵngcc6 from '@angular/cdk/layout';\nimport * as ɵngcc7 from '@angular/common';\nconst matTooltipAnimations = {\n  /**\n   * Animation that transitions a tooltip in and out.\n   */\n  tooltipState: trigger('state', [state('initial, void, hidden', style({\n    opacity: 0,\n    transform: 'scale(0)'\n  })), state('visible', style({\n    transform: 'scale(1)'\n  })), transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([style({\n    opacity: 0,\n    transform: 'scale(0)',\n    offset: 0\n  }), style({\n    opacity: 0.5,\n    transform: 'scale(0.99)',\n    offset: 0.5\n  }), style({\n    opacity: 1,\n    transform: 'scale(1)',\n    offset: 1\n  })]))), transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({\n    opacity: 0\n  })))])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Time in ms to throttle repositioning after scroll events.\n * @type {?}\n */\nconst SCROLL_THROTTLE_MS = 20;\n/**\n * CSS class that will be attached to the overlay panel.\n * @type {?}\n */\nconst TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * \\@docs-private\n * @param {?} position\n * @return {?}\n */\nfunction getMatTooltipInvalidPositionError(position) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/**\n * Injection token that determines the scroll handling while a tooltip is visible.\n * @type {?}\n */\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n  return (\n    /**\n    * @return {?}\n    */\n    () => overlay.scrollStrategies.reposition({\n      scrollThrottle: SCROLL_THROTTLE_MS\n    })\n  );\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY\n};\n/**\n * Injection token to be used to override the default options for `matTooltip`.\n * @type {?}\n */\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n  providedIn: 'root',\n  factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500\n  };\n}\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nclass MatTooltip {\n  /**\n   * @param {?} _overlay\n   * @param {?} _elementRef\n   * @param {?} _scrollDispatcher\n   * @param {?} _viewContainerRef\n   * @param {?} _ngZone\n   * @param {?} platform\n   * @param {?} _ariaDescriber\n   * @param {?} _focusMonitor\n   * @param {?} scrollStrategy\n   * @param {?} _dir\n   * @param {?} _defaultOptions\n   * @param {?=} hammerLoader\n   */\n  constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, hammerLoader) {\n    this._overlay = _overlay;\n    this._elementRef = _elementRef;\n    this._scrollDispatcher = _scrollDispatcher;\n    this._viewContainerRef = _viewContainerRef;\n    this._ngZone = _ngZone;\n    this._ariaDescriber = _ariaDescriber;\n    this._focusMonitor = _focusMonitor;\n    this._dir = _dir;\n    this._defaultOptions = _defaultOptions;\n    this._position = 'below';\n    this._disabled = false;\n    /**\n     * The default delay in ms before showing the tooltip after show is called\n     */\n    this.showDelay = this._defaultOptions.showDelay;\n    /**\n     * The default delay in ms before hiding the tooltip after hide is called\n     */\n    this.hideDelay = this._defaultOptions.hideDelay;\n    this._message = '';\n    this._manualListeners = new Map();\n    /**\n     * Emits when the component is destroyed.\n     */\n    this._destroyed = new Subject();\n    this._scrollStrategy = scrollStrategy;\n    /** @type {?} */\n    const element = _elementRef.nativeElement;\n    /** @type {?} */\n    const hasGestures = typeof window === 'undefined' || /** @type {?} */window.Hammer || hammerLoader;\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners.set('mouseenter',\n      /**\n      * @return {?}\n      */\n      () => this.show()).set('mouseleave',\n      /**\n      * @return {?}\n      */\n      () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart',\n      /**\n      * @return {?}\n      */\n      () => this.show());\n    }\n    this._manualListeners.forEach(\n    /**\n    * @param {?} listener\n    * @param {?} event\n    * @return {?}\n    */\n    (listener, event) => element.addEventListener(event, listener));\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(\n    /**\n    * @param {?} origin\n    * @return {?}\n    */\n    origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(\n        /**\n        * @return {?}\n        */\n        () => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(\n        /**\n        * @return {?}\n        */\n        () => this.show());\n      }\n    });\n    if (_defaultOptions && _defaultOptions.position) {\n      this.position = _defaultOptions.position;\n    }\n  }\n  /**\n   * Allows the user to define the position of the tooltip relative to the parent element\n   * @return {?}\n   */\n  get position() {\n    return this._position;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set position(value) {\n    if (value !== this._position) {\n      this._position = value;\n      if (this._overlayRef) {\n        this._updatePosition();\n        if (this._tooltipInstance) {\n          /** @type {?} */this._tooltipInstance.show(0);\n        }\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n  /**\n   * Disables the display of the tooltip.\n   * @return {?}\n   */\n  get disabled() {\n    return this._disabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n  /**\n   * The message to be displayed in the tooltip\n   * @return {?}\n   */\n  get message() {\n    return this._message;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set message(value) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ngZone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      () => {\n        // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n        // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n        // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n        // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n        Promise.resolve().then(\n        /**\n        * @return {?}\n        */\n        () => {\n          this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n        });\n      });\n    }\n  }\n  /**\n   * Classes to be passed to the tooltip. Supports the same syntax as `ngClass`.\n   * @return {?}\n   */\n  get tooltipClass() {\n    return this._tooltipClass;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set tooltipClass(value) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n  /**\n   * Setup styling-specific things\n   * @return {?}\n   */\n  ngOnInit() {\n    /** @type {?} */\n    const element = this._elementRef.nativeElement;\n    /** @type {?} */\n    const elementStyle = /** @type {?} */element.style;\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n  }\n  /**\n   * Dispose the tooltip when destroyed.\n   * @return {?}\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach(\n    /**\n    * @param {?} listener\n    * @param {?} event\n    * @return {?}\n    */\n    (listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n  /**\n   * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input\n   * @param {?=} delay\n   * @return {?}\n   */\n  show(delay = this.showDelay) {\n    if (this.disabled || !this.message || this._isTooltipVisible() && ! /** @type {?} */this._tooltipInstance._showTimeoutId && ! /** @type {?} */this._tooltipInstance._hideTimeoutId) {\n      return;\n    }\n    /** @type {?} */\n    const overlayRef = this._createOverlay();\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden().pipe(takeUntil(this._destroyed)).subscribe(\n    /**\n    * @return {?}\n    */\n    () => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    /** @type {?} */this._tooltipInstance.show(delay);\n  }\n  /**\n   * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input\n   * @param {?=} delay\n   * @return {?}\n   */\n  hide(delay = this.hideDelay) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n  /**\n   * Shows/hides the tooltip\n   * @return {?}\n   */\n  toggle() {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n  /**\n   * Returns true if the tooltip is currently visible to the user\n   * @return {?}\n   */\n  _isTooltipVisible() {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n  /**\n   * Handles the keydown events on the host element.\n   * @param {?} e\n   * @return {?}\n   */\n  _handleKeydown(e) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE && !hasModifierKey(e)) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n  /**\n   * Handles the touchend events on the host element.\n   * @return {?}\n   */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n  /**\n   * Create the overlay config and position strategy\n   * @private\n   * @return {?}\n   */\n  _createOverlay() {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n    /** @type {?} */\n    const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n    // Create connected position strategy that listens for scroll events to reposition.\n    /** @type {?} */\n    const strategy = this._overlay.position().flexibleConnectedTo(this._elementRef).withTransformOriginOn('.mat-tooltip').withFlexibleDimensions(false).withViewportMargin(8).withScrollableContainers(scrollableAncestors);\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(\n    /**\n    * @param {?} change\n    * @return {?}\n    */\n    change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(\n          /**\n          * @return {?}\n          */\n          () => this.hide(0));\n        }\n      }\n    });\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n    this._updatePosition();\n    this._overlayRef.detachments().pipe(takeUntil(this._destroyed)).subscribe(\n    /**\n    * @return {?}\n    */\n    () => this._detach());\n    return this._overlayRef;\n  }\n  /**\n   * Detaches the currently-attached tooltip.\n   * @private\n   * @return {?}\n   */\n  _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n    this._tooltipInstance = null;\n  }\n  /**\n   * Updates the position of the current tooltip.\n   * @private\n   * @return {?}\n   */\n  _updatePosition() {\n    /** @type {?} */\n    const position = /** @type {?} */ /** @type {?} */this._overlayRef.getConfig().positionStrategy;\n    /** @type {?} */\n    const origin = this._getOrigin();\n    /** @type {?} */\n    const overlay = this._getOverlayPosition();\n    position.withPositions([Object.assign({}, origin.main, overlay.main), Object.assign({}, origin.fallback, overlay.fallback)]);\n  }\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   * @return {?}\n   */\n  _getOrigin() {\n    /** @type {?} */\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    /** @type {?} */\n    const position = this.position;\n    /** @type {?} */\n    let originPosition;\n    if (position == 'above' || position == 'below') {\n      originPosition = {\n        originX: 'center',\n        originY: position == 'above' ? 'top' : 'bottom'\n      };\n    } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n      originPosition = {\n        originX: 'start',\n        originY: 'center'\n      };\n    } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n      originPosition = {\n        originX: 'end',\n        originY: 'center'\n      };\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n    const {\n      x,\n      y\n    } = this._invertPosition(originPosition.originX, originPosition.originY);\n    return {\n      main: originPosition,\n      fallback: {\n        originX: x,\n        originY: y\n      }\n    };\n  }\n  /**\n   * Returns the overlay position and a fallback position based on the user's preference\n   * @return {?}\n   */\n  _getOverlayPosition() {\n    /** @type {?} */\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    /** @type {?} */\n    const position = this.position;\n    /** @type {?} */\n    let overlayPosition;\n    if (position == 'above') {\n      overlayPosition = {\n        overlayX: 'center',\n        overlayY: 'bottom'\n      };\n    } else if (position == 'below') {\n      overlayPosition = {\n        overlayX: 'center',\n        overlayY: 'top'\n      };\n    } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n      overlayPosition = {\n        overlayX: 'end',\n        overlayY: 'center'\n      };\n    } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n      overlayPosition = {\n        overlayX: 'start',\n        overlayY: 'center'\n      };\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n    const {\n      x,\n      y\n    } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n    return {\n      main: overlayPosition,\n      fallback: {\n        overlayX: x,\n        overlayY: y\n      }\n    };\n  }\n  /**\n   * Updates the tooltip message and repositions the overlay according to the new message length\n   * @private\n   * @return {?}\n   */\n  _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1), takeUntil(this._destroyed)).subscribe(\n      /**\n      * @return {?}\n      */\n      () => {\n        if (this._tooltipInstance) {\n          /** @type {?} */this._overlayRef.updatePosition();\n        }\n      });\n    }\n  }\n  /**\n   * Updates the tooltip class\n   * @private\n   * @param {?} tooltipClass\n   * @return {?}\n   */\n  _setTooltipClass(tooltipClass) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n  /**\n   * Inverts an overlay position.\n   * @private\n   * @param {?} x\n   * @param {?} y\n   * @return {?}\n   */\n  _invertPosition(x, y) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n    return {\n      x,\n      y\n    };\n  }\n}\nMatTooltip.ɵfac = function MatTooltip_Factory(t) {\n  return new (t || MatTooltip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(HAMMER_LOADER, 8));\n};\nMatTooltip.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatTooltip,\n  selectors: [[\"\", \"matTooltip\", \"\"]],\n  hostBindings: function MatTooltip_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"longpress\", function MatTooltip_longpress_HostBindingHandler() {\n        return ctx.show();\n      })(\"keydown\", function MatTooltip_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      })(\"touchend\", function MatTooltip_touchend_HostBindingHandler() {\n        return ctx._handleTouchend();\n      });\n    }\n  },\n  inputs: {\n    showDelay: [\"matTooltipShowDelay\", \"showDelay\"],\n    hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"],\n    position: [\"matTooltipPosition\", \"position\"],\n    disabled: [\"matTooltipDisabled\", \"disabled\"],\n    message: [\"matTooltip\", \"message\"],\n    tooltipClass: [\"matTooltipClass\", \"tooltipClass\"]\n  },\n  exportAs: [\"matTooltip\"]\n});\n/** @nocollapse */\nMatTooltip.ctorParameters = () => [{\n  type: Overlay\n}, {\n  type: ElementRef\n}, {\n  type: ScrollDispatcher\n}, {\n  type: ViewContainerRef\n}, {\n  type: NgZone\n}, {\n  type: Platform\n}, {\n  type: AriaDescriber\n}, {\n  type: FocusMonitor\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [HAMMER_LOADER]\n  }]\n}];\nMatTooltip.propDecorators = {\n  position: [{\n    type: Input,\n    args: ['matTooltipPosition']\n  }],\n  disabled: [{\n    type: Input,\n    args: ['matTooltipDisabled']\n  }],\n  showDelay: [{\n    type: Input,\n    args: ['matTooltipShowDelay']\n  }],\n  hideDelay: [{\n    type: Input,\n    args: ['matTooltipHideDelay']\n  }],\n  message: [{\n    type: Input,\n    args: ['matTooltip']\n  }],\n  tooltipClass: [{\n    type: Input,\n    args: ['matTooltipClass']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltip, [{\n    type: Directive,\n    args: [{\n      selector: '[matTooltip]',\n      exportAs: 'matTooltip',\n      host: {\n        '(longpress)': 'show()',\n        '(keydown)': '_handleKeydown($event)',\n        '(touchend)': '_handleTouchend()'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Overlay\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc2.ScrollDispatcher\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc3.Platform\n    }, {\n      type: ɵngcc4.AriaDescriber\n    }, {\n      type: ɵngcc4.FocusMonitor\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc5.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [HAMMER_LOADER]\n      }]\n    }];\n  }, {\n    showDelay: [{\n      type: Input,\n      args: ['matTooltipShowDelay']\n    }],\n    hideDelay: [{\n      type: Input,\n      args: ['matTooltipHideDelay']\n    }],\n    position: [{\n      type: Input,\n      args: ['matTooltipPosition']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['matTooltipDisabled']\n    }],\n    message: [{\n      type: Input,\n      args: ['matTooltip']\n    }],\n    tooltipClass: [{\n      type: Input,\n      args: ['matTooltipClass']\n    }]\n  });\n})();\n/**\n * Internal component that wraps the tooltip's content.\n * \\@docs-private\n */\nclass TooltipComponent {\n  /**\n   * @param {?} _changeDetectorRef\n   * @param {?} _breakpointObserver\n   */\n  constructor(_changeDetectorRef, _breakpointObserver) {\n    this._changeDetectorRef = _changeDetectorRef;\n    this._breakpointObserver = _breakpointObserver;\n    /**\n     * Property watched by the animation framework to show or hide the tooltip\n     */\n    this._visibility = 'initial';\n    /**\n     * Whether interactions on the page should close the tooltip\n     */\n    this._closeOnInteraction = false;\n    /**\n     * Subject for notifying that the tooltip has been hidden from the view\n     */\n    this._onHide = new Subject();\n    /**\n     * Stream that emits whether the user has a handset-sized display.\n     */\n    this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n  }\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param {?} delay Amount of milliseconds to the delay showing the tooltip.\n   * @return {?}\n   */\n  show(delay) {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(\n    /**\n    * @return {?}\n    */\n    () => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param {?} delay Amount of milliseconds to delay showing the tooltip.\n   * @return {?}\n   */\n  hide(delay) {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n    this._hideTimeoutId = setTimeout(\n    /**\n    * @return {?}\n    */\n    () => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n  /**\n   * Returns an observable that notifies when the tooltip has been hidden from view.\n   * @return {?}\n   */\n  afterHidden() {\n    return this._onHide.asObservable();\n  }\n  /**\n   * Whether the tooltip is being displayed.\n   * @return {?}\n   */\n  isVisible() {\n    return this._visibility === 'visible';\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n  /**\n   * @return {?}\n   */\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  _animationDone(event) {\n    /** @type {?} */\n    const toState = /** @type {?} */event.toState;\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   * @return {?}\n   */\n  _handleBodyInteraction() {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   * @return {?}\n   */\n  _markForCheck() {\n    this._changeDetectorRef.markForCheck();\n  }\n}\nTooltipComponent.ɵfac = function TooltipComponent_Factory(t) {\n  return new (t || TooltipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.BreakpointObserver));\n};\nTooltipComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: TooltipComponent,\n  selectors: [[\"mat-tooltip-component\"]],\n  hostAttrs: [\"aria-hidden\", \"true\"],\n  hostVars: 2,\n  hostBindings: function TooltipComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function TooltipComponent_click_HostBindingHandler() {\n        return ctx._handleBodyInteraction();\n      }, false, ɵngcc0.ɵɵresolveBody);\n    }\n    if (rf & 2) {\n      ɵngcc0.ɵɵstyleProp(\"zoom\", ctx._visibility === \"visible\" ? 1 : null);\n    }\n  },\n  decls: 3,\n  vars: 7,\n  consts: [[1, \"mat-tooltip\", 3, \"ngClass\"]],\n  template: function TooltipComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵlistener(\"@state.start\", function TooltipComponent_Template_div_animation_state_start_0_listener() {\n        return ctx._animationStart();\n      })(\"@state.done\", function TooltipComponent_Template_div_animation_state_done_0_listener($event) {\n        return ctx._animationDone($event);\n      });\n      ɵngcc0.ɵɵpipe(1, \"async\");\n      ɵngcc0.ɵɵtext(2);\n      ɵngcc0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      let tmp_0_0;\n      ɵngcc0.ɵɵclassProp(\"mat-tooltip-handset\", (tmp_0_0 = ɵngcc0.ɵɵpipeBind1(1, 5, ctx._isHandset)) == null ? null : tmp_0_0.matches);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ctx.tooltipClass)(\"@state\", ctx._visibility);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵtextInterpolate(ctx.message);\n    }\n  },\n  dependencies: [ɵngcc7.NgClass, ɵngcc7.AsyncPipe],\n  styles: [\".mat-tooltip-panel{pointer-events:none!important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}@media (-ms-high-contrast:active){.mat-tooltip{outline:solid 1px}}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\"],\n  encapsulation: 2,\n  data: {\n    animation: [matTooltipAnimations.tooltipState]\n  },\n  changeDetection: 0\n});\n/** @nocollapse */\nTooltipComponent.ctorParameters = () => [{\n  type: ChangeDetectorRef\n}, {\n  type: BreakpointObserver\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TooltipComponent, [{\n    type: Component,\n    args: [{\n      selector: 'mat-tooltip-component',\n      template: \"<div class=\\\"mat-tooltip\\\" [ngClass]=\\\"tooltipClass\\\" [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\" [@state]=\\\"_visibility\\\" (@state.start)=\\\"_animationStart()\\\" (@state.done)=\\\"_animationDone($event)\\\">{{message}}</div>\",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [matTooltipAnimations.tooltipState],\n      host: {\n        // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n        // won't be rendered if the animations are disabled or there is no web animations polyfill.\n        '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n        '(body:click)': 'this._handleBodyInteraction()',\n        'aria-hidden': 'true'\n      },\n      styles: [\".mat-tooltip-panel{pointer-events:none!important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}@media (-ms-high-contrast:active){.mat-tooltip{outline:solid 1px}}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc6.BreakpointObserver\n    }];\n  }, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatTooltipModule {}\nMatTooltipModule.ɵfac = function MatTooltipModule_Factory(t) {\n  return new (t || MatTooltipModule)();\n};\nMatTooltipModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatTooltipModule\n});\nMatTooltipModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, {\n    provide: HAMMER_GESTURE_CONFIG,\n    useClass: GestureConfig\n  }],\n  imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule, MatCommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltipModule, [{\n    type: NgModule,\n    args: [{\n      imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule],\n      exports: [MatTooltip, TooltipComponent, MatCommonModule],\n      declarations: [MatTooltip, TooltipComponent],\n      entryComponents: [TooltipComponent],\n      providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, {\n        provide: HAMMER_GESTURE_CONFIG,\n        useClass: GestureConfig\n      }]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTooltipModule, {\n    declarations: function () {\n      return [MatTooltip, TooltipComponent];\n    },\n    imports: function () {\n      return [A11yModule, CommonModule, OverlayModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatTooltip, TooltipComponent, MatCommonModule];\n    }\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatTooltipModule, getMatTooltipInvalidPositionError, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_TOOLTIP_DEFAULT_OPTIONS, MatTooltip, TooltipComponent, matTooltipAnimations };","map":{"version":3,"names":["animate","keyframes","state","style","transition","trigger","AriaDescriber","FocusMonitor","A11yModule","Directionality","coerceBooleanProperty","ESCAPE","hasModifierKey","BreakpointObserver","Breakpoints","Overlay","OverlayModule","Platform","ComponentPortal","ScrollDispatcher","ChangeDetectionStrategy","ChangeDetectorRef","Component","Directive","ElementRef","Inject","InjectionToken","Input","NgZone","Optional","ViewContainerRef","ViewEncapsulation","NgModule","HAMMER_LOADER","HAMMER_GESTURE_CONFIG","Subject","take","takeUntil","CommonModule","GestureConfig","MatCommonModule","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","ɵngcc6","ɵngcc7","matTooltipAnimations","tooltipState","opacity","transform","offset","SCROLL_THROTTLE_MS","TOOLTIP_PANEL_CLASS","getMatTooltipInvalidPositionError","position","Error","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","scrollThrottle","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","provide","deps","useFactory","MAT_TOOLTIP_DEFAULT_OPTIONS","providedIn","factory","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","showDelay","hideDelay","touchendHideDelay","MatTooltip","constructor","_overlay","_elementRef","_scrollDispatcher","_viewContainerRef","_ngZone","platform","_ariaDescriber","_focusMonitor","scrollStrategy","_dir","_defaultOptions","hammerLoader","_position","_disabled","_message","_manualListeners","Map","_destroyed","_scrollStrategy","element","nativeElement","hasGestures","window","Hammer","IOS","ANDROID","set","show","hide","forEach","listener","event","addEventListener","monitor","pipe","subscribe","origin","run","value","_overlayRef","_updatePosition","_tooltipInstance","updatePosition","disabled","message","removeDescription","trim","_isTooltipVisible","_updateTooltipMessage","runOutsideAngular","Promise","resolve","then","describe","tooltipClass","_tooltipClass","_setTooltipClass","ngOnInit","elementStyle","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","ngOnDestroy","dispose","removeEventListener","clear","next","complete","stopMonitoring","delay","_showTimeoutId","_hideTimeoutId","overlayRef","_createOverlay","_detach","_portal","TooltipComponent","attach","instance","afterHidden","toggle","isVisible","_handleKeydown","e","keyCode","preventDefault","stopPropagation","_handleTouchend","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","change","scrollableViewProperties","isOverlayClipped","create","direction","positionStrategy","panelClass","detachments","hasAttached","detach","getConfig","_getOrigin","_getOverlayPosition","withPositions","Object","assign","main","fallback","isLtr","originPosition","originX","originY","x","y","_invertPosition","overlayPosition","overlayX","overlayY","_markForCheck","onMicrotaskEmpty","asObservable","ɵfac","MatTooltip_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","hostBindings","MatTooltip_HostBindings","rf","ctx","ɵɵlistener","MatTooltip_longpress_HostBindingHandler","MatTooltip_keydown_HostBindingHandler","$event","MatTooltip_touchend_HostBindingHandler","inputs","exportAs","ctorParameters","undefined","decorators","args","propDecorators","ngDevMode","ɵsetClassMetadata","selector","host","_changeDetectorRef","_breakpointObserver","_visibility","_closeOnInteraction","_onHide","_isHandset","observe","Handset","clearTimeout","setTimeout","_animationStart","_animationDone","toState","_handleBodyInteraction","markForCheck","TooltipComponent_Factory","ɵcmp","ɵɵdefineComponent","hostAttrs","hostVars","TooltipComponent_HostBindings","TooltipComponent_click_HostBindingHandler","ɵɵresolveBody","ɵɵstyleProp","decls","vars","consts","template","TooltipComponent_Template","ɵɵelementStart","TooltipComponent_Template_div_animation_state_start_0_listener","TooltipComponent_Template_div_animation_state_done_0_listener","ɵɵpipe","ɵɵtext","ɵɵelementEnd","tmp_0_0","ɵɵclassProp","ɵɵpipeBind1","matches","ɵɵproperty","ɵɵadvance","ɵɵtextInterpolate","dependencies","NgClass","AsyncPipe","styles","encapsulation","data","animation","changeDetection","None","OnPush","animations","MatTooltipModule","MatTooltipModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","useClass","imports","exports","declarations","entryComponents","ngJitMode","ɵɵsetNgModuleScope"],"sources":["C:/Users/dalci/OneDrive/Masaüstü/dotnet-angular-web-explorer/ClientApp/node_modules/@angular/material/__ivy_ngcc__/esm2015/tooltip.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, keyframes, state, style, transition, trigger } from '@angular/animations';\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { Platform } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, ElementRef, Inject, InjectionToken, Input, NgZone, Optional, ViewContainerRef, ViewEncapsulation, NgModule } from '@angular/core';\nimport { HAMMER_LOADER, HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\nimport { Subject } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\nimport { GestureConfig, MatCommonModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by MatTooltip.\n * \\@docs-private\n * @type {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/overlay';\nimport * as ɵngcc2 from '@angular/cdk/scrolling';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/a11y';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\nimport * as ɵngcc6 from '@angular/cdk/layout';\nimport * as ɵngcc7 from '@angular/common';\nconst matTooltipAnimations = {\n    /**\n     * Animation that transitions a tooltip in and out.\n     */\n    tooltipState: trigger('state', [\n        state('initial, void, hidden', style({ opacity: 0, transform: 'scale(0)' })),\n        state('visible', style({ transform: 'scale(1)' })),\n        transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n            style({ opacity: 0, transform: 'scale(0)', offset: 0 }),\n            style({ opacity: 0.5, transform: 'scale(0.99)', offset: 0.5 }),\n            style({ opacity: 1, transform: 'scale(1)', offset: 1 })\n        ]))),\n        transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({ opacity: 0 }))),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Time in ms to throttle repositioning after scroll events.\n * @type {?}\n */\nconst SCROLL_THROTTLE_MS = 20;\n/**\n * CSS class that will be attached to the overlay panel.\n * @type {?}\n */\nconst TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * \\@docs-private\n * @param {?} position\n * @return {?}\n */\nfunction getMatTooltipInvalidPositionError(position) {\n    return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/**\n * Injection token that determines the scroll handling while a tooltip is visible.\n * @type {?}\n */\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS }));\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Injection token to be used to override the default options for `matTooltip`.\n * @type {?}\n */\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n    providedIn: 'root',\n    factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n    };\n}\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nclass MatTooltip {\n    /**\n     * @param {?} _overlay\n     * @param {?} _elementRef\n     * @param {?} _scrollDispatcher\n     * @param {?} _viewContainerRef\n     * @param {?} _ngZone\n     * @param {?} platform\n     * @param {?} _ariaDescriber\n     * @param {?} _focusMonitor\n     * @param {?} scrollStrategy\n     * @param {?} _dir\n     * @param {?} _defaultOptions\n     * @param {?=} hammerLoader\n     */\n    constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, hammerLoader) {\n        this._overlay = _overlay;\n        this._elementRef = _elementRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewContainerRef = _viewContainerRef;\n        this._ngZone = _ngZone;\n        this._ariaDescriber = _ariaDescriber;\n        this._focusMonitor = _focusMonitor;\n        this._dir = _dir;\n        this._defaultOptions = _defaultOptions;\n        this._position = 'below';\n        this._disabled = false;\n        /**\n         * The default delay in ms before showing the tooltip after show is called\n         */\n        this.showDelay = this._defaultOptions.showDelay;\n        /**\n         * The default delay in ms before hiding the tooltip after hide is called\n         */\n        this.hideDelay = this._defaultOptions.hideDelay;\n        this._message = '';\n        this._manualListeners = new Map();\n        /**\n         * Emits when the component is destroyed.\n         */\n        this._destroyed = new Subject();\n        this._scrollStrategy = scrollStrategy;\n        /** @type {?} */\n        const element = _elementRef.nativeElement;\n        /** @type {?} */\n        const hasGestures = typeof window === 'undefined' || ((/** @type {?} */ (window))).Hammer || hammerLoader;\n        // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n        // first tap from firing its click event or can cause the tooltip to open for clicks.\n        if (!platform.IOS && !platform.ANDROID) {\n            this._manualListeners\n                .set('mouseenter', (/**\n             * @return {?}\n             */\n            () => this.show()))\n                .set('mouseleave', (/**\n             * @return {?}\n             */\n            () => this.hide()));\n        }\n        else if (!hasGestures) {\n            // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n            // there's no way for the user to trigger the tooltip on a touch device.\n            this._manualListeners.set('touchstart', (/**\n             * @return {?}\n             */\n            () => this.show()));\n        }\n        this._manualListeners.forEach((/**\n         * @param {?} listener\n         * @param {?} event\n         * @return {?}\n         */\n        (listener, event) => element.addEventListener(event, listener)));\n        _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe((/**\n         * @param {?} origin\n         * @return {?}\n         */\n        origin => {\n            // Note that the focus monitor runs outside the Angular zone.\n            if (!origin) {\n                _ngZone.run((/**\n                 * @return {?}\n                 */\n                () => this.hide(0)));\n            }\n            else if (origin === 'keyboard') {\n                _ngZone.run((/**\n                 * @return {?}\n                 */\n                () => this.show()));\n            }\n        }));\n        if (_defaultOptions && _defaultOptions.position) {\n            this.position = _defaultOptions.position;\n        }\n    }\n    /**\n     * Allows the user to define the position of the tooltip relative to the parent element\n     * @return {?}\n     */\n    get position() { return this._position; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set position(value) {\n        if (value !== this._position) {\n            this._position = value;\n            if (this._overlayRef) {\n                this._updatePosition();\n                if (this._tooltipInstance) {\n                    (/** @type {?} */ (this._tooltipInstance)).show(0);\n                }\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    /**\n     * Disables the display of the tooltip.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // If tooltip is disabled, hide immediately.\n        if (this._disabled) {\n            this.hide(0);\n        }\n    }\n    /**\n     * The message to be displayed in the tooltip\n     * @return {?}\n     */\n    get message() { return this._message; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set message(value) {\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n        // If the message is not a string (e.g. number), convert it to a string and trim it.\n        this._message = value != null ? `${value}`.trim() : '';\n        if (!this._message && this._isTooltipVisible()) {\n            this.hide(0);\n        }\n        else {\n            this._updateTooltipMessage();\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n                // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n                // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n                // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n                Promise.resolve().then((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n                }));\n            }));\n        }\n    }\n    /**\n     * Classes to be passed to the tooltip. Supports the same syntax as `ngClass`.\n     * @return {?}\n     */\n    get tooltipClass() { return this._tooltipClass; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set tooltipClass(value) {\n        this._tooltipClass = value;\n        if (this._tooltipInstance) {\n            this._setTooltipClass(this._tooltipClass);\n        }\n    }\n    /**\n     * Setup styling-specific things\n     * @return {?}\n     */\n    ngOnInit() {\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        /** @type {?} */\n        const elementStyle = (/** @type {?} */ (element.style));\n        if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n            // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n            // will add some inline styles by default, including `user-select: none`. This is\n            // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n            // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n            // behavior for text fields, we always clear the `user-select` to avoid such issues.\n            elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n        }\n        // Hammer applies `-webkit-user-drag: none` on all elements by default,\n        // which breaks the native drag&drop. If the consumer explicitly made\n        // the element draggable, clear the `-webkit-user-drag`.\n        if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n            elementStyle.webkitUserDrag = '';\n        }\n    }\n    /**\n     * Dispose the tooltip when destroyed.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._tooltipInstance = null;\n        }\n        // Clean up the event listeners set in the constructor\n        this._manualListeners.forEach((/**\n         * @param {?} listener\n         * @param {?} event\n         * @return {?}\n         */\n        (listener, event) => {\n            this._elementRef.nativeElement.removeEventListener(event, listener);\n        }));\n        this._manualListeners.clear();\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input\n     * @param {?=} delay\n     * @return {?}\n     */\n    show(delay = this.showDelay) {\n        if (this.disabled || !this.message || (this._isTooltipVisible() &&\n            !(/** @type {?} */ (this._tooltipInstance))._showTimeoutId && !(/** @type {?} */ (this._tooltipInstance))._hideTimeoutId)) {\n            return;\n        }\n        /** @type {?} */\n        const overlayRef = this._createOverlay();\n        this._detach();\n        this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n        this._tooltipInstance = overlayRef.attach(this._portal).instance;\n        this._tooltipInstance.afterHidden()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => this._detach()));\n        this._setTooltipClass(this._tooltipClass);\n        this._updateTooltipMessage();\n        (/** @type {?} */ (this._tooltipInstance)).show(delay);\n    }\n    /**\n     * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input\n     * @param {?=} delay\n     * @return {?}\n     */\n    hide(delay = this.hideDelay) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.hide(delay);\n        }\n    }\n    /**\n     * Shows/hides the tooltip\n     * @return {?}\n     */\n    toggle() {\n        this._isTooltipVisible() ? this.hide() : this.show();\n    }\n    /**\n     * Returns true if the tooltip is currently visible to the user\n     * @return {?}\n     */\n    _isTooltipVisible() {\n        return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    }\n    /**\n     * Handles the keydown events on the host element.\n     * @param {?} e\n     * @return {?}\n     */\n    _handleKeydown(e) {\n        if (this._isTooltipVisible() && e.keyCode === ESCAPE && !hasModifierKey(e)) {\n            e.preventDefault();\n            e.stopPropagation();\n            this.hide(0);\n        }\n    }\n    /**\n     * Handles the touchend events on the host element.\n     * @return {?}\n     */\n    _handleTouchend() {\n        this.hide(this._defaultOptions.touchendHideDelay);\n    }\n    /**\n     * Create the overlay config and position strategy\n     * @private\n     * @return {?}\n     */\n    _createOverlay() {\n        if (this._overlayRef) {\n            return this._overlayRef;\n        }\n        /** @type {?} */\n        const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n        // Create connected position strategy that listens for scroll events to reposition.\n        /** @type {?} */\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._elementRef)\n            .withTransformOriginOn('.mat-tooltip')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(8)\n            .withScrollableContainers(scrollableAncestors);\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe((/**\n         * @param {?} change\n         * @return {?}\n         */\n        change => {\n            if (this._tooltipInstance) {\n                if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this._ngZone.run((/**\n                     * @return {?}\n                     */\n                    () => this.hide(0)));\n                }\n            }\n        }));\n        this._overlayRef = this._overlay.create({\n            direction: this._dir,\n            positionStrategy: strategy,\n            panelClass: TOOLTIP_PANEL_CLASS,\n            scrollStrategy: this._scrollStrategy()\n        });\n        this._updatePosition();\n        this._overlayRef.detachments()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => this._detach()));\n        return this._overlayRef;\n    }\n    /**\n     * Detaches the currently-attached tooltip.\n     * @private\n     * @return {?}\n     */\n    _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n        this._tooltipInstance = null;\n    }\n    /**\n     * Updates the position of the current tooltip.\n     * @private\n     * @return {?}\n     */\n    _updatePosition() {\n        /** @type {?} */\n        const position = (/** @type {?} */ ((/** @type {?} */ (this._overlayRef)).getConfig().positionStrategy));\n        /** @type {?} */\n        const origin = this._getOrigin();\n        /** @type {?} */\n        const overlay = this._getOverlayPosition();\n        position.withPositions([\n            Object.assign({}, origin.main, overlay.main),\n            Object.assign({}, origin.fallback, overlay.fallback)\n        ]);\n    }\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     * @return {?}\n     */\n    _getOrigin() {\n        /** @type {?} */\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        /** @type {?} */\n        const position = this.position;\n        /** @type {?} */\n        let originPosition;\n        if (position == 'above' || position == 'below') {\n            originPosition = { originX: 'center', originY: position == 'above' ? 'top' : 'bottom' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            originPosition = { originX: 'start', originY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            originPosition = { originX: 'end', originY: 'center' };\n        }\n        else {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(originPosition.originX, originPosition.originY);\n        return {\n            main: originPosition,\n            fallback: { originX: x, originY: y }\n        };\n    }\n    /**\n     * Returns the overlay position and a fallback position based on the user's preference\n     * @return {?}\n     */\n    _getOverlayPosition() {\n        /** @type {?} */\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        /** @type {?} */\n        const position = this.position;\n        /** @type {?} */\n        let overlayPosition;\n        if (position == 'above') {\n            overlayPosition = { overlayX: 'center', overlayY: 'bottom' };\n        }\n        else if (position == 'below') {\n            overlayPosition = { overlayX: 'center', overlayY: 'top' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            overlayPosition = { overlayX: 'end', overlayY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            overlayPosition = { overlayX: 'start', overlayY: 'center' };\n        }\n        else {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n        return {\n            main: overlayPosition,\n            fallback: { overlayX: x, overlayY: y }\n        };\n    }\n    /**\n     * Updates the tooltip message and repositions the overlay according to the new message length\n     * @private\n     * @return {?}\n     */\n    _updateTooltipMessage() {\n        // Must wait for the message to be painted to the tooltip so that the overlay can properly\n        // calculate the correct positioning based on the size of the text.\n        if (this._tooltipInstance) {\n            this._tooltipInstance.message = this.message;\n            this._tooltipInstance._markForCheck();\n            this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1), takeUntil(this._destroyed)).subscribe((/**\n             * @return {?}\n             */\n            () => {\n                if (this._tooltipInstance) {\n                    (/** @type {?} */ (this._overlayRef)).updatePosition();\n                }\n            }));\n        }\n    }\n    /**\n     * Updates the tooltip class\n     * @private\n     * @param {?} tooltipClass\n     * @return {?}\n     */\n    _setTooltipClass(tooltipClass) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.tooltipClass = tooltipClass;\n            this._tooltipInstance._markForCheck();\n        }\n    }\n    /**\n     * Inverts an overlay position.\n     * @private\n     * @param {?} x\n     * @param {?} y\n     * @return {?}\n     */\n    _invertPosition(x, y) {\n        if (this.position === 'above' || this.position === 'below') {\n            if (y === 'top') {\n                y = 'bottom';\n            }\n            else if (y === 'bottom') {\n                y = 'top';\n            }\n        }\n        else {\n            if (x === 'end') {\n                x = 'start';\n            }\n            else if (x === 'start') {\n                x = 'end';\n            }\n        }\n        return { x, y };\n    }\n}\nMatTooltip.ɵfac = function MatTooltip_Factory(t) { return new (t || MatTooltip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(HAMMER_LOADER, 8)); };\nMatTooltip.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTooltip, selectors: [[\"\", \"matTooltip\", \"\"]], hostBindings: function MatTooltip_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"longpress\", function MatTooltip_longpress_HostBindingHandler() { return ctx.show(); })(\"keydown\", function MatTooltip_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"touchend\", function MatTooltip_touchend_HostBindingHandler() { return ctx._handleTouchend(); });\n    } }, inputs: { showDelay: [\"matTooltipShowDelay\", \"showDelay\"], hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"], position: [\"matTooltipPosition\", \"position\"], disabled: [\"matTooltipDisabled\", \"disabled\"], message: [\"matTooltip\", \"message\"], tooltipClass: [\"matTooltipClass\", \"tooltipClass\"] }, exportAs: [\"matTooltip\"] });\n/** @nocollapse */\nMatTooltip.ctorParameters = () => [\n    { type: Overlay },\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: AriaDescriber },\n    { type: FocusMonitor },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_TOOLTIP_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_TOOLTIP_DEFAULT_OPTIONS,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [HAMMER_LOADER,] }] }\n];\nMatTooltip.propDecorators = {\n    position: [{ type: Input, args: ['matTooltipPosition',] }],\n    disabled: [{ type: Input, args: ['matTooltipDisabled',] }],\n    showDelay: [{ type: Input, args: ['matTooltipShowDelay',] }],\n    hideDelay: [{ type: Input, args: ['matTooltipHideDelay',] }],\n    message: [{ type: Input, args: ['matTooltip',] }],\n    tooltipClass: [{ type: Input, args: ['matTooltipClass',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltip, [{\n        type: Directive,\n        args: [{\n                selector: '[matTooltip]',\n                exportAs: 'matTooltip',\n                host: {\n                    '(longpress)': 'show()',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(touchend)': '_handleTouchend()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc1.Overlay }, { type: ɵngcc0.ElementRef }, { type: ɵngcc2.ScrollDispatcher }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc3.Platform }, { type: ɵngcc4.AriaDescriber }, { type: ɵngcc4.FocusMonitor }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc5.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [HAMMER_LOADER]\n            }] }]; }, { showDelay: [{\n            type: Input,\n            args: ['matTooltipShowDelay']\n        }], hideDelay: [{\n            type: Input,\n            args: ['matTooltipHideDelay']\n        }], position: [{\n            type: Input,\n            args: ['matTooltipPosition']\n        }], disabled: [{\n            type: Input,\n            args: ['matTooltipDisabled']\n        }], message: [{\n            type: Input,\n            args: ['matTooltip']\n        }], tooltipClass: [{\n            type: Input,\n            args: ['matTooltipClass']\n        }] }); })();\n/**\n * Internal component that wraps the tooltip's content.\n * \\@docs-private\n */\nclass TooltipComponent {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _breakpointObserver\n     */\n    constructor(_changeDetectorRef, _breakpointObserver) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._breakpointObserver = _breakpointObserver;\n        /**\n         * Property watched by the animation framework to show or hide the tooltip\n         */\n        this._visibility = 'initial';\n        /**\n         * Whether interactions on the page should close the tooltip\n         */\n        this._closeOnInteraction = false;\n        /**\n         * Subject for notifying that the tooltip has been hidden from the view\n         */\n        this._onHide = new Subject();\n        /**\n         * Stream that emits whether the user has a handset-sized display.\n         */\n        this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param {?} delay Amount of milliseconds to the delay showing the tooltip.\n     * @return {?}\n     */\n    show(delay) {\n        // Cancel the delayed hide if it is scheduled\n        if (this._hideTimeoutId) {\n            clearTimeout(this._hideTimeoutId);\n            this._hideTimeoutId = null;\n        }\n        // Body interactions should cancel the tooltip if there is a delay in showing.\n        this._closeOnInteraction = true;\n        this._showTimeoutId = setTimeout((/**\n         * @return {?}\n         */\n        () => {\n            this._visibility = 'visible';\n            this._showTimeoutId = null;\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }), delay);\n    }\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param {?} delay Amount of milliseconds to delay showing the tooltip.\n     * @return {?}\n     */\n    hide(delay) {\n        // Cancel the delayed show if it is scheduled\n        if (this._showTimeoutId) {\n            clearTimeout(this._showTimeoutId);\n            this._showTimeoutId = null;\n        }\n        this._hideTimeoutId = setTimeout((/**\n         * @return {?}\n         */\n        () => {\n            this._visibility = 'hidden';\n            this._hideTimeoutId = null;\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }), delay);\n    }\n    /**\n     * Returns an observable that notifies when the tooltip has been hidden from view.\n     * @return {?}\n     */\n    afterHidden() {\n        return this._onHide.asObservable();\n    }\n    /**\n     * Whether the tooltip is being displayed.\n     * @return {?}\n     */\n    isVisible() {\n        return this._visibility === 'visible';\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._onHide.complete();\n    }\n    /**\n     * @return {?}\n     */\n    _animationStart() {\n        this._closeOnInteraction = false;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _animationDone(event) {\n        /** @type {?} */\n        const toState = (/** @type {?} */ (event.toState));\n        if (toState === 'hidden' && !this.isVisible()) {\n            this._onHide.next();\n        }\n        if (toState === 'visible' || toState === 'hidden') {\n            this._closeOnInteraction = true;\n        }\n    }\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     * @return {?}\n     */\n    _handleBodyInteraction() {\n        if (this._closeOnInteraction) {\n            this.hide(0);\n        }\n    }\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     * @return {?}\n     */\n    _markForCheck() {\n        this._changeDetectorRef.markForCheck();\n    }\n}\nTooltipComponent.ɵfac = function TooltipComponent_Factory(t) { return new (t || TooltipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.BreakpointObserver)); };\nTooltipComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TooltipComponent, selectors: [[\"mat-tooltip-component\"]], hostAttrs: [\"aria-hidden\", \"true\"], hostVars: 2, hostBindings: function TooltipComponent_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function TooltipComponent_click_HostBindingHandler() { return ctx._handleBodyInteraction(); }, false, ɵngcc0.ɵɵresolveBody);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"zoom\", ctx._visibility === \"visible\" ? 1 : null);\n    } }, decls: 3, vars: 7, consts: [[1, \"mat-tooltip\", 3, \"ngClass\"]], template: function TooltipComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"@state.start\", function TooltipComponent_Template_div_animation_state_start_0_listener() { return ctx._animationStart(); })(\"@state.done\", function TooltipComponent_Template_div_animation_state_done_0_listener($event) { return ctx._animationDone($event); });\n        ɵngcc0.ɵɵpipe(1, \"async\");\n        ɵngcc0.ɵɵtext(2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        let tmp_0_0;\n        ɵngcc0.ɵɵclassProp(\"mat-tooltip-handset\", (tmp_0_0 = ɵngcc0.ɵɵpipeBind1(1, 5, ctx._isHandset)) == null ? null : tmp_0_0.matches);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.tooltipClass)(\"@state\", ctx._visibility);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.message);\n    } }, dependencies: [ɵngcc7.NgClass, ɵngcc7.AsyncPipe], styles: [\".mat-tooltip-panel{pointer-events:none!important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}@media (-ms-high-contrast:active){.mat-tooltip{outline:solid 1px}}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\"], encapsulation: 2, data: { animation: [matTooltipAnimations.tooltipState] }, changeDetection: 0 });\n/** @nocollapse */\nTooltipComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: BreakpointObserver }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TooltipComponent, [{\n        type: Component,\n        args: [{ selector: 'mat-tooltip-component', template: \"<div class=\\\"mat-tooltip\\\" [ngClass]=\\\"tooltipClass\\\" [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\" [@state]=\\\"_visibility\\\" (@state.start)=\\\"_animationStart()\\\" (@state.done)=\\\"_animationDone($event)\\\">{{message}}</div>\", encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [matTooltipAnimations.tooltipState], host: {\n                    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n                    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n                    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n                    '(body:click)': 'this._handleBodyInteraction()',\n                    'aria-hidden': 'true'\n                }, styles: [\".mat-tooltip-panel{pointer-events:none!important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}@media (-ms-high-contrast:active){.mat-tooltip{outline:solid 1px}}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\"] }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc6.BreakpointObserver }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatTooltipModule {\n}\nMatTooltipModule.ɵfac = function MatTooltipModule_Factory(t) { return new (t || MatTooltipModule)(); };\nMatTooltipModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatTooltipModule });\nMatTooltipModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n        { provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig },\n    ], imports: [A11yModule,\n        CommonModule,\n        OverlayModule,\n        MatCommonModule, MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltipModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    A11yModule,\n                    CommonModule,\n                    OverlayModule,\n                    MatCommonModule,\n                ],\n                exports: [MatTooltip, TooltipComponent, MatCommonModule],\n                declarations: [MatTooltip, TooltipComponent],\n                entryComponents: [TooltipComponent],\n                providers: [\n                    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n                    { provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig },\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTooltipModule, { declarations: function () { return [MatTooltip, TooltipComponent]; }, imports: function () { return [A11yModule,\n        CommonModule,\n        OverlayModule,\n        MatCommonModule]; }, exports: function () { return [MatTooltip, TooltipComponent, MatCommonModule]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatTooltipModule, getMatTooltipInvalidPositionError, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_TOOLTIP_DEFAULT_OPTIONS, MatTooltip, TooltipComponent, matTooltipAnimations };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}