{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CDK_TREE_NODE_OUTLET_NODE, CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport { Attribute, Directive, ElementRef, Input, IterableDiffers, Inject, Optional, ViewContainerRef, ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { mixinDisabled, mixinTabIndex, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { CommonModule } from '@angular/common';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/tree';\nconst _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\n/**\n * Wrapper for the CdkTree node with Material design styles.\n * @template T\n */\nclass MatTreeNode extends _MatTreeNodeMixinBase {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _tree\n   * @param {?} tabIndex\n   */\n  constructor(_elementRef, _tree, tabIndex) {\n    super(_elementRef, _tree);\n    this._elementRef = _elementRef;\n    this._tree = _tree;\n    this.role = 'treeitem';\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\nMatTreeNode.ɵfac = function MatTreeNode_Factory(t) {\n  return new (t || MatTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵinjectAttribute('tabindex'));\n};\nMatTreeNode.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNode,\n  selectors: [[\"mat-tree-node\"]],\n  hostAttrs: [1, \"mat-tree-node\"],\n  hostVars: 3,\n  hostBindings: function MatTreeNode_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"aria-level\", ctx.role === \"treeitem\" ? ctx.level : null)(\"role\", ctx.role);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    tabIndex: \"tabIndex\",\n    role: \"role\"\n  },\n  exportAs: [\"matTreeNode\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNode,\n    useExisting: MatTreeNode\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\nMatTreeNode.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: CdkTree\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}];\nMatTreeNode.propDecorators = {\n  role: [{\n    type: Input\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-tree-node',\n      exportAs: 'matTreeNode',\n      inputs: ['disabled', 'tabIndex'],\n      host: {\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n        '[attr.role]': 'role',\n        'class': 'mat-tree-node'\n      },\n      providers: [{\n        provide: CdkTreeNode,\n        useExisting: MatTreeNode\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.CdkTree\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, {\n    role: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * @template T\n */\nclass MatTreeNodeDef extends CdkTreeNodeDef {}\nMatTreeNodeDef.ɵfac = /*@__PURE__*/function () {\n  let ɵMatTreeNodeDef_BaseFactory;\n  return function MatTreeNodeDef_Factory(t) {\n    return (ɵMatTreeNodeDef_BaseFactory || (ɵMatTreeNodeDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeDef)))(t || MatTreeNodeDef);\n  };\n}();\nMatTreeNodeDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNodeDef,\n  selectors: [[\"\", \"matTreeNodeDef\", \"\"]],\n  inputs: {\n    when: [\"matTreeNodeDefWhen\", \"when\"],\n    data: [\"matTreeNode\", \"data\"]\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeDef,\n    useExisting: MatTreeNodeDef\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nMatTreeNodeDef.propDecorators = {\n  data: [{\n    type: Input,\n    args: ['matTreeNode']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeDef]',\n      inputs: ['when: matTreeNodeDefWhen'],\n      providers: [{\n        provide: CdkTreeNodeDef,\n        useExisting: MatTreeNodeDef\n      }]\n    }]\n  }], null, {\n    data: [{\n      type: Input,\n      args: ['matTreeNode']\n    }]\n  });\n})();\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n * @template T\n */\nclass MatNestedTreeNode extends CdkNestedTreeNode {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _tree\n   * @param {?} _differs\n   * @param {?} tabIndex\n   */\n  constructor(_elementRef, _tree, _differs, tabIndex) {\n    super(_elementRef, _tree, _differs);\n    this._elementRef = _elementRef;\n    this._tree = _tree;\n    this._differs = _differs;\n    this._disabled = false;\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n  /**\n   * Whether the node is disabled.\n   * @return {?}\n   */\n  get disabled() {\n    return this._disabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  /**\n   * Tabindex for the node.\n   * @return {?}\n   */\n  get tabIndex() {\n    return this.disabled ? -1 : this._tabIndex;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set tabIndex(value) {\n    // If the specified tabIndex value is null or undefined, fall back to the default value.\n    this._tabIndex = value != null ? value : 0;\n  }\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\nMatNestedTreeNode.ɵfac = function MatNestedTreeNode_Factory(t) {\n  return new (t || MatNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵinjectAttribute('tabindex'));\n};\nMatNestedTreeNode.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatNestedTreeNode,\n  selectors: [[\"mat-nested-tree-node\"]],\n  hostAttrs: [1, \"mat-nested-tree-node\"],\n  hostVars: 2,\n  hostBindings: function MatNestedTreeNode_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"role\", ctx.role);\n    }\n  },\n  inputs: {\n    tabIndex: \"tabIndex\",\n    disabled: \"disabled\",\n    node: [\"matNestedTreeNode\", \"node\"]\n  },\n  exportAs: [\"matNestedTreeNode\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkNestedTreeNode,\n    useExisting: MatNestedTreeNode\n  }, {\n    provide: CdkTreeNode,\n    useExisting: MatNestedTreeNode\n  }, {\n    provide: CDK_TREE_NODE_OUTLET_NODE,\n    useExisting: MatNestedTreeNode\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\nMatNestedTreeNode.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: CdkTree\n}, {\n  type: IterableDiffers\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}];\nMatNestedTreeNode.propDecorators = {\n  node: [{\n    type: Input,\n    args: ['matNestedTreeNode']\n  }],\n  disabled: [{\n    type: Input\n  }],\n  tabIndex: [{\n    type: Input\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatNestedTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-nested-tree-node',\n      exportAs: 'matNestedTreeNode',\n      host: {\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.role]': 'role',\n        'class': 'mat-nested-tree-node'\n      },\n      providers: [{\n        provide: CdkNestedTreeNode,\n        useExisting: MatNestedTreeNode\n      }, {\n        provide: CdkTreeNode,\n        useExisting: MatNestedTreeNode\n      }, {\n        provide: CDK_TREE_NODE_OUTLET_NODE,\n        useExisting: MatNestedTreeNode\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.CdkTree\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, {\n    tabIndex: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    node: [{\n      type: Input,\n      args: ['matNestedTreeNode']\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n * @template T\n */\nclass MatTreeNodePadding extends CdkTreeNodePadding {}\nMatTreeNodePadding.ɵfac = /*@__PURE__*/function () {\n  let ɵMatTreeNodePadding_BaseFactory;\n  return function MatTreeNodePadding_Factory(t) {\n    return (ɵMatTreeNodePadding_BaseFactory || (ɵMatTreeNodePadding_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodePadding)))(t || MatTreeNodePadding);\n  };\n}();\nMatTreeNodePadding.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNodePadding,\n  selectors: [[\"\", \"matTreeNodePadding\", \"\"]],\n  inputs: {\n    level: [\"matTreeNodePadding\", \"level\"],\n    indent: [\"matTreeNodePaddingIndent\", \"indent\"]\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodePadding,\n    useExisting: MatTreeNodePadding\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nMatTreeNodePadding.propDecorators = {\n  level: [{\n    type: Input,\n    args: ['matTreeNodePadding']\n  }],\n  indent: [{\n    type: Input,\n    args: ['matTreeNodePaddingIndent']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodePadding, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodePadding]',\n      providers: [{\n        provide: CdkTreeNodePadding,\n        useExisting: MatTreeNodePadding\n      }]\n    }]\n  }], null, {\n    level: [{\n      type: Input,\n      args: ['matTreeNodePadding']\n    }],\n    indent: [{\n      type: Input,\n      args: ['matTreeNodePaddingIndent']\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass MatTreeNodeOutlet {\n  /**\n   * @param {?} viewContainer\n   * @param {?=} _node\n   */\n  constructor(viewContainer, _node) {\n    this.viewContainer = viewContainer;\n    this._node = _node;\n  }\n}\nMatTreeNodeOutlet.ɵfac = function MatTreeNodeOutlet_Factory(t) {\n  return new (t || MatTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8));\n};\nMatTreeNodeOutlet.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNodeOutlet,\n  selectors: [[\"\", \"matTreeNodeOutlet\", \"\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeOutlet,\n    useExisting: MatTreeNodeOutlet\n  }])]\n});\n/** @nocollapse */\nMatTreeNodeOutlet.ctorParameters = () => [{\n  type: ViewContainerRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [CDK_TREE_NODE_OUTLET_NODE]\n  }, {\n    type: Optional\n  }]\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeOutlet]',\n      providers: [{\n        provide: CdkTreeNodeOutlet,\n        useExisting: MatTreeNodeOutlet\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TREE_NODE_OUTLET_NODE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTable with Material design styles.\n * @template T\n */\nclass MatTree extends CdkTree {}\nMatTree.ɵfac = /*@__PURE__*/function () {\n  let ɵMatTree_BaseFactory;\n  return function MatTree_Factory(t) {\n    return (ɵMatTree_BaseFactory || (ɵMatTree_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTree)))(t || MatTree);\n  };\n}();\nMatTree.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatTree,\n  selectors: [[\"mat-tree\"]],\n  viewQuery: function MatTree_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(MatTreeNodeOutlet, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"tree\", 1, \"mat-tree\"],\n  exportAs: [\"matTree\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTree,\n    useExisting: MatTree\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"matTreeNodeOutlet\", \"\"]],\n  template: function MatTree_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainer(0, 0);\n    }\n  },\n  dependencies: [MatTreeNodeOutlet],\n  styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;min-height:48px;flex:1;overflow:hidden;word-wrap:break-word}.mat-nested-tree-ndoe{border-bottom-width:0}\"],\n  encapsulation: 2\n});\nMatTree.propDecorators = {\n  _nodeOutlet: [{\n    type: ViewChild,\n    args: [MatTreeNodeOutlet, {\n      static: true\n    }]\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTree, [{\n    type: Component,\n    args: [{\n      selector: 'mat-tree',\n      exportAs: 'matTree',\n      template: `<ng-container matTreeNodeOutlet></ng-container>`,\n      host: {\n        'class': 'mat-tree',\n        'role': 'tree'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.Default,\n      providers: [{\n        provide: CdkTree,\n        useExisting: MatTree\n      }],\n      styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;min-height:48px;flex:1;overflow:hidden;word-wrap:break-word}.mat-nested-tree-ndoe{border-bottom-width:0}\"]\n    }]\n  }], null, {\n    _nodeOutlet: [{\n      type: ViewChild,\n      args: [MatTreeNodeOutlet, {\n        static: true\n      }]\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n * @template T\n */\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {\n  constructor() {\n    super(...arguments);\n    this.recursive = false;\n  }\n}\nMatTreeNodeToggle.ɵfac = /*@__PURE__*/function () {\n  let ɵMatTreeNodeToggle_BaseFactory;\n  return function MatTreeNodeToggle_Factory(t) {\n    return (ɵMatTreeNodeToggle_BaseFactory || (ɵMatTreeNodeToggle_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeToggle)))(t || MatTreeNodeToggle);\n  };\n}();\nMatTreeNodeToggle.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNodeToggle,\n  selectors: [[\"\", \"matTreeNodeToggle\", \"\"]],\n  inputs: {\n    recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"]\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeToggle,\n    useExisting: MatTreeNodeToggle\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nMatTreeNodeToggle.propDecorators = {\n  recursive: [{\n    type: Input,\n    args: ['matTreeNodeToggleRecursive']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeToggle, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeToggle]',\n      providers: [{\n        provide: CdkTreeNodeToggle,\n        useExisting: MatTreeNodeToggle\n      }]\n    }]\n  }], null, {\n    recursive: [{\n      type: Input,\n      args: ['matTreeNodeToggleRecursive']\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAT_TREE_DIRECTIVES = [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\nclass MatTreeModule {}\nMatTreeModule.ɵfac = function MatTreeModule_Factory(t) {\n  return new (t || MatTreeModule)();\n};\nMatTreeModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatTreeModule\n});\nMatTreeModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CdkTreeModule, CommonModule, MatCommonModule],\n      exports: MAT_TREE_DIRECTIVES,\n      declarations: MAT_TREE_DIRECTIVES\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTreeModule, {\n    declarations: function () {\n      return [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\n    },\n    imports: function () {\n      return [CdkTreeModule, CommonModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\n    }\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n * @template T, F\n */\nclass MatTreeFlattener {\n  /**\n   * @param {?} transformFunction\n   * @param {?} getLevel\n   * @param {?} isExpandable\n   * @param {?} getChildren\n   */\n  constructor(transformFunction, getLevel, isExpandable, getChildren) {\n    this.transformFunction = transformFunction;\n    this.getLevel = getLevel;\n    this.isExpandable = isExpandable;\n    this.getChildren = getChildren;\n  }\n  /**\n   * @param {?} node\n   * @param {?} level\n   * @param {?} resultNodes\n   * @param {?} parentMap\n   * @return {?}\n   */\n  _flattenNode(node, level, resultNodes, parentMap) {\n    /** @type {?} */\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n    if (this.isExpandable(flatNode)) {\n      /** @type {?} */\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(\n          /**\n          * @param {?} children\n          * @return {?}\n          */\n          children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n  /**\n   * @param {?} children\n   * @param {?} level\n   * @param {?} resultNodes\n   * @param {?} parentMap\n   * @return {?}\n   */\n  _flattenChildren(children, level, resultNodes, parentMap) {\n    children.forEach(\n    /**\n    * @param {?} child\n    * @param {?} index\n    * @return {?}\n    */\n    (child, index) => {\n      /** @type {?} */\n      let childParentMap = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   * @param {?} structuredData\n   * @return {?}\n   */\n  flattenNodes(structuredData) {\n    /** @type {?} */\n    let resultNodes = [];\n    structuredData.forEach(\n    /**\n    * @param {?} node\n    * @return {?}\n    */\n    node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   * @param {?} nodes\n   * @param {?} treeControl\n   * @return {?}\n   */\n  expandFlattenedNodes(nodes, treeControl) {\n    /** @type {?} */\n    let results = [];\n    /** @type {?} */\n    let currentExpand = [];\n    currentExpand[0] = true;\n    nodes.forEach(\n    /**\n    * @param {?} node\n    * @return {?}\n    */\n    node => {\n      /** @type {?} */\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n * @template T, F\n */\nclass MatTreeFlatDataSource extends DataSource {\n  /**\n   * @param {?} _treeControl\n   * @param {?} _treeFlattener\n   * @param {?=} initialData\n   */\n  constructor(_treeControl, _treeFlattener, initialData = []) {\n    super();\n    this._treeControl = _treeControl;\n    this._treeFlattener = _treeFlattener;\n    this._flattenedData = new BehaviorSubject([]);\n    this._expandedData = new BehaviorSubject([]);\n    this._data = new BehaviorSubject(initialData);\n  }\n  /**\n   * @return {?}\n   */\n  get data() {\n    return this._data.value;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set data(value) {\n    this._data.next(value);\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n    this._treeControl.dataNodes = this._flattenedData.value;\n  }\n  /**\n   * @param {?} collectionViewer\n   * @return {?}\n   */\n  connect(collectionViewer) {\n    /** @type {?} */\n    const changes = [collectionViewer.viewChange, this._treeControl.expansionModel.onChange, this._flattenedData];\n    return merge(...changes).pipe(map(\n    /**\n    * @return {?}\n    */\n    () => {\n      this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n      return this._expandedData.value;\n    }));\n  }\n  /**\n   * @return {?}\n   */\n  disconnect() {\n    // no op\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n * @template T\n */\nclass MatTreeNestedDataSource extends DataSource {\n  constructor() {\n    super(...arguments);\n    this._data = new BehaviorSubject([]);\n  }\n  /**\n   * Data for the nested tree\n   * @return {?}\n   */\n  get data() {\n    return this._data.value;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set data(value) {\n    this._data.next(value);\n  }\n  /**\n   * @param {?} collectionViewer\n   * @return {?}\n   */\n  connect(collectionViewer) {\n    return merge(...[collectionViewer.viewChange, this._data]).pipe(map(\n    /**\n    * @return {?}\n    */\n    () => {\n      return this.data;\n    }));\n  }\n  /**\n   * @return {?}\n   */\n  disconnect() {\n    // no op\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatTreeNode, MatTreeNodeDef, MatNestedTreeNode, MatTreeNodePadding, MatTree, MatTreeModule, MatTreeNodeToggle, MatTreeNodeOutlet, MatTreeFlattener, MatTreeFlatDataSource, MatTreeNestedDataSource };","map":{"version":3,"names":["CDK_TREE_NODE_OUTLET_NODE","CdkNestedTreeNode","CdkTree","CdkTreeNode","CdkTreeNodeDef","CdkTreeNodePadding","CdkTreeNodeOutlet","CdkTreeNodeToggle","CdkTreeModule","Attribute","Directive","ElementRef","Input","IterableDiffers","Inject","Optional","ViewContainerRef","ChangeDetectionStrategy","Component","ViewChild","ViewEncapsulation","NgModule","mixinDisabled","mixinTabIndex","MatCommonModule","coerceBooleanProperty","CommonModule","DataSource","BehaviorSubject","merge","map","take","ɵngcc0","ɵngcc1","_MatTreeNodeMixinBase","MatTreeNode","constructor","_elementRef","_tree","tabIndex","role","Number","ɵfac","MatTreeNode_Factory","t","ɵɵdirectiveInject","ɵɵinjectAttribute","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","hostVars","hostBindings","MatTreeNode_HostBindings","rf","ctx","ɵɵattribute","isExpanded","level","inputs","disabled","exportAs","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInheritDefinitionFeature","ctorParameters","String","decorators","args","propDecorators","ngDevMode","ɵsetClassMetadata","selector","host","providers","MatTreeNodeDef","ɵMatTreeNodeDef_BaseFactory","MatTreeNodeDef_Factory","ɵɵgetInheritedFactory","when","data","MatNestedTreeNode","_differs","_disabled","value","_tabIndex","ngAfterContentInit","ngOnDestroy","MatNestedTreeNode_Factory","MatNestedTreeNode_HostBindings","node","MatTreeNodePadding","ɵMatTreeNodePadding_BaseFactory","MatTreeNodePadding_Factory","indent","MatTreeNodeOutlet","viewContainer","_node","MatTreeNodeOutlet_Factory","undefined","MatTree","ɵMatTree_BaseFactory","MatTree_Factory","ɵcmp","ɵɵdefineComponent","viewQuery","MatTree_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","_nodeOutlet","first","decls","vars","consts","template","MatTree_Template","ɵɵelementContainer","dependencies","styles","encapsulation","static","None","changeDetection","Default","MatTreeNodeToggle","arguments","recursive","ɵMatTreeNodeToggle_BaseFactory","MatTreeNodeToggle_Factory","MAT_TREE_DIRECTIVES","MatTreeModule","MatTreeModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","MatTreeFlatDataSource","_treeControl","_treeFlattener","initialData","_flattenedData","_expandedData","_data","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","onChange","disconnect","MatTreeNestedDataSource"],"sources":["C:/Users/dalci/OneDrive/Masaüstü/dotnet-angular-web-explorer/ClientApp/node_modules/@angular/material/__ivy_ngcc__/esm2015/tree.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CDK_TREE_NODE_OUTLET_NODE, CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport { Attribute, Directive, ElementRef, Input, IterableDiffers, Inject, Optional, ViewContainerRef, ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { mixinDisabled, mixinTabIndex, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { CommonModule } from '@angular/common';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/tree';\nconst _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\n/**\n * Wrapper for the CdkTree node with Material design styles.\n * @template T\n */\nclass MatTreeNode extends _MatTreeNodeMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     * @param {?} tabIndex\n     */\n    constructor(_elementRef, _tree, tabIndex) {\n        super(_elementRef, _tree);\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        this.role = 'treeitem';\n        this.tabIndex = Number(tabIndex) || 0;\n    }\n}\nMatTreeNode.ɵfac = function MatTreeNode_Factory(t) { return new (t || MatTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatTreeNode.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNode, selectors: [[\"mat-tree-node\"]], hostAttrs: [1, \"mat-tree-node\"], hostVars: 3, hostBindings: function MatTreeNode_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"aria-level\", ctx.role === \"treeitem\" ? ctx.level : null)(\"role\", ctx.role);\n    } }, inputs: { disabled: \"disabled\", tabIndex: \"tabIndex\", role: \"role\" }, exportAs: [\"matTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNode, useExisting: MatTreeNode }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nMatTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\nMatTreeNode.propDecorators = {\n    role: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-tree-node',\n                exportAs: 'matTreeNode',\n                inputs: ['disabled', 'tabIndex'],\n                host: {\n                    '[attr.aria-expanded]': 'isExpanded',\n                    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n                    '[attr.role]': 'role',\n                    'class': 'mat-tree-node'\n                },\n                providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.CdkTree }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, { role: [{\n            type: Input\n        }] }); })();\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * @template T\n */\nclass MatTreeNodeDef extends CdkTreeNodeDef {\n}\nMatTreeNodeDef.ɵfac = /*@__PURE__*/ function () { let ɵMatTreeNodeDef_BaseFactory; return function MatTreeNodeDef_Factory(t) { return (ɵMatTreeNodeDef_BaseFactory || (ɵMatTreeNodeDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeDef)))(t || MatTreeNodeDef); }; }();\nMatTreeNodeDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeDef, selectors: [[\"\", \"matTreeNodeDef\", \"\"]], inputs: { when: [\"matTreeNodeDefWhen\", \"when\"], data: [\"matTreeNode\", \"data\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNodeDef.propDecorators = {\n    data: [{ type: Input, args: ['matTreeNode',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeDef, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeDef]',\n                inputs: [\n                    'when: matTreeNodeDefWhen'\n                ],\n                providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }]\n            }]\n    }], null, { data: [{\n            type: Input,\n            args: ['matTreeNode']\n        }] }); })();\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n * @template T\n */\nclass MatNestedTreeNode extends CdkNestedTreeNode {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     * @param {?} _differs\n     * @param {?} tabIndex\n     */\n    constructor(_elementRef, _tree, _differs, tabIndex) {\n        super(_elementRef, _tree, _differs);\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        this._differs = _differs;\n        this._disabled = false;\n        this.tabIndex = Number(tabIndex) || 0;\n    }\n    /**\n     * Whether the node is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /**\n     * Tabindex for the node.\n     * @return {?}\n     */\n    get tabIndex() { return this.disabled ? -1 : this._tabIndex; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set tabIndex(value) {\n        // If the specified tabIndex value is null or undefined, fall back to the default value.\n        this._tabIndex = value != null ? value : 0;\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/23091\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        super.ngAfterContentInit();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n}\nMatNestedTreeNode.ɵfac = function MatNestedTreeNode_Factory(t) { return new (t || MatNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatNestedTreeNode.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatNestedTreeNode, selectors: [[\"mat-nested-tree-node\"]], hostAttrs: [1, \"mat-nested-tree-node\"], hostVars: 2, hostBindings: function MatNestedTreeNode_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"role\", ctx.role);\n    } }, inputs: { tabIndex: \"tabIndex\", disabled: \"disabled\", node: [\"matNestedTreeNode\", \"node\"] }, exportAs: [\"matNestedTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n            { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n            { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nMatNestedTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: IterableDiffers },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\nMatNestedTreeNode.propDecorators = {\n    node: [{ type: Input, args: ['matNestedTreeNode',] }],\n    disabled: [{ type: Input }],\n    tabIndex: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatNestedTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-nested-tree-node',\n                exportAs: 'matNestedTreeNode',\n                host: {\n                    '[attr.aria-expanded]': 'isExpanded',\n                    '[attr.role]': 'role',\n                    'class': 'mat-nested-tree-node'\n                },\n                providers: [\n                    { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n                    { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n                    { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode }\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.CdkTree }, { type: ɵngcc0.IterableDiffers }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, { tabIndex: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], node: [{\n            type: Input,\n            args: ['matNestedTreeNode']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n * @template T\n */\nclass MatTreeNodePadding extends CdkTreeNodePadding {\n}\nMatTreeNodePadding.ɵfac = /*@__PURE__*/ function () { let ɵMatTreeNodePadding_BaseFactory; return function MatTreeNodePadding_Factory(t) { return (ɵMatTreeNodePadding_BaseFactory || (ɵMatTreeNodePadding_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodePadding)))(t || MatTreeNodePadding); }; }();\nMatTreeNodePadding.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodePadding, selectors: [[\"\", \"matTreeNodePadding\", \"\"]], inputs: { level: [\"matTreeNodePadding\", \"level\"], indent: [\"matTreeNodePaddingIndent\", \"indent\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNodePadding.propDecorators = {\n    level: [{ type: Input, args: ['matTreeNodePadding',] }],\n    indent: [{ type: Input, args: ['matTreeNodePaddingIndent',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodePadding, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodePadding]',\n                providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }]\n            }]\n    }], null, { level: [{\n            type: Input,\n            args: ['matTreeNodePadding']\n        }], indent: [{\n            type: Input,\n            args: ['matTreeNodePaddingIndent']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass MatTreeNodeOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?=} _node\n     */\n    constructor(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n}\nMatTreeNodeOutlet.ɵfac = function MatTreeNodeOutlet_Factory(t) { return new (t || MatTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8)); };\nMatTreeNodeOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeOutlet, selectors: [[\"\", \"matTreeNodeOutlet\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkTreeNodeOutlet,\n                useExisting: MatTreeNodeOutlet\n            }])] });\n/** @nocollapse */\nMatTreeNodeOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TREE_NODE_OUTLET_NODE,] }, { type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeOutlet]',\n                providers: [{\n                        provide: CdkTreeNodeOutlet,\n                        useExisting: MatTreeNodeOutlet\n                    }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TREE_NODE_OUTLET_NODE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTable with Material design styles.\n * @template T\n */\nclass MatTree extends CdkTree {\n}\nMatTree.ɵfac = /*@__PURE__*/ function () { let ɵMatTree_BaseFactory; return function MatTree_Factory(t) { return (ɵMatTree_BaseFactory || (ɵMatTree_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTree)))(t || MatTree); }; }();\nMatTree.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatTree, selectors: [[\"mat-tree\"]], viewQuery: function MatTree_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatTreeNodeOutlet, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    } }, hostAttrs: [\"role\", \"tree\", 1, \"mat-tree\"], exportAs: [\"matTree\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTree, useExisting: MatTree }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"matTreeNodeOutlet\", \"\"]], template: function MatTree_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, dependencies: [MatTreeNodeOutlet], styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;min-height:48px;flex:1;overflow:hidden;word-wrap:break-word}.mat-nested-tree-ndoe{border-bottom-width:0}\"], encapsulation: 2 });\nMatTree.propDecorators = {\n    _nodeOutlet: [{ type: ViewChild, args: [MatTreeNodeOutlet, { static: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTree, [{\n        type: Component,\n        args: [{ selector: 'mat-tree', exportAs: 'matTree', template: `<ng-container matTreeNodeOutlet></ng-container>`, host: {\n                    'class': 'mat-tree',\n                    'role': 'tree'\n                }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, providers: [{ provide: CdkTree, useExisting: MatTree }], styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;min-height:48px;flex:1;overflow:hidden;word-wrap:break-word}.mat-nested-tree-ndoe{border-bottom-width:0}\"] }]\n    }], null, { _nodeOutlet: [{\n            type: ViewChild,\n            args: [MatTreeNodeOutlet, { static: true }]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n * @template T\n */\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {\n    constructor() {\n        super(...arguments);\n        this.recursive = false;\n    }\n}\nMatTreeNodeToggle.ɵfac = /*@__PURE__*/ function () { let ɵMatTreeNodeToggle_BaseFactory; return function MatTreeNodeToggle_Factory(t) { return (ɵMatTreeNodeToggle_BaseFactory || (ɵMatTreeNodeToggle_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeToggle)))(t || MatTreeNodeToggle); }; }();\nMatTreeNodeToggle.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeToggle, selectors: [[\"\", \"matTreeNodeToggle\", \"\"]], inputs: { recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNodeToggle.propDecorators = {\n    recursive: [{ type: Input, args: ['matTreeNodeToggleRecursive',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeToggle, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeToggle]',\n                providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }]\n            }]\n    }], null, { recursive: [{\n            type: Input,\n            args: ['matTreeNodeToggleRecursive']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAT_TREE_DIRECTIVES = [\n    MatNestedTreeNode,\n    MatTreeNodeDef,\n    MatTreeNodePadding,\n    MatTreeNodeToggle,\n    MatTree,\n    MatTreeNode,\n    MatTreeNodeOutlet\n];\nclass MatTreeModule {\n}\nMatTreeModule.ɵfac = function MatTreeModule_Factory(t) { return new (t || MatTreeModule)(); };\nMatTreeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatTreeModule });\nMatTreeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [CdkTreeModule, CommonModule, MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CdkTreeModule, CommonModule, MatCommonModule],\n                exports: MAT_TREE_DIRECTIVES,\n                declarations: MAT_TREE_DIRECTIVES\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTreeModule, { declarations: function () { return [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet]; }, imports: function () { return [CdkTreeModule, CommonModule, MatCommonModule]; }, exports: function () { return [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n * @template T, F\n */\nclass MatTreeFlattener {\n    /**\n     * @param {?} transformFunction\n     * @param {?} getLevel\n     * @param {?} isExpandable\n     * @param {?} getChildren\n     */\n    constructor(transformFunction, getLevel, isExpandable, getChildren) {\n        this.transformFunction = transformFunction;\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n        this.getChildren = getChildren;\n    }\n    /**\n     * @param {?} node\n     * @param {?} level\n     * @param {?} resultNodes\n     * @param {?} parentMap\n     * @return {?}\n     */\n    _flattenNode(node, level, resultNodes, parentMap) {\n        /** @type {?} */\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n        if (this.isExpandable(flatNode)) {\n            /** @type {?} */\n            const childrenNodes = this.getChildren(node);\n            if (childrenNodes) {\n                if (Array.isArray(childrenNodes)) {\n                    this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n                }\n                else {\n                    childrenNodes.pipe(take(1)).subscribe((/**\n                     * @param {?} children\n                     * @return {?}\n                     */\n                    children => {\n                        this._flattenChildren(children, level, resultNodes, parentMap);\n                    }));\n                }\n            }\n        }\n        return resultNodes;\n    }\n    /**\n     * @param {?} children\n     * @param {?} level\n     * @param {?} resultNodes\n     * @param {?} parentMap\n     * @return {?}\n     */\n    _flattenChildren(children, level, resultNodes, parentMap) {\n        children.forEach((/**\n         * @param {?} child\n         * @param {?} index\n         * @return {?}\n         */\n        (child, index) => {\n            /** @type {?} */\n            let childParentMap = parentMap.slice();\n            childParentMap.push(index != children.length - 1);\n            this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        }));\n    }\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     * @param {?} structuredData\n     * @return {?}\n     */\n    flattenNodes(structuredData) {\n        /** @type {?} */\n        let resultNodes = [];\n        structuredData.forEach((/**\n         * @param {?} node\n         * @return {?}\n         */\n        node => this._flattenNode(node, 0, resultNodes, [])));\n        return resultNodes;\n    }\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     * @param {?} nodes\n     * @param {?} treeControl\n     * @return {?}\n     */\n    expandFlattenedNodes(nodes, treeControl) {\n        /** @type {?} */\n        let results = [];\n        /** @type {?} */\n        let currentExpand = [];\n        currentExpand[0] = true;\n        nodes.forEach((/**\n         * @param {?} node\n         * @return {?}\n         */\n        node => {\n            /** @type {?} */\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n            if (expand) {\n                results.push(node);\n            }\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        }));\n        return results;\n    }\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n * @template T, F\n */\nclass MatTreeFlatDataSource extends DataSource {\n    /**\n     * @param {?} _treeControl\n     * @param {?} _treeFlattener\n     * @param {?=} initialData\n     */\n    constructor(_treeControl, _treeFlattener, initialData = []) {\n        super();\n        this._treeControl = _treeControl;\n        this._treeFlattener = _treeFlattener;\n        this._flattenedData = new BehaviorSubject([]);\n        this._expandedData = new BehaviorSubject([]);\n        this._data = new BehaviorSubject(initialData);\n    }\n    /**\n     * @return {?}\n     */\n    get data() { return this._data.value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set data(value) {\n        this._data.next(value);\n        this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n        this._treeControl.dataNodes = this._flattenedData.value;\n    }\n    /**\n     * @param {?} collectionViewer\n     * @return {?}\n     */\n    connect(collectionViewer) {\n        /** @type {?} */\n        const changes = [\n            collectionViewer.viewChange,\n            this._treeControl.expansionModel.onChange,\n            this._flattenedData\n        ];\n        return merge(...changes).pipe(map((/**\n         * @return {?}\n         */\n        () => {\n            this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n            return this._expandedData.value;\n        })));\n    }\n    /**\n     * @return {?}\n     */\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n * @template T\n */\nclass MatTreeNestedDataSource extends DataSource {\n    constructor() {\n        super(...arguments);\n        this._data = new BehaviorSubject([]);\n    }\n    /**\n     * Data for the nested tree\n     * @return {?}\n     */\n    get data() { return this._data.value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set data(value) { this._data.next(value); }\n    /**\n     * @param {?} collectionViewer\n     * @return {?}\n     */\n    connect(collectionViewer) {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map((/**\n         * @return {?}\n         */\n        () => {\n            return this.data;\n        })));\n    }\n    /**\n     * @return {?}\n     */\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatTreeNode, MatTreeNodeDef, MatNestedTreeNode, MatTreeNodePadding, MatTree, MatTreeModule, MatTreeNodeToggle, MatTreeNodeOutlet, MatTreeFlattener, MatTreeFlatDataSource, MatTreeNestedDataSource };\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,yBAAyB,EAAEC,iBAAiB,EAAEC,OAAO,EAAEC,WAAW,EAAEC,cAAc,EAAEC,kBAAkB,EAAEC,iBAAiB,EAAEC,iBAAiB,EAAEC,aAAa,QAAQ,mBAAmB;AAC/L,SAASC,SAAS,EAAEC,SAAS,EAAEC,UAAU,EAAEC,KAAK,EAAEC,eAAe,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,gBAAgB,EAAEC,uBAAuB,EAAEC,SAAS,EAAEC,SAAS,EAAEC,iBAAiB,EAAEC,QAAQ,QAAQ,eAAe;AACxM,SAASC,aAAa,EAAEC,aAAa,EAAEC,eAAe,QAAQ,wBAAwB;AACtF,SAASC,qBAAqB,QAAQ,uBAAuB;AAC7D,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,UAAU,QAAQ,0BAA0B;AACrD,SAASC,eAAe,EAAEC,KAAK,QAAQ,MAAM;AAC7C,SAASC,GAAG,EAAEC,IAAI,QAAQ,gBAAgB;;AAE1C;AACA;AACA;AACA;AACA;AACA,OAAO,KAAKC,MAAM,MAAM,eAAe;AACvC,OAAO,KAAKC,MAAM,MAAM,mBAAmB;AAC3C,MAAMC,qBAAqB,GAAGX,aAAa,CAACD,aAAa,CAACnB,WAAW,CAAC,CAAC;AACvE;AACA;AACA;AACA;AACA,MAAMgC,WAAW,SAASD,qBAAqB,CAAC;EAC5C;AACJ;AACA;AACA;AACA;EACIE,WAAW,CAACC,WAAW,EAAEC,KAAK,EAAEC,QAAQ,EAAE;IACtC,KAAK,CAACF,WAAW,EAAEC,KAAK,CAAC;IACzB,IAAI,CAACD,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACE,IAAI,GAAG,UAAU;IACtB,IAAI,CAACD,QAAQ,GAAGE,MAAM,CAACF,QAAQ,CAAC,IAAI,CAAC;EACzC;AACJ;AACAJ,WAAW,CAACO,IAAI,GAAG,SAASC,mBAAmB,CAACC,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAIT,WAAW,EAAEH,MAAM,CAACa,iBAAiB,CAACb,MAAM,CAACrB,UAAU,CAAC,EAAEqB,MAAM,CAACa,iBAAiB,CAACZ,MAAM,CAAC/B,OAAO,CAAC,EAAE8B,MAAM,CAACc,iBAAiB,CAAC,UAAU,CAAC,CAAC;AAAE,CAAC;AAClNX,WAAW,CAACY,IAAI,GAAG,aAAcf,MAAM,CAACgB,iBAAiB,CAAC;EAAEC,IAAI,EAAEd,WAAW;EAAEe,SAAS,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC;EAAEC,SAAS,EAAE,CAAC,CAAC,EAAE,eAAe,CAAC;EAAEC,QAAQ,EAAE,CAAC;EAAEC,YAAY,EAAE,SAASC,wBAAwB,CAACC,EAAE,EAAEC,GAAG,EAAE;IAAE,IAAID,EAAE,GAAG,CAAC,EAAE;MAC5NvB,MAAM,CAACyB,WAAW,CAAC,eAAe,EAAED,GAAG,CAACE,UAAU,CAAC,CAAC,YAAY,EAAEF,GAAG,CAAChB,IAAI,KAAK,UAAU,GAAGgB,GAAG,CAACG,KAAK,GAAG,IAAI,CAAC,CAAC,MAAM,EAAEH,GAAG,CAAChB,IAAI,CAAC;IACnI;EAAE,CAAC;EAAEoB,MAAM,EAAE;IAAEC,QAAQ,EAAE,UAAU;IAAEtB,QAAQ,EAAE,UAAU;IAAEC,IAAI,EAAE;EAAO,CAAC;EAAEsB,QAAQ,EAAE,CAAC,aAAa,CAAC;EAAEC,QAAQ,EAAE,CAAC/B,MAAM,CAACgC,kBAAkB,CAAC,CAAC;IAAEC,OAAO,EAAE9D,WAAW;IAAE+D,WAAW,EAAE/B;EAAY,CAAC,CAAC,CAAC,EAAEH,MAAM,CAACmC,0BAA0B;AAAE,CAAC,CAAC;AAC3O;AACAhC,WAAW,CAACiC,cAAc,GAAG,MAAM,CAC/B;EAAEnB,IAAI,EAAEtC;AAAW,CAAC,EACpB;EAAEsC,IAAI,EAAE/C;AAAQ,CAAC,EACjB;EAAE+C,IAAI,EAAEoB,MAAM;EAAEC,UAAU,EAAE,CAAC;IAAErB,IAAI,EAAExC,SAAS;IAAE8D,IAAI,EAAE,CAAC,UAAU;EAAG,CAAC;AAAE,CAAC,CAC3E;AACDpC,WAAW,CAACqC,cAAc,GAAG;EACzBhC,IAAI,EAAE,CAAC;IAAES,IAAI,EAAErC;EAAM,CAAC;AAC1B,CAAC;AACD,CAAC,YAAY;EAAE,CAAC,OAAO6D,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKzC,MAAM,CAAC0C,iBAAiB,CAACvC,WAAW,EAAE,CAAC;IACjGc,IAAI,EAAEvC,SAAS;IACf6D,IAAI,EAAE,CAAC;MACCI,QAAQ,EAAE,eAAe;MACzBb,QAAQ,EAAE,aAAa;MACvBF,MAAM,EAAE,CAAC,UAAU,EAAE,UAAU,CAAC;MAChCgB,IAAI,EAAE;QACF,sBAAsB,EAAE,YAAY;QACpC,mBAAmB,EAAE,oCAAoC;QACzD,aAAa,EAAE,MAAM;QACrB,OAAO,EAAE;MACb,CAAC;MACDC,SAAS,EAAE,CAAC;QAAEZ,OAAO,EAAE9D,WAAW;QAAE+D,WAAW,EAAE/B;MAAY,CAAC;IAClE,CAAC;EACT,CAAC,CAAC,EAAE,YAAY;IAAE,OAAO,CAAC;MAAEc,IAAI,EAAEjB,MAAM,CAACrB;IAAW,CAAC,EAAE;MAAEsC,IAAI,EAAEhB,MAAM,CAAC/B;IAAQ,CAAC,EAAE;MAAE+C,IAAI,EAAEoB,MAAM;MAAEC,UAAU,EAAE,CAAC;QAClGrB,IAAI,EAAExC,SAAS;QACf8D,IAAI,EAAE,CAAC,UAAU;MACrB,CAAC;IAAE,CAAC,CAAC;EAAE,CAAC,EAAE;IAAE/B,IAAI,EAAE,CAAC;MACnBS,IAAI,EAAErC;IACV,CAAC;EAAE,CAAC,CAAC;AAAE,CAAC,GAAG;AACnB;AACA;AACA;AACA;AACA,MAAMkE,cAAc,SAAS1E,cAAc,CAAC;AAE5C0E,cAAc,CAACpC,IAAI,GAAG,aAAc,YAAY;EAAE,IAAIqC,2BAA2B;EAAE,OAAO,SAASC,sBAAsB,CAACpC,CAAC,EAAE;IAAE,OAAO,CAACmC,2BAA2B,KAAKA,2BAA2B,GAAG/C,MAAM,CAACiD,qBAAqB,CAACH,cAAc,CAAC,CAAC,EAAElC,CAAC,IAAIkC,cAAc,CAAC;EAAE,CAAC;AAAE,CAAC,EAAE;AAChRA,cAAc,CAAC/B,IAAI,GAAG,aAAcf,MAAM,CAACgB,iBAAiB,CAAC;EAAEC,IAAI,EAAE6B,cAAc;EAAE5B,SAAS,EAAE,CAAC,CAAC,EAAE,EAAE,gBAAgB,EAAE,EAAE,CAAC,CAAC;EAAEU,MAAM,EAAE;IAAEsB,IAAI,EAAE,CAAC,oBAAoB,EAAE,MAAM,CAAC;IAAEC,IAAI,EAAE,CAAC,aAAa,EAAE,MAAM;EAAE,CAAC;EAAEpB,QAAQ,EAAE,CAAC/B,MAAM,CAACgC,kBAAkB,CAAC,CAAC;IAAEC,OAAO,EAAE7D,cAAc;IAAE8D,WAAW,EAAEY;EAAe,CAAC,CAAC,CAAC,EAAE9C,MAAM,CAACmC,0BAA0B;AAAE,CAAC,CAAC;AACtVW,cAAc,CAACN,cAAc,GAAG;EAC5BW,IAAI,EAAE,CAAC;IAAElC,IAAI,EAAErC,KAAK;IAAE2D,IAAI,EAAE,CAAC,aAAa;EAAG,CAAC;AAClD,CAAC;AACD,CAAC,YAAY;EAAE,CAAC,OAAOE,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKzC,MAAM,CAAC0C,iBAAiB,CAACI,cAAc,EAAE,CAAC;IACpG7B,IAAI,EAAEvC,SAAS;IACf6D,IAAI,EAAE,CAAC;MACCI,QAAQ,EAAE,kBAAkB;MAC5Bf,MAAM,EAAE,CACJ,0BAA0B,CAC7B;MACDiB,SAAS,EAAE,CAAC;QAAEZ,OAAO,EAAE7D,cAAc;QAAE8D,WAAW,EAAEY;MAAe,CAAC;IACxE,CAAC;EACT,CAAC,CAAC,EAAE,IAAI,EAAE;IAAEK,IAAI,EAAE,CAAC;MACXlC,IAAI,EAAErC,KAAK;MACX2D,IAAI,EAAE,CAAC,aAAa;IACxB,CAAC;EAAE,CAAC,CAAC;AAAE,CAAC,GAAG;AACnB;AACA;AACA;AACA;AACA,MAAMa,iBAAiB,SAASnF,iBAAiB,CAAC;EAC9C;AACJ;AACA;AACA;AACA;AACA;EACImC,WAAW,CAACC,WAAW,EAAEC,KAAK,EAAE+C,QAAQ,EAAE9C,QAAQ,EAAE;IAChD,KAAK,CAACF,WAAW,EAAEC,KAAK,EAAE+C,QAAQ,CAAC;IACnC,IAAI,CAAChD,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAAC+C,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB,IAAI,CAAC/C,QAAQ,GAAGE,MAAM,CAACF,QAAQ,CAAC,IAAI,CAAC;EACzC;EACA;AACJ;AACA;AACA;EACI,IAAIsB,QAAQ,GAAG;IAAE,OAAO,IAAI,CAACyB,SAAS;EAAE;EACxC;AACJ;AACA;AACA;EACI,IAAIzB,QAAQ,CAAC0B,KAAK,EAAE;IAAE,IAAI,CAACD,SAAS,GAAG7D,qBAAqB,CAAC8D,KAAK,CAAC;EAAE;EACrE;AACJ;AACA;AACA;EACI,IAAIhD,QAAQ,GAAG;IAAE,OAAO,IAAI,CAACsB,QAAQ,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC2B,SAAS;EAAE;EAC7D;AACJ;AACA;AACA;EACI,IAAIjD,QAAQ,CAACgD,KAAK,EAAE;IAChB;IACA,IAAI,CAACC,SAAS,GAAGD,KAAK,IAAI,IAAI,GAAGA,KAAK,GAAG,CAAC;EAC9C;EACA;EACA;EACA;EACA;AACJ;AACA;EACIE,kBAAkB,GAAG;IACjB,KAAK,CAACA,kBAAkB,EAAE;EAC9B;EACA;AACJ;AACA;EACIC,WAAW,GAAG;IACV,KAAK,CAACA,WAAW,EAAE;EACvB;AACJ;AACAN,iBAAiB,CAAC1C,IAAI,GAAG,SAASiD,yBAAyB,CAAC/C,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAIwC,iBAAiB,EAAEpD,MAAM,CAACa,iBAAiB,CAACb,MAAM,CAACrB,UAAU,CAAC,EAAEqB,MAAM,CAACa,iBAAiB,CAACZ,MAAM,CAAC/B,OAAO,CAAC,EAAE8B,MAAM,CAACa,iBAAiB,CAACb,MAAM,CAACnB,eAAe,CAAC,EAAEmB,MAAM,CAACc,iBAAiB,CAAC,UAAU,CAAC,CAAC;AAAE,CAAC;AACtRsC,iBAAiB,CAACrC,IAAI,GAAG,aAAcf,MAAM,CAACgB,iBAAiB,CAAC;EAAEC,IAAI,EAAEmC,iBAAiB;EAAElC,SAAS,EAAE,CAAC,CAAC,sBAAsB,CAAC,CAAC;EAAEC,SAAS,EAAE,CAAC,CAAC,EAAE,sBAAsB,CAAC;EAAEC,QAAQ,EAAE,CAAC;EAAEC,YAAY,EAAE,SAASuC,8BAA8B,CAACrC,EAAE,EAAEC,GAAG,EAAE;IAAE,IAAID,EAAE,GAAG,CAAC,EAAE;MAC5PvB,MAAM,CAACyB,WAAW,CAAC,eAAe,EAAED,GAAG,CAACE,UAAU,CAAC,CAAC,MAAM,EAAEF,GAAG,CAAChB,IAAI,CAAC;IACzE;EAAE,CAAC;EAAEoB,MAAM,EAAE;IAAErB,QAAQ,EAAE,UAAU;IAAEsB,QAAQ,EAAE,UAAU;IAAEgC,IAAI,EAAE,CAAC,mBAAmB,EAAE,MAAM;EAAE,CAAC;EAAE/B,QAAQ,EAAE,CAAC,mBAAmB,CAAC;EAAEC,QAAQ,EAAE,CAAC/B,MAAM,CAACgC,kBAAkB,CAAC,CAChK;IAAEC,OAAO,EAAEhE,iBAAiB;IAAEiE,WAAW,EAAEkB;EAAkB,CAAC,EAC9D;IAAEnB,OAAO,EAAE9D,WAAW;IAAE+D,WAAW,EAAEkB;EAAkB,CAAC,EACxD;IAAEnB,OAAO,EAAEjE,yBAAyB;IAAEkE,WAAW,EAAEkB;EAAkB,CAAC,CACzE,CAAC,EAAEpD,MAAM,CAACmC,0BAA0B;AAAE,CAAC,CAAC;AACjD;AACAiB,iBAAiB,CAAChB,cAAc,GAAG,MAAM,CACrC;EAAEnB,IAAI,EAAEtC;AAAW,CAAC,EACpB;EAAEsC,IAAI,EAAE/C;AAAQ,CAAC,EACjB;EAAE+C,IAAI,EAAEpC;AAAgB,CAAC,EACzB;EAAEoC,IAAI,EAAEoB,MAAM;EAAEC,UAAU,EAAE,CAAC;IAAErB,IAAI,EAAExC,SAAS;IAAE8D,IAAI,EAAE,CAAC,UAAU;EAAG,CAAC;AAAE,CAAC,CAC3E;AACDa,iBAAiB,CAACZ,cAAc,GAAG;EAC/BqB,IAAI,EAAE,CAAC;IAAE5C,IAAI,EAAErC,KAAK;IAAE2D,IAAI,EAAE,CAAC,mBAAmB;EAAG,CAAC,CAAC;EACrDV,QAAQ,EAAE,CAAC;IAAEZ,IAAI,EAAErC;EAAM,CAAC,CAAC;EAC3B2B,QAAQ,EAAE,CAAC;IAAEU,IAAI,EAAErC;EAAM,CAAC;AAC9B,CAAC;AACD,CAAC,YAAY;EAAE,CAAC,OAAO6D,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKzC,MAAM,CAAC0C,iBAAiB,CAACU,iBAAiB,EAAE,CAAC;IACvGnC,IAAI,EAAEvC,SAAS;IACf6D,IAAI,EAAE,CAAC;MACCI,QAAQ,EAAE,sBAAsB;MAChCb,QAAQ,EAAE,mBAAmB;MAC7Bc,IAAI,EAAE;QACF,sBAAsB,EAAE,YAAY;QACpC,aAAa,EAAE,MAAM;QACrB,OAAO,EAAE;MACb,CAAC;MACDC,SAAS,EAAE,CACP;QAAEZ,OAAO,EAAEhE,iBAAiB;QAAEiE,WAAW,EAAEkB;MAAkB,CAAC,EAC9D;QAAEnB,OAAO,EAAE9D,WAAW;QAAE+D,WAAW,EAAEkB;MAAkB,CAAC,EACxD;QAAEnB,OAAO,EAAEjE,yBAAyB;QAAEkE,WAAW,EAAEkB;MAAkB,CAAC;IAE9E,CAAC;EACT,CAAC,CAAC,EAAE,YAAY;IAAE,OAAO,CAAC;MAAEnC,IAAI,EAAEjB,MAAM,CAACrB;IAAW,CAAC,EAAE;MAAEsC,IAAI,EAAEhB,MAAM,CAAC/B;IAAQ,CAAC,EAAE;MAAE+C,IAAI,EAAEjB,MAAM,CAACnB;IAAgB,CAAC,EAAE;MAAEoC,IAAI,EAAEoB,MAAM;MAAEC,UAAU,EAAE,CAAC;QACpIrB,IAAI,EAAExC,SAAS;QACf8D,IAAI,EAAE,CAAC,UAAU;MACrB,CAAC;IAAE,CAAC,CAAC;EAAE,CAAC,EAAE;IAAEhC,QAAQ,EAAE,CAAC;MACvBU,IAAI,EAAErC;IACV,CAAC,CAAC;IAAEiD,QAAQ,EAAE,CAAC;MACXZ,IAAI,EAAErC;IACV,CAAC,CAAC;IAAEiF,IAAI,EAAE,CAAC;MACP5C,IAAI,EAAErC,KAAK;MACX2D,IAAI,EAAE,CAAC,mBAAmB;IAC9B,CAAC;EAAE,CAAC,CAAC;AAAE,CAAC,GAAG;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMuB,kBAAkB,SAASzF,kBAAkB,CAAC;AAEpDyF,kBAAkB,CAACpD,IAAI,GAAG,aAAc,YAAY;EAAE,IAAIqD,+BAA+B;EAAE,OAAO,SAASC,0BAA0B,CAACpD,CAAC,EAAE;IAAE,OAAO,CAACmD,+BAA+B,KAAKA,+BAA+B,GAAG/D,MAAM,CAACiD,qBAAqB,CAACa,kBAAkB,CAAC,CAAC,EAAElD,CAAC,IAAIkD,kBAAkB,CAAC;EAAE,CAAC;AAAE,CAAC,EAAE;AAC5SA,kBAAkB,CAAC/C,IAAI,GAAG,aAAcf,MAAM,CAACgB,iBAAiB,CAAC;EAAEC,IAAI,EAAE6C,kBAAkB;EAAE5C,SAAS,EAAE,CAAC,CAAC,EAAE,EAAE,oBAAoB,EAAE,EAAE,CAAC,CAAC;EAAEU,MAAM,EAAE;IAAED,KAAK,EAAE,CAAC,oBAAoB,EAAE,OAAO,CAAC;IAAEsC,MAAM,EAAE,CAAC,0BAA0B,EAAE,QAAQ;EAAE,CAAC;EAAElC,QAAQ,EAAE,CAAC/B,MAAM,CAACgC,kBAAkB,CAAC,CAAC;IAAEC,OAAO,EAAE5D,kBAAkB;IAAE6D,WAAW,EAAE4B;EAAmB,CAAC,CAAC,CAAC,EAAE9D,MAAM,CAACmC,0BAA0B;AAAE,CAAC,CAAC;AAC7X2B,kBAAkB,CAACtB,cAAc,GAAG;EAChCb,KAAK,EAAE,CAAC;IAAEV,IAAI,EAAErC,KAAK;IAAE2D,IAAI,EAAE,CAAC,oBAAoB;EAAG,CAAC,CAAC;EACvD0B,MAAM,EAAE,CAAC;IAAEhD,IAAI,EAAErC,KAAK;IAAE2D,IAAI,EAAE,CAAC,0BAA0B;EAAG,CAAC;AACjE,CAAC;AACD,CAAC,YAAY;EAAE,CAAC,OAAOE,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKzC,MAAM,CAAC0C,iBAAiB,CAACoB,kBAAkB,EAAE,CAAC;IACxG7C,IAAI,EAAEvC,SAAS;IACf6D,IAAI,EAAE,CAAC;MACCI,QAAQ,EAAE,sBAAsB;MAChCE,SAAS,EAAE,CAAC;QAAEZ,OAAO,EAAE5D,kBAAkB;QAAE6D,WAAW,EAAE4B;MAAmB,CAAC;IAChF,CAAC;EACT,CAAC,CAAC,EAAE,IAAI,EAAE;IAAEnC,KAAK,EAAE,CAAC;MACZV,IAAI,EAAErC,KAAK;MACX2D,IAAI,EAAE,CAAC,oBAAoB;IAC/B,CAAC,CAAC;IAAE0B,MAAM,EAAE,CAAC;MACThD,IAAI,EAAErC,KAAK;MACX2D,IAAI,EAAE,CAAC,0BAA0B;IACrC,CAAC;EAAE,CAAC,CAAC;AAAE,CAAC,GAAG;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM2B,iBAAiB,CAAC;EACpB;AACJ;AACA;AACA;EACI9D,WAAW,CAAC+D,aAAa,EAAEC,KAAK,EAAE;IAC9B,IAAI,CAACD,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,KAAK,GAAGA,KAAK;EACtB;AACJ;AACAF,iBAAiB,CAACxD,IAAI,GAAG,SAAS2D,yBAAyB,CAACzD,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAIsD,iBAAiB,EAAElE,MAAM,CAACa,iBAAiB,CAACb,MAAM,CAAChB,gBAAgB,CAAC,EAAEgB,MAAM,CAACa,iBAAiB,CAAC7C,yBAAyB,EAAE,CAAC,CAAC,CAAC;AAAE,CAAC;AAClNkG,iBAAiB,CAACnD,IAAI,GAAG,aAAcf,MAAM,CAACgB,iBAAiB,CAAC;EAAEC,IAAI,EAAEiD,iBAAiB;EAAEhD,SAAS,EAAE,CAAC,CAAC,EAAE,EAAE,mBAAmB,EAAE,EAAE,CAAC,CAAC;EAAEa,QAAQ,EAAE,CAAC/B,MAAM,CAACgC,kBAAkB,CAAC,CAAC;IAC7JC,OAAO,EAAE3D,iBAAiB;IAC1B4D,WAAW,EAAEgC;EACjB,CAAC,CAAC,CAAC;AAAE,CAAC,CAAC;AACnB;AACAA,iBAAiB,CAAC9B,cAAc,GAAG,MAAM,CACrC;EAAEnB,IAAI,EAAEjC;AAAiB,CAAC,EAC1B;EAAEiC,IAAI,EAAEqD,SAAS;EAAEhC,UAAU,EAAE,CAAC;IAAErB,IAAI,EAAEnC,MAAM;IAAEyD,IAAI,EAAE,CAACvE,yBAAyB;EAAG,CAAC,EAAE;IAAEiD,IAAI,EAAElC;EAAS,CAAC;AAAE,CAAC,CAC9G;AACD,CAAC,YAAY;EAAE,CAAC,OAAO0D,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKzC,MAAM,CAAC0C,iBAAiB,CAACwB,iBAAiB,EAAE,CAAC;IACvGjD,IAAI,EAAEvC,SAAS;IACf6D,IAAI,EAAE,CAAC;MACCI,QAAQ,EAAE,qBAAqB;MAC/BE,SAAS,EAAE,CAAC;QACJZ,OAAO,EAAE3D,iBAAiB;QAC1B4D,WAAW,EAAEgC;MACjB,CAAC;IACT,CAAC;EACT,CAAC,CAAC,EAAE,YAAY;IAAE,OAAO,CAAC;MAAEjD,IAAI,EAAEjB,MAAM,CAAChB;IAAiB,CAAC,EAAE;MAAEiC,IAAI,EAAEqD,SAAS;MAAEhC,UAAU,EAAE,CAAC;QACjFrB,IAAI,EAAEnC,MAAM;QACZyD,IAAI,EAAE,CAACvE,yBAAyB;MACpC,CAAC,EAAE;QACCiD,IAAI,EAAElC;MACV,CAAC;IAAE,CAAC,CAAC;EAAE,CAAC,EAAE,IAAI,CAAC;AAAE,CAAC,GAAG;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMwF,OAAO,SAASrG,OAAO,CAAC;AAE9BqG,OAAO,CAAC7D,IAAI,GAAG,aAAc,YAAY;EAAE,IAAI8D,oBAAoB;EAAE,OAAO,SAASC,eAAe,CAAC7D,CAAC,EAAE;IAAE,OAAO,CAAC4D,oBAAoB,KAAKA,oBAAoB,GAAGxE,MAAM,CAACiD,qBAAqB,CAACsB,OAAO,CAAC,CAAC,EAAE3D,CAAC,IAAI2D,OAAO,CAAC;EAAE,CAAC;AAAE,CAAC,EAAE;AAC/NA,OAAO,CAACG,IAAI,GAAG,aAAc1E,MAAM,CAAC2E,iBAAiB,CAAC;EAAE1D,IAAI,EAAEsD,OAAO;EAAErD,SAAS,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC;EAAE0D,SAAS,EAAE,SAASC,aAAa,CAACtD,EAAE,EAAEC,GAAG,EAAE;IAAE,IAAID,EAAE,GAAG,CAAC,EAAE;MACnJvB,MAAM,CAAC8E,WAAW,CAACZ,iBAAiB,EAAE,CAAC,CAAC;IAC5C;IAAE,IAAI3C,EAAE,GAAG,CAAC,EAAE;MACV,IAAIwD,EAAE;MACN/E,MAAM,CAACgF,cAAc,CAACD,EAAE,GAAG/E,MAAM,CAACiF,WAAW,EAAE,CAAC,KAAKzD,GAAG,CAAC0D,WAAW,GAAGH,EAAE,CAACI,KAAK,CAAC;IACpF;EAAE,CAAC;EAAEhE,SAAS,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,CAAC,EAAE,UAAU,CAAC;EAAEW,QAAQ,EAAE,CAAC,SAAS,CAAC;EAAEC,QAAQ,EAAE,CAAC/B,MAAM,CAACgC,kBAAkB,CAAC,CAAC;IAAEC,OAAO,EAAE/D,OAAO;IAAEgE,WAAW,EAAEqC;EAAQ,CAAC,CAAC,CAAC,EAAEvE,MAAM,CAACmC,0BAA0B,CAAC;EAAEiD,KAAK,EAAE,CAAC;EAAEC,IAAI,EAAE,CAAC;EAAEC,MAAM,EAAE,CAAC,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAAC;EAAEC,QAAQ,EAAE,SAASC,gBAAgB,CAACjE,EAAE,EAAEC,GAAG,EAAE;IAAE,IAAID,EAAE,GAAG,CAAC,EAAE;MAC/SvB,MAAM,CAACyF,kBAAkB,CAAC,CAAC,EAAE,CAAC,CAAC;IACnC;EAAE,CAAC;EAAEC,YAAY,EAAE,CAACxB,iBAAiB,CAAC;EAAEyB,MAAM,EAAE,CAAC,iLAAiL,CAAC;EAAEC,aAAa,EAAE;AAAE,CAAC,CAAC;AAC5PrB,OAAO,CAAC/B,cAAc,GAAG;EACrB0C,WAAW,EAAE,CAAC;IAAEjE,IAAI,EAAE9B,SAAS;IAAEoD,IAAI,EAAE,CAAC2B,iBAAiB,EAAE;MAAE2B,MAAM,EAAE;IAAK,CAAC;EAAG,CAAC;AACnF,CAAC;AACD,CAAC,YAAY;EAAE,CAAC,OAAOpD,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKzC,MAAM,CAAC0C,iBAAiB,CAAC6B,OAAO,EAAE,CAAC;IAC7FtD,IAAI,EAAE/B,SAAS;IACfqD,IAAI,EAAE,CAAC;MAAEI,QAAQ,EAAE,UAAU;MAAEb,QAAQ,EAAE,SAAS;MAAEyD,QAAQ,EAAG,iDAAgD;MAAE3C,IAAI,EAAE;QAC3G,OAAO,EAAE,UAAU;QACnB,MAAM,EAAE;MACZ,CAAC;MAAEgD,aAAa,EAAExG,iBAAiB,CAAC0G,IAAI;MAAEC,eAAe,EAAE9G,uBAAuB,CAAC+G,OAAO;MAAEnD,SAAS,EAAE,CAAC;QAAEZ,OAAO,EAAE/D,OAAO;QAAEgE,WAAW,EAAEqC;MAAQ,CAAC,CAAC;MAAEoB,MAAM,EAAE,CAAC,iLAAiL;IAAE,CAAC;EAC9V,CAAC,CAAC,EAAE,IAAI,EAAE;IAAET,WAAW,EAAE,CAAC;MAClBjE,IAAI,EAAE9B,SAAS;MACfoD,IAAI,EAAE,CAAC2B,iBAAiB,EAAE;QAAE2B,MAAM,EAAE;MAAK,CAAC;IAC9C,CAAC;EAAE,CAAC,CAAC;AAAE,CAAC,GAAG;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,iBAAiB,SAAS1H,iBAAiB,CAAC;EAC9C6B,WAAW,GAAG;IACV,KAAK,CAAC,GAAG8F,SAAS,CAAC;IACnB,IAAI,CAACC,SAAS,GAAG,KAAK;EAC1B;AACJ;AACAF,iBAAiB,CAACvF,IAAI,GAAG,aAAc,YAAY;EAAE,IAAI0F,8BAA8B;EAAE,OAAO,SAASC,yBAAyB,CAACzF,CAAC,EAAE;IAAE,OAAO,CAACwF,8BAA8B,KAAKA,8BAA8B,GAAGpG,MAAM,CAACiD,qBAAqB,CAACgD,iBAAiB,CAAC,CAAC,EAAErF,CAAC,IAAIqF,iBAAiB,CAAC;EAAE,CAAC;AAAE,CAAC,EAAE;AACrSA,iBAAiB,CAAClF,IAAI,GAAG,aAAcf,MAAM,CAACgB,iBAAiB,CAAC;EAAEC,IAAI,EAAEgF,iBAAiB;EAAE/E,SAAS,EAAE,CAAC,CAAC,EAAE,EAAE,mBAAmB,EAAE,EAAE,CAAC,CAAC;EAAEU,MAAM,EAAE;IAAEuE,SAAS,EAAE,CAAC,4BAA4B,EAAE,WAAW;EAAE,CAAC;EAAEpE,QAAQ,EAAE,CAAC/B,MAAM,CAACgC,kBAAkB,CAAC,CAAC;IAAEC,OAAO,EAAE1D,iBAAiB;IAAE2D,WAAW,EAAE+D;EAAkB,CAAC,CAAC,CAAC,EAAEjG,MAAM,CAACmC,0BAA0B;AAAE,CAAC,CAAC;AACxV8D,iBAAiB,CAACzD,cAAc,GAAG;EAC/B2D,SAAS,EAAE,CAAC;IAAElF,IAAI,EAAErC,KAAK;IAAE2D,IAAI,EAAE,CAAC,4BAA4B;EAAG,CAAC;AACtE,CAAC;AACD,CAAC,YAAY;EAAE,CAAC,OAAOE,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKzC,MAAM,CAAC0C,iBAAiB,CAACuD,iBAAiB,EAAE,CAAC;IACvGhF,IAAI,EAAEvC,SAAS;IACf6D,IAAI,EAAE,CAAC;MACCI,QAAQ,EAAE,qBAAqB;MAC/BE,SAAS,EAAE,CAAC;QAAEZ,OAAO,EAAE1D,iBAAiB;QAAE2D,WAAW,EAAE+D;MAAkB,CAAC;IAC9E,CAAC;EACT,CAAC,CAAC,EAAE,IAAI,EAAE;IAAEE,SAAS,EAAE,CAAC;MAChBlF,IAAI,EAAErC,KAAK;MACX2D,IAAI,EAAE,CAAC,4BAA4B;IACvC,CAAC;EAAE,CAAC,CAAC;AAAE,CAAC,GAAG;;AAEnB;AACA;AACA;AACA;AACA;AACA,MAAM+D,mBAAmB,GAAG,CACxBlD,iBAAiB,EACjBN,cAAc,EACdgB,kBAAkB,EAClBmC,iBAAiB,EACjB1B,OAAO,EACPpE,WAAW,EACX+D,iBAAiB,CACpB;AACD,MAAMqC,aAAa,CAAC;AAEpBA,aAAa,CAAC7F,IAAI,GAAG,SAAS8F,qBAAqB,CAAC5F,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAI2F,aAAa,GAAG;AAAE,CAAC;AAC7FA,aAAa,CAACE,IAAI,GAAG,aAAczG,MAAM,CAAC0G,gBAAgB,CAAC;EAAEzF,IAAI,EAAEsF;AAAc,CAAC,CAAC;AACnFA,aAAa,CAACI,IAAI,GAAG,aAAc3G,MAAM,CAAC4G,gBAAgB,CAAC;EAAEC,OAAO,EAAE,CAACrI,aAAa,EAAEkB,YAAY,EAAEF,eAAe;AAAE,CAAC,CAAC;AACvH,CAAC,YAAY;EAAE,CAAC,OAAOiD,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKzC,MAAM,CAAC0C,iBAAiB,CAAC6D,aAAa,EAAE,CAAC;IACnGtF,IAAI,EAAE5B,QAAQ;IACdkD,IAAI,EAAE,CAAC;MACCsE,OAAO,EAAE,CAACrI,aAAa,EAAEkB,YAAY,EAAEF,eAAe,CAAC;MACvDsH,OAAO,EAAER,mBAAmB;MAC5BS,YAAY,EAAET;IAClB,CAAC;EACT,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC;AAAE,CAAC,GAAG;AACzB,CAAC,YAAY;EAAE,CAAC,OAAOU,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKhH,MAAM,CAACiH,kBAAkB,CAACV,aAAa,EAAE;IAAEQ,YAAY,EAAE,YAAY;MAAE,OAAO,CAAC3D,iBAAiB,EAAEN,cAAc,EAAEgB,kBAAkB,EAAEmC,iBAAiB,EAAE1B,OAAO,EAAEpE,WAAW,EAAE+D,iBAAiB,CAAC;IAAE,CAAC;IAAE2C,OAAO,EAAE,YAAY;MAAE,OAAO,CAACrI,aAAa,EAAEkB,YAAY,EAAEF,eAAe,CAAC;IAAE,CAAC;IAAEsH,OAAO,EAAE,YAAY;MAAE,OAAO,CAAC1D,iBAAiB,EAAEN,cAAc,EAAEgB,kBAAkB,EAAEmC,iBAAiB,EAAE1B,OAAO,EAAEpE,WAAW,EAAE+D,iBAAiB,CAAC;IAAE;EAAE,CAAC,CAAC;AAAE,CAAC,GAAG;;AAEtf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMgD,gBAAgB,CAAC;EACnB;AACJ;AACA;AACA;AACA;AACA;EACI9G,WAAW,CAAC+G,iBAAiB,EAAEC,QAAQ,EAAEC,YAAY,EAAEC,WAAW,EAAE;IAChE,IAAI,CAACH,iBAAiB,GAAGA,iBAAiB;IAC1C,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,WAAW,GAAGA,WAAW;EAClC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,YAAY,CAAC1D,IAAI,EAAElC,KAAK,EAAE6F,WAAW,EAAEC,SAAS,EAAE;IAC9C;IACA,MAAMC,QAAQ,GAAG,IAAI,CAACP,iBAAiB,CAACtD,IAAI,EAAElC,KAAK,CAAC;IACpD6F,WAAW,CAACG,IAAI,CAACD,QAAQ,CAAC;IAC1B,IAAI,IAAI,CAACL,YAAY,CAACK,QAAQ,CAAC,EAAE;MAC7B;MACA,MAAME,aAAa,GAAG,IAAI,CAACN,WAAW,CAACzD,IAAI,CAAC;MAC5C,IAAI+D,aAAa,EAAE;QACf,IAAIC,KAAK,CAACC,OAAO,CAACF,aAAa,CAAC,EAAE;UAC9B,IAAI,CAACG,gBAAgB,CAACH,aAAa,EAAEjG,KAAK,EAAE6F,WAAW,EAAEC,SAAS,CAAC;QACvE,CAAC,MACI;UACDG,aAAa,CAACI,IAAI,CAACjI,IAAI,CAAC,CAAC,CAAC,CAAC,CAACkI,SAAS;UAAE;AAC3D;AACA;AACA;UACoBC,QAAQ,IAAI;YACR,IAAI,CAACH,gBAAgB,CAACG,QAAQ,EAAEvG,KAAK,EAAE6F,WAAW,EAAEC,SAAS,CAAC;UAClE,CAAC,CAAE;QACP;MACJ;IACJ;IACA,OAAOD,WAAW;EACtB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIO,gBAAgB,CAACG,QAAQ,EAAEvG,KAAK,EAAE6F,WAAW,EAAEC,SAAS,EAAE;IACtDS,QAAQ,CAACC,OAAO;IAAE;AAC1B;AACA;AACA;AACA;IACQ,CAACC,KAAK,EAAEC,KAAK,KAAK;MACd;MACA,IAAIC,cAAc,GAAGb,SAAS,CAACc,KAAK,EAAE;MACtCD,cAAc,CAACX,IAAI,CAACU,KAAK,IAAIH,QAAQ,CAACM,MAAM,GAAG,CAAC,CAAC;MACjD,IAAI,CAACjB,YAAY,CAACa,KAAK,EAAEzG,KAAK,GAAG,CAAC,EAAE6F,WAAW,EAAEc,cAAc,CAAC;IACpE,CAAC,CAAE;EACP;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIG,YAAY,CAACC,cAAc,EAAE;IACzB;IACA,IAAIlB,WAAW,GAAG,EAAE;IACpBkB,cAAc,CAACP,OAAO;IAAE;AAChC;AACA;AACA;IACQtE,IAAI,IAAI,IAAI,CAAC0D,YAAY,CAAC1D,IAAI,EAAE,CAAC,EAAE2D,WAAW,EAAE,EAAE,CAAC,CAAE;IACrD,OAAOA,WAAW;EACtB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACImB,oBAAoB,CAACC,KAAK,EAAEC,WAAW,EAAE;IACrC;IACA,IAAIC,OAAO,GAAG,EAAE;IAChB;IACA,IAAIC,aAAa,GAAG,EAAE;IACtBA,aAAa,CAAC,CAAC,CAAC,GAAG,IAAI;IACvBH,KAAK,CAACT,OAAO;IAAE;AACvB;AACA;AACA;IACQtE,IAAI,IAAI;MACJ;MACA,IAAImF,MAAM,GAAG,IAAI;MACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,IAAI,CAAC7B,QAAQ,CAACvD,IAAI,CAAC,EAAEoF,CAAC,EAAE,EAAE;QAC3CD,MAAM,GAAGA,MAAM,IAAID,aAAa,CAACE,CAAC,CAAC;MACvC;MACA,IAAID,MAAM,EAAE;QACRF,OAAO,CAACnB,IAAI,CAAC9D,IAAI,CAAC;MACtB;MACA,IAAI,IAAI,CAACwD,YAAY,CAACxD,IAAI,CAAC,EAAE;QACzBkF,aAAa,CAAC,IAAI,CAAC3B,QAAQ,CAACvD,IAAI,CAAC,GAAG,CAAC,CAAC,GAAGgF,WAAW,CAACnH,UAAU,CAACmC,IAAI,CAAC;MACzE;IACJ,CAAC,CAAE;IACH,OAAOiF,OAAO;EAClB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,qBAAqB,SAASvJ,UAAU,CAAC;EAC3C;AACJ;AACA;AACA;AACA;EACIS,WAAW,CAAC+I,YAAY,EAAEC,cAAc,EAAEC,WAAW,GAAG,EAAE,EAAE;IACxD,KAAK,EAAE;IACP,IAAI,CAACF,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACE,cAAc,GAAG,IAAI1J,eAAe,CAAC,EAAE,CAAC;IAC7C,IAAI,CAAC2J,aAAa,GAAG,IAAI3J,eAAe,CAAC,EAAE,CAAC;IAC5C,IAAI,CAAC4J,KAAK,GAAG,IAAI5J,eAAe,CAACyJ,WAAW,CAAC;EACjD;EACA;AACJ;AACA;EACI,IAAIlG,IAAI,GAAG;IAAE,OAAO,IAAI,CAACqG,KAAK,CAACjG,KAAK;EAAE;EACtC;AACJ;AACA;AACA;EACI,IAAIJ,IAAI,CAACI,KAAK,EAAE;IACZ,IAAI,CAACiG,KAAK,CAACC,IAAI,CAAClG,KAAK,CAAC;IACtB,IAAI,CAAC+F,cAAc,CAACG,IAAI,CAAC,IAAI,CAACL,cAAc,CAACX,YAAY,CAAC,IAAI,CAACtF,IAAI,CAAC,CAAC;IACrE,IAAI,CAACgG,YAAY,CAACO,SAAS,GAAG,IAAI,CAACJ,cAAc,CAAC/F,KAAK;EAC3D;EACA;AACJ;AACA;AACA;EACIoG,OAAO,CAACC,gBAAgB,EAAE;IACtB;IACA,MAAMC,OAAO,GAAG,CACZD,gBAAgB,CAACE,UAAU,EAC3B,IAAI,CAACX,YAAY,CAACY,cAAc,CAACC,QAAQ,EACzC,IAAI,CAACV,cAAc,CACtB;IACD,OAAOzJ,KAAK,CAAC,GAAGgK,OAAO,CAAC,CAAC7B,IAAI,CAAClI,GAAG;IAAE;AAC3C;AACA;IACQ,MAAM;MACF,IAAI,CAACyJ,aAAa,CAACE,IAAI,CAAC,IAAI,CAACL,cAAc,CAACT,oBAAoB,CAAC,IAAI,CAACW,cAAc,CAAC/F,KAAK,EAAE,IAAI,CAAC4F,YAAY,CAAC,CAAC;MAC/G,OAAO,IAAI,CAACI,aAAa,CAAChG,KAAK;IACnC,CAAC,CAAE,CAAC;EACR;EACA;AACJ;AACA;EACI0G,UAAU,GAAG;IACT;EAAA;AAER;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,uBAAuB,SAASvK,UAAU,CAAC;EAC7CS,WAAW,GAAG;IACV,KAAK,CAAC,GAAG8F,SAAS,CAAC;IACnB,IAAI,CAACsD,KAAK,GAAG,IAAI5J,eAAe,CAAC,EAAE,CAAC;EACxC;EACA;AACJ;AACA;AACA;EACI,IAAIuD,IAAI,GAAG;IAAE,OAAO,IAAI,CAACqG,KAAK,CAACjG,KAAK;EAAE;EACtC;AACJ;AACA;AACA;EACI,IAAIJ,IAAI,CAACI,KAAK,EAAE;IAAE,IAAI,CAACiG,KAAK,CAACC,IAAI,CAAClG,KAAK,CAAC;EAAE;EAC1C;AACJ;AACA;AACA;EACIoG,OAAO,CAACC,gBAAgB,EAAE;IACtB,OAAO/J,KAAK,CAAC,GAAG,CAAC+J,gBAAgB,CAACE,UAAU,EAAE,IAAI,CAACN,KAAK,CAAC,CAAC,CACrDxB,IAAI,CAAClI,GAAG;IAAE;AACvB;AACA;IACQ,MAAM;MACF,OAAO,IAAI,CAACqD,IAAI;IACpB,CAAC,CAAE,CAAC;EACR;EACA;AACJ;AACA;EACI8G,UAAU,GAAG;IACT;EAAA;AAER;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,SAAS9J,WAAW,EAAE2C,cAAc,EAAEM,iBAAiB,EAAEU,kBAAkB,EAAES,OAAO,EAAEgC,aAAa,EAAEN,iBAAiB,EAAE/B,iBAAiB,EAAEgD,gBAAgB,EAAEgC,qBAAqB,EAAEgB,uBAAuB"},"metadata":{},"sourceType":"module","externalDependencies":[]}