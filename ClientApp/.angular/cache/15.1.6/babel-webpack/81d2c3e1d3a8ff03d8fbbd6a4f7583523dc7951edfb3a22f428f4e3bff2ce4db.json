{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Component, ViewEncapsulation, ElementRef, Input, Optional, ContentChildren, Directive, ChangeDetectionStrategy, Inject, NgModule } from '@angular/core';\nimport { MatLine, setLines, MatLineModule, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * \\@docs-private\n * @type {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nconst _c0 = [\"*\"];\nconst _c1 = [[[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]], \"*\"];\nconst _c2 = [\"[mat-grid-avatar], [matGridAvatar]\", \"[mat-line], [matLine]\", \"*\"];\nconst _c3 = \".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\";\nconst MAT_GRID_LIST = new InjectionToken('MAT_GRID_LIST');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatGridTile {\n  /**\n   * @param {?} _element\n   * @param {?=} _gridList\n   */\n  constructor(_element, _gridList) {\n    this._element = _element;\n    this._gridList = _gridList;\n    this._rowspan = 1;\n    this._colspan = 1;\n  }\n  /**\n   * Amount of rows that the grid tile takes up.\n   * @return {?}\n   */\n  get rowspan() {\n    return this._rowspan;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set rowspan(value) {\n    this._rowspan = Math.round(coerceNumberProperty(value));\n  }\n  /**\n   * Amount of columns that the grid tile takes up.\n   * @return {?}\n   */\n  get colspan() {\n    return this._colspan;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set colspan(value) {\n    this._colspan = Math.round(coerceNumberProperty(value));\n  }\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   * @param {?} property\n   * @param {?} value\n   * @return {?}\n   */\n  _setStyle(property, value) {\n    /** @type {?} */this._element.nativeElement.style[property] = value;\n  }\n}\nMatGridTile.ɵfac = function MatGridTile_Factory(t) {\n  return new (t || MatGridTile)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_GRID_LIST, 8));\n};\nMatGridTile.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatGridTile,\n  selectors: [[\"mat-grid-tile\"]],\n  hostAttrs: [1, \"mat-grid-tile\"],\n  inputs: {\n    rowspan: \"rowspan\",\n    colspan: \"colspan\"\n  },\n  exportAs: [\"matGridTile\"],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"mat-figure\"]],\n  template: function MatGridTile_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"figure\", 0);\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  styles: [_c3],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\nMatGridTile.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_GRID_LIST]\n  }]\n}];\nMatGridTile.propDecorators = {\n  rowspan: [{\n    type: Input\n  }],\n  colspan: [{\n    type: Input\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTile, [{\n    type: Component,\n    args: [{\n      selector: 'mat-grid-tile',\n      exportAs: 'matGridTile',\n      host: {\n        'class': 'mat-grid-tile'\n      },\n      template: \"<figure class=\\\"mat-figure\\\"><ng-content></ng-content></figure>\",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_GRID_LIST]\n      }]\n    }];\n  }, {\n    rowspan: [{\n      type: Input\n    }],\n    colspan: [{\n      type: Input\n    }]\n  });\n})();\nclass MatGridTileText {\n  /**\n   * @param {?} _element\n   */\n  constructor(_element) {\n    this._element = _element;\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\nMatGridTileText.ɵfac = function MatGridTileText_Factory(t) {\n  return new (t || MatGridTileText)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\nMatGridTileText.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatGridTileText,\n  selectors: [[\"mat-grid-tile-header\"], [\"mat-grid-tile-footer\"]],\n  contentQueries: function MatGridTileText_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatLine, 4);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lines = _t);\n    }\n  },\n  ngContentSelectors: _c2,\n  decls: 4,\n  vars: 0,\n  consts: [[1, \"mat-grid-list-text\"]],\n  template: function MatGridTileText_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c1);\n      ɵngcc0.ɵɵprojection(0);\n      ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n      ɵngcc0.ɵɵprojection(2, 1);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵprojection(3, 2);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\nMatGridTileText.ctorParameters = () => [{\n  type: ElementRef\n}];\nMatGridTileText.propDecorators = {\n  _lines: [{\n    type: ContentChildren,\n    args: [MatLine]\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileText, [{\n    type: Component,\n    args: [{\n      selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n      template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content><div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div><ng-content></ng-content>\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, {\n    _lines: [{\n      type: ContentChildren,\n      args: [MatLine]\n    }]\n  });\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatGridAvatarCssMatStyler {}\nMatGridAvatarCssMatStyler.ɵfac = function MatGridAvatarCssMatStyler_Factory(t) {\n  return new (t || MatGridAvatarCssMatStyler)();\n};\nMatGridAvatarCssMatStyler.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatGridAvatarCssMatStyler,\n  selectors: [[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]],\n  hostAttrs: [1, \"mat-grid-avatar\"]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridAvatarCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-grid-avatar], [matGridAvatar]',\n      host: {\n        'class': 'mat-grid-avatar'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatGridTileHeaderCssMatStyler {}\nMatGridTileHeaderCssMatStyler.ɵfac = function MatGridTileHeaderCssMatStyler_Factory(t) {\n  return new (t || MatGridTileHeaderCssMatStyler)();\n};\nMatGridTileHeaderCssMatStyler.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatGridTileHeaderCssMatStyler,\n  selectors: [[\"mat-grid-tile-header\"]],\n  hostAttrs: [1, \"mat-grid-tile-header\"]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileHeaderCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-grid-tile-header',\n      host: {\n        'class': 'mat-grid-tile-header'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatGridTileFooterCssMatStyler {}\nMatGridTileFooterCssMatStyler.ɵfac = function MatGridTileFooterCssMatStyler_Factory(t) {\n  return new (t || MatGridTileFooterCssMatStyler)();\n};\nMatGridTileFooterCssMatStyler.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatGridTileFooterCssMatStyler,\n  selectors: [[\"mat-grid-tile-footer\"]],\n  hostAttrs: [1, \"mat-grid-tile-footer\"]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileFooterCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-grid-tile-footer',\n      host: {\n        'class': 'mat-grid-tile-footer'\n      }\n    }]\n  }], null, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * \\@docs-private\n */\nclass TileCoordinator {\n  constructor() {\n    /**\n     * Index at which the search for the next gap will start.\n     */\n    this.columnIndex = 0;\n    /**\n     * The current row index.\n     */\n    this.rowIndex = 0;\n  }\n  /**\n   * Gets the total number of rows occupied by tiles\n   * @return {?}\n   */\n  get rowCount() {\n    return this.rowIndex + 1;\n  }\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   * @return {?}\n   */\n  get rowspan() {\n    /** @type {?} */\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n  /**\n   * Updates the tile positions.\n   * @param {?} numColumns Amount of columns in the grid.\n   * @param {?} tiles\n   * @return {?}\n   */\n  update(numColumns, tiles) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(\n    /**\n    * @param {?} tile\n    * @return {?}\n    */\n    tile => this._trackTile(tile));\n  }\n  /**\n   * Calculates the row and col position of a tile.\n   * @private\n   * @param {?} tile\n   * @return {?}\n   */\n  _trackTile(tile) {\n    // Find a gap large enough for this tile.\n    /** @type {?} */\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n  /**\n   * Finds the next available space large enough to fit the tile.\n   * @private\n   * @param {?} tileCols\n   * @return {?}\n   */\n  _findMatchingGap(tileCols) {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` + `grid with cols=\"${this.tracker.length}\".`);\n    }\n    // Start index is inclusive, end index is exclusive.\n    /** @type {?} */\n    let gapStartIndex = -1;\n    /** @type {?} */\n    let gapEndIndex = -1;\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while (gapEndIndex - gapStartIndex < tileCols || gapEndIndex == 0);\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n  /**\n   * Move \"down\" to the next row.\n   * @private\n   * @return {?}\n   */\n  _nextRow() {\n    this.columnIndex = 0;\n    this.rowIndex++;\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   * @private\n   * @param {?} gapStartIndex\n   * @return {?}\n   */\n  _findGapEndIndex(gapStartIndex) {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n  /**\n   * Update the tile tracker to account for the given tile in the given space.\n   * @private\n   * @param {?} start\n   * @param {?} tile\n   * @return {?}\n   */\n  _markTilePosition(start, tile) {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n/**\n * Simple data structure for tile position (row, col).\n * \\@docs-private\n */\nclass TilePosition {\n  /**\n   * @param {?} row\n   * @param {?} col\n   */\n  constructor(row, col) {\n    this.row = row;\n    this.col = col;\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n * @type {?}\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * \\@docs-private\n * @abstract\n */\nclass TileStyler {\n  constructor() {\n    this._rows = 0;\n    this._rowspan = 0;\n  }\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param {?} gutterSize Size of the grid's gutter.\n   * @param {?} tracker Instance of the TileCoordinator.\n   * @param {?} cols Amount of columns in the grid.\n   * @param {?} direction Layout direction of the grid.\n   * @return {?}\n   */\n  init(gutterSize, tracker, cols, direction) {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent, gutterFraction) {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param {?} offset Number of tiles that have already been rendered in the row/column.\n   * @return {?} Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize, offset) {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param {?} span The tile's rowspan or colspan.\n   * @return {?} Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize, span) {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param {?} tile Tile to which to apply the styling.\n   * @param {?} rowIndex Index of the tile's row.\n   * @param {?} colIndex Index of the tile's column.\n   * @return {?}\n   */\n  setStyle(tile, rowIndex, colIndex) {\n    // Percent of the available horizontal space that one column takes up.\n    /** @type {?} */\n    let percentWidthPerTile = 100 / this._cols;\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    /** @type {?} */\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n  /**\n   * Sets the horizontal placement of the tile in the list.\n   * @param {?} tile\n   * @param {?} colIndex\n   * @param {?} percentWidth\n   * @param {?} gutterWidth\n   * @return {?}\n   */\n  setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n    // Base horizontal size of a column.\n    /** @type {?} */\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    /** @type {?} */\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   * @return {?}\n   */\n  getGutterSpan() {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param {?} tileHeight Height of the tile.\n   * @return {?}\n   */\n  getTileSpan(tileHeight) {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * \\@docs-private\n   * @return {?}\n   */\n  getComputedHeight() {\n    return null;\n  }\n}\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * \\@docs-private\n */\nclass FixedTileStyler extends TileStyler {\n  /**\n   * @param {?} fixedRowHeight\n   */\n  constructor(fixedRowHeight) {\n    super();\n    this.fixedRowHeight = fixedRowHeight;\n  }\n  /**\n   * @param {?} gutterSize\n   * @param {?} tracker\n   * @param {?} cols\n   * @param {?} direction\n   * @return {?}\n   */\n  init(gutterSize, tracker, cols, direction) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n  /**\n   * @param {?} tile\n   * @param {?} rowIndex\n   * @return {?}\n   */\n  setRowStyles(tile, rowIndex) {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n  /**\n   * @return {?}\n   */\n  getComputedHeight() {\n    return ['height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)];\n  }\n  /**\n   * @param {?} list\n   * @return {?}\n   */\n  reset(list) {\n    list._setListStyle(['height', null]);\n    if (list._tiles) {\n      list._tiles.forEach(\n      /**\n      * @param {?} tile\n      * @return {?}\n      */\n      tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * \\@docs-private\n */\nclass RatioTileStyler extends TileStyler {\n  /**\n   * @param {?} value\n   */\n  constructor(value) {\n    super();\n    this._parseRatio(value);\n  }\n  /**\n   * @param {?} tile\n   * @param {?} rowIndex\n   * @param {?} percentWidth\n   * @param {?} gutterWidth\n   * @return {?}\n   */\n  setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n    /** @type {?} */\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n  /**\n   * @return {?}\n   */\n  getComputedHeight() {\n    return ['paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)];\n  }\n  /**\n   * @param {?} list\n   * @return {?}\n   */\n  reset(list) {\n    list._setListStyle(['paddingBottom', null]);\n    list._tiles.forEach(\n    /**\n    * @param {?} tile\n    * @return {?}\n    */\n    tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n  /**\n   * @private\n   * @param {?} value\n   * @return {?}\n   */\n  _parseRatio(value) {\n    /** @type {?} */\n    const ratioParts = value.split(':');\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * \\@docs-private\n */\nclass FitTileStyler extends TileStyler {\n  /**\n   * @param {?} tile\n   * @param {?} rowIndex\n   * @return {?}\n   */\n  setRowStyles(tile, rowIndex) {\n    // Percent of the available vertical space that one row takes up.\n    /** @type {?} */\n    let percentHeightPerTile = 100 / this._rowspan;\n    // Fraction of the horizontal gutter size that each column takes up.\n    /** @type {?} */\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n    // Base vertical size of a column.\n    /** @type {?} */\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n  /**\n   * @param {?} list\n   * @return {?}\n   */\n  reset(list) {\n    if (list._tiles) {\n      list._tiles.forEach(\n      /**\n      * @param {?} tile\n      * @return {?}\n      */\n      tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n/**\n * Wraps a CSS string in a calc function\n * @param {?} exp\n * @return {?}\n */\nfunction calc(exp) {\n  return `calc(${exp})`;\n}\n/**\n * Appends pixels to a CSS string if no units are given.\n * @param {?} value\n * @return {?}\n */\nfunction normalizeUnits(value) {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n/** @type {?} */\nconst MAT_FIT_MODE = 'fit';\nclass MatGridList {\n  /**\n   * @param {?} _element\n   * @param {?} _dir\n   */\n  constructor(_element, _dir) {\n    this._element = _element;\n    this._dir = _dir;\n    /**\n     * The amount of space between tiles. This will be something like '5px' or '2em'.\n     */\n    this._gutter = '1px';\n  }\n  /**\n   * Amount of columns in the grid list.\n   * @return {?}\n   */\n  get cols() {\n    return this._cols;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set cols(value) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n  /**\n   * Size of the grid list's gutter in pixels.\n   * @return {?}\n   */\n  get gutterSize() {\n    return this._gutter;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set gutterSize(value) {\n    this._gutter = `${value == null ? '' : value}`;\n  }\n  /**\n   * Set internal representation of row height from the user-provided value.\n   * @return {?}\n   */\n  get rowHeight() {\n    return this._rowHeight;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set rowHeight(value) {\n    /** @type {?} */\n    const newValue = `${value == null ? '' : value}`;\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   * @return {?}\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n  /**\n   * Throw a friendly error if cols property is missing\n   * @private\n   * @return {?}\n   */\n  _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` + `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n  /**\n   * Default to equal width:height if rowHeight property is missing\n   * @private\n   * @return {?}\n   */\n  _checkRowHeight() {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n  /**\n   * Creates correct Tile Styler subtype based on rowHeight passed in by user\n   * @private\n   * @param {?} rowHeight\n   * @return {?}\n   */\n  _setTileStyler(rowHeight) {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n  /**\n   * Computes and applies the size and position for all children grid tiles.\n   * @private\n   * @return {?}\n   */\n  _layoutTiles() {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n    /** @type {?} */\n    const tracker = this._tileCoordinator;\n    /** @type {?} */\n    const tiles = this._tiles.filter(\n    /**\n    * @param {?} tile\n    * @return {?}\n    */\n    tile => !tile._gridList || tile._gridList === this);\n    /** @type {?} */\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n    tiles.forEach(\n    /**\n    * @param {?} tile\n    * @param {?} index\n    * @return {?}\n    */\n    (tile, index) => {\n      /** @type {?} */\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n  /**\n   * Sets style on the main grid-list element, given the style name and value.\n   * @param {?} style\n   * @return {?}\n   */\n  _setListStyle(style) {\n    if (style) {\n      /** @type {?} */this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\nMatGridList.ɵfac = function MatGridList_Factory(t) {\n  return new (t || MatGridList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8));\n};\nMatGridList.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatGridList,\n  selectors: [[\"mat-grid-list\"]],\n  contentQueries: function MatGridList_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatGridTile, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tiles = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-grid-list\"],\n  inputs: {\n    cols: \"cols\",\n    gutterSize: \"gutterSize\",\n    rowHeight: \"rowHeight\"\n  },\n  exportAs: [\"matGridList\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }])],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  template: function MatGridList_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\");\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  styles: [_c3],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\nMatGridList.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}];\nMatGridList.propDecorators = {\n  _tiles: [{\n    type: ContentChildren,\n    args: [MatGridTile, {\n      descendants: true\n    }]\n  }],\n  cols: [{\n    type: Input\n  }],\n  gutterSize: [{\n    type: Input\n  }],\n  rowHeight: [{\n    type: Input\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridList, [{\n    type: Component,\n    args: [{\n      selector: 'mat-grid-list',\n      exportAs: 'matGridList',\n      template: \"<div><ng-content></ng-content></div>\",\n      host: {\n        'class': 'mat-grid-list'\n      },\n      providers: [{\n        provide: MAT_GRID_LIST,\n        useExisting: MatGridList\n      }],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    cols: [{\n      type: Input\n    }],\n    gutterSize: [{\n      type: Input\n    }],\n    rowHeight: [{\n      type: Input\n    }],\n    _tiles: [{\n      type: ContentChildren,\n      args: [MatGridTile, {\n        descendants: true\n      }]\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatGridListModule {}\nMatGridListModule.ɵfac = function MatGridListModule_Factory(t) {\n  return new (t || MatGridListModule)();\n};\nMatGridListModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatGridListModule\n});\nMatGridListModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [MatLineModule, MatCommonModule, MatLineModule, MatCommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridListModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatLineModule, MatCommonModule],\n      exports: [MatGridList, MatGridTile, MatGridTileText, MatLineModule, MatCommonModule, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler],\n      declarations: [MatGridList, MatGridTile, MatGridTileText, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatGridListModule, {\n    declarations: function () {\n      return [MatGridList, MatGridTile, MatGridTileText, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler];\n    },\n    imports: function () {\n      return [MatLineModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatGridList, MatGridTile, MatGridTileText, MatLineModule, MatCommonModule, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler];\n    }\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatGridListModule, MatGridList, MatGridTile, MatGridTileText, MatGridAvatarCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MAT_GRID_LIST as ɵa11 };","map":{"version":3,"names":["InjectionToken","Component","ViewEncapsulation","ElementRef","Input","Optional","ContentChildren","Directive","ChangeDetectionStrategy","Inject","NgModule","MatLine","setLines","MatLineModule","MatCommonModule","coerceNumberProperty","Directionality","ɵngcc0","ɵngcc1","_c0","_c1","_c2","_c3","MAT_GRID_LIST","MatGridTile","constructor","_element","_gridList","_rowspan","_colspan","rowspan","value","Math","round","colspan","_setStyle","property","nativeElement","style","ɵfac","MatGridTile_Factory","t","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","type","selectors","hostAttrs","inputs","exportAs","ngContentSelectors","decls","vars","consts","template","MatGridTile_Template","rf","ctx","ɵɵprojectionDef","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","styles","encapsulation","changeDetection","ctorParameters","undefined","decorators","args","propDecorators","ngDevMode","ɵsetClassMetadata","selector","host","None","OnPush","MatGridTileText","ngAfterContentInit","_lines","MatGridTileText_Factory","contentQueries","MatGridTileText_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","MatGridTileText_Template","MatGridAvatarCssMatStyler","MatGridAvatarCssMatStyler_Factory","ɵdir","ɵɵdefineDirective","MatGridTileHeaderCssMatStyler","MatGridTileHeaderCssMatStyler_Factory","MatGridTileFooterCssMatStyler","MatGridTileFooterCssMatStyler_Factory","TileCoordinator","columnIndex","rowIndex","rowCount","lastRowMax","max","tracker","update","numColumns","tiles","Array","fill","length","positions","map","tile","_trackTile","gapStartIndex","_findMatchingGap","_markTilePosition","TilePosition","tileCols","Error","gapEndIndex","_nextRow","indexOf","_findGapEndIndex","i","start","row","col","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","direction","_gutterSize","normalizeUnits","_cols","_direction","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","offset","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","test","reset","list","_setListStyle","_tiles","forEach","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","split","parseFloat","FitTileStyler","gutterHeightPerTile","exp","match","MAT_FIT_MODE","MatGridList","_dir","_gutter","rowHeight","_rowHeight","newValue","_setTileStyler","ngOnInit","_checkCols","_checkRowHeight","ngAfterContentChecked","_layoutTiles","_tileStyler","_tileCoordinator","filter","index","pos","MatGridList_Factory","MatGridList_ContentQueries","features","ɵɵProvidersFeature","provide","useExisting","MatGridList_Template","descendants","providers","MatGridListModule","MatGridListModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope","ɵa11"],"sources":["C:/Users/dalci/OneDrive/Masaüstü/dotnet-angular-web-explorer/ClientApp/node_modules/@angular/material/__ivy_ngcc__/esm2015/grid-list.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Component, ViewEncapsulation, ElementRef, Input, Optional, ContentChildren, Directive, ChangeDetectionStrategy, Inject, NgModule } from '@angular/core';\nimport { MatLine, setLines, MatLineModule, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * \\@docs-private\n * @type {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\n\nconst _c0 = [\"*\"];\nconst _c1 = [[[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]], \"*\"];\nconst _c2 = [\"[mat-grid-avatar], [matGridAvatar]\", \"[mat-line], [matLine]\", \"*\"];\nconst _c3 = \".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\";\nconst MAT_GRID_LIST = new InjectionToken('MAT_GRID_LIST');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatGridTile {\n    /**\n     * @param {?} _element\n     * @param {?=} _gridList\n     */\n    constructor(_element, _gridList) {\n        this._element = _element;\n        this._gridList = _gridList;\n        this._rowspan = 1;\n        this._colspan = 1;\n    }\n    /**\n     * Amount of rows that the grid tile takes up.\n     * @return {?}\n     */\n    get rowspan() { return this._rowspan; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set rowspan(value) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n    /**\n     * Amount of columns that the grid tile takes up.\n     * @return {?}\n     */\n    get colspan() { return this._colspan; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set colspan(value) { this._colspan = Math.round(coerceNumberProperty(value)); }\n    /**\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n     * \"Changed after checked\" errors that would occur with HostBinding.\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n    _setStyle(property, value) {\n        ((/** @type {?} */ (this._element.nativeElement.style)))[property] = value;\n    }\n}\nMatGridTile.ɵfac = function MatGridTile_Factory(t) { return new (t || MatGridTile)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_GRID_LIST, 8)); };\nMatGridTile.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatGridTile, selectors: [[\"mat-grid-tile\"]], hostAttrs: [1, \"mat-grid-tile\"], inputs: { rowspan: \"rowspan\", colspan: \"colspan\" }, exportAs: [\"matGridTile\"], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"mat-figure\"]], template: function MatGridTile_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"figure\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [_c3], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatGridTile.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_GRID_LIST,] }] }\n];\nMatGridTile.propDecorators = {\n    rowspan: [{ type: Input }],\n    colspan: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTile, [{\n        type: Component,\n        args: [{ selector: 'mat-grid-tile', exportAs: 'matGridTile', host: {\n                    'class': 'mat-grid-tile'\n                }, template: \"<figure class=\\\"mat-figure\\\"><ng-content></ng-content></figure>\", encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\"] }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_GRID_LIST]\n            }] }]; }, { rowspan: [{\n            type: Input\n        }], colspan: [{\n            type: Input\n        }] }); })();\nclass MatGridTileText {\n    /**\n     * @param {?} _element\n     */\n    constructor(_element) {\n        this._element = _element;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        setLines(this._lines, this._element);\n    }\n}\nMatGridTileText.ɵfac = function MatGridTileText_Factory(t) { return new (t || MatGridTileText)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatGridTileText.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatGridTileText, selectors: [[\"mat-grid-tile-header\"], [\"mat-grid-tile-footer\"]], contentQueries: function MatGridTileText_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatLine, 4);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lines = _t);\n    } }, ngContentSelectors: _c2, decls: 4, vars: 0, consts: [[1, \"mat-grid-list-text\"]], template: function MatGridTileText_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(3, 2);\n    } }, encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatGridTileText.ctorParameters = () => [\n    { type: ElementRef }\n];\nMatGridTileText.propDecorators = {\n    _lines: [{ type: ContentChildren, args: [MatLine,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileText, [{\n        type: Component,\n        args: [{ selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n                template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content><div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div><ng-content></ng-content>\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { _lines: [{\n            type: ContentChildren,\n            args: [MatLine]\n        }] }); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatGridAvatarCssMatStyler {\n}\nMatGridAvatarCssMatStyler.ɵfac = function MatGridAvatarCssMatStyler_Factory(t) { return new (t || MatGridAvatarCssMatStyler)(); };\nMatGridAvatarCssMatStyler.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatGridAvatarCssMatStyler, selectors: [[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], hostAttrs: [1, \"mat-grid-avatar\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridAvatarCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-grid-avatar], [matGridAvatar]',\n                host: { 'class': 'mat-grid-avatar' }\n            }]\n    }], null, null); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatGridTileHeaderCssMatStyler {\n}\nMatGridTileHeaderCssMatStyler.ɵfac = function MatGridTileHeaderCssMatStyler_Factory(t) { return new (t || MatGridTileHeaderCssMatStyler)(); };\nMatGridTileHeaderCssMatStyler.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatGridTileHeaderCssMatStyler, selectors: [[\"mat-grid-tile-header\"]], hostAttrs: [1, \"mat-grid-tile-header\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileHeaderCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-grid-tile-header',\n                host: { 'class': 'mat-grid-tile-header' }\n            }]\n    }], null, null); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatGridTileFooterCssMatStyler {\n}\nMatGridTileFooterCssMatStyler.ɵfac = function MatGridTileFooterCssMatStyler_Factory(t) { return new (t || MatGridTileFooterCssMatStyler)(); };\nMatGridTileFooterCssMatStyler.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatGridTileFooterCssMatStyler, selectors: [[\"mat-grid-tile-footer\"]], hostAttrs: [1, \"mat-grid-tile-footer\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileFooterCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-grid-tile-footer',\n                host: { 'class': 'mat-grid-tile-footer' }\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * \\@docs-private\n */\nclass TileCoordinator {\n    constructor() {\n        /**\n         * Index at which the search for the next gap will start.\n         */\n        this.columnIndex = 0;\n        /**\n         * The current row index.\n         */\n        this.rowIndex = 0;\n    }\n    /**\n     * Gets the total number of rows occupied by tiles\n     * @return {?}\n     */\n    get rowCount() { return this.rowIndex + 1; }\n    /**\n     * Gets the total span of rows occupied by tiles.\n     * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n     * @return {?}\n     */\n    get rowspan() {\n        /** @type {?} */\n        const lastRowMax = Math.max(...this.tracker);\n        // if any of the tiles has a rowspan that pushes it beyond the total row count,\n        // add the difference to the rowcount\n        return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n    }\n    /**\n     * Updates the tile positions.\n     * @param {?} numColumns Amount of columns in the grid.\n     * @param {?} tiles\n     * @return {?}\n     */\n    update(numColumns, tiles) {\n        this.columnIndex = 0;\n        this.rowIndex = 0;\n        this.tracker = new Array(numColumns);\n        this.tracker.fill(0, 0, this.tracker.length);\n        this.positions = tiles.map((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        tile => this._trackTile(tile)));\n    }\n    /**\n     * Calculates the row and col position of a tile.\n     * @private\n     * @param {?} tile\n     * @return {?}\n     */\n    _trackTile(tile) {\n        // Find a gap large enough for this tile.\n        /** @type {?} */\n        const gapStartIndex = this._findMatchingGap(tile.colspan);\n        // Place tile in the resulting gap.\n        this._markTilePosition(gapStartIndex, tile);\n        // The next time we look for a gap, the search will start at columnIndex, which should be\n        // immediately after the tile that has just been placed.\n        this.columnIndex = gapStartIndex + tile.colspan;\n        return new TilePosition(this.rowIndex, gapStartIndex);\n    }\n    /**\n     * Finds the next available space large enough to fit the tile.\n     * @private\n     * @param {?} tileCols\n     * @return {?}\n     */\n    _findMatchingGap(tileCols) {\n        if (tileCols > this.tracker.length) {\n            throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                `grid with cols=\"${this.tracker.length}\".`);\n        }\n        // Start index is inclusive, end index is exclusive.\n        /** @type {?} */\n        let gapStartIndex = -1;\n        /** @type {?} */\n        let gapEndIndex = -1;\n        // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n        do {\n            // If we've reached the end of the row, go to the next row.\n            if (this.columnIndex + tileCols > this.tracker.length) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n            // If there are no more empty spaces in this row at all, move on to the next row.\n            if (gapStartIndex == -1) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapEndIndex = this._findGapEndIndex(gapStartIndex);\n            // If a gap large enough isn't found, we want to start looking immediately after the current\n            // gap on the next iteration.\n            this.columnIndex = gapStartIndex + 1;\n            // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n            // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n        } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n        // If we still didn't manage to find a gap, ensure that the index is\n        // at least zero so the tile doesn't get pulled out of the grid.\n        return Math.max(gapStartIndex, 0);\n    }\n    /**\n     * Move \"down\" to the next row.\n     * @private\n     * @return {?}\n     */\n    _nextRow() {\n        this.columnIndex = 0;\n        this.rowIndex++;\n        // Decrement all spaces by one to reflect moving down one row.\n        for (let i = 0; i < this.tracker.length; i++) {\n            this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n        }\n    }\n    /**\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\n     * The gap ends when a non-zero value is found.\n     * @private\n     * @param {?} gapStartIndex\n     * @return {?}\n     */\n    _findGapEndIndex(gapStartIndex) {\n        for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n            if (this.tracker[i] != 0) {\n                return i;\n            }\n        }\n        // The gap ends with the end of the row.\n        return this.tracker.length;\n    }\n    /**\n     * Update the tile tracker to account for the given tile in the given space.\n     * @private\n     * @param {?} start\n     * @param {?} tile\n     * @return {?}\n     */\n    _markTilePosition(start, tile) {\n        for (let i = 0; i < tile.colspan; i++) {\n            this.tracker[start + i] = tile.rowspan;\n        }\n    }\n}\n/**\n * Simple data structure for tile position (row, col).\n * \\@docs-private\n */\nclass TilePosition {\n    /**\n     * @param {?} row\n     * @param {?} col\n     */\n    constructor(row, col) {\n        this.row = row;\n        this.col = col;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n * @type {?}\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * \\@docs-private\n * @abstract\n */\nclass TileStyler {\n    constructor() {\n        this._rows = 0;\n        this._rowspan = 0;\n    }\n    /**\n     * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n     * because these properties haven't been calculated by that point.\n     *\n     * @param {?} gutterSize Size of the grid's gutter.\n     * @param {?} tracker Instance of the TileCoordinator.\n     * @param {?} cols Amount of columns in the grid.\n     * @param {?} direction Layout direction of the grid.\n     * @return {?}\n     */\n    init(gutterSize, tracker, cols, direction) {\n        this._gutterSize = normalizeUnits(gutterSize);\n        this._rows = tracker.rowCount;\n        this._rowspan = tracker.rowspan;\n        this._cols = cols;\n        this._direction = direction;\n    }\n    /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n    getBaseTileSize(sizePercent, gutterFraction) {\n        // Take the base size percent (as would be if evenly dividing the size between cells),\n        // and then subtracting the size of one gutter. However, since there are no gutters on the\n        // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n        // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n        // edge evenly among the cells).\n        return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n    }\n    /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} offset Number of tiles that have already been rendered in the row/column.\n     * @return {?} Position of the tile as a CSS calc() expression.\n     */\n    getTilePosition(baseSize, offset) {\n        // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n        // row/column (offset).\n        return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n    }\n    /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} span The tile's rowspan or colspan.\n     * @return {?} Size of the tile as a CSS calc() expression.\n     */\n    getTileSize(baseSize, span) {\n        return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n    }\n    /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param {?} tile Tile to which to apply the styling.\n     * @param {?} rowIndex Index of the tile's row.\n     * @param {?} colIndex Index of the tile's column.\n     * @return {?}\n     */\n    setStyle(tile, rowIndex, colIndex) {\n        // Percent of the available horizontal space that one column takes up.\n        /** @type {?} */\n        let percentWidthPerTile = 100 / this._cols;\n        // Fraction of the vertical gutter size that each column takes up.\n        // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n        /** @type {?} */\n        let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n        this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n        this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    }\n    /**\n     * Sets the horizontal placement of the tile in the list.\n     * @param {?} tile\n     * @param {?} colIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n        // Base horizontal size of a column.\n        /** @type {?} */\n        let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n        // The width and horizontal position of each tile is always calculated the same way, but the\n        // height and vertical position depends on the rowMode.\n        /** @type {?} */\n        let side = this._direction === 'rtl' ? 'right' : 'left';\n        tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n        tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n    }\n    /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     * @return {?}\n     */\n    getGutterSpan() {\n        return `${this._gutterSize} * (${this._rowspan} - 1)`;\n    }\n    /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param {?} tileHeight Height of the tile.\n     * @return {?}\n     */\n    getTileSpan(tileHeight) {\n        return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n    }\n    /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method can be implemented by each type of TileStyler.\n     * \\@docs-private\n     * @return {?}\n     */\n    getComputedHeight() { return null; }\n}\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * \\@docs-private\n */\nclass FixedTileStyler extends TileStyler {\n    /**\n     * @param {?} fixedRowHeight\n     */\n    constructor(fixedRowHeight) {\n        super();\n        this.fixedRowHeight = fixedRowHeight;\n    }\n    /**\n     * @param {?} gutterSize\n     * @param {?} tracker\n     * @param {?} cols\n     * @param {?} direction\n     * @return {?}\n     */\n    init(gutterSize, tracker, cols, direction) {\n        super.init(gutterSize, tracker, cols, direction);\n        this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n        if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n            throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n        }\n    }\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @return {?}\n     */\n    setRowStyles(tile, rowIndex) {\n        tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n    }\n    /**\n     * @return {?}\n     */\n    getComputedHeight() {\n        return [\n            'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n        ];\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n    reset(list) {\n        list._setListStyle(['height', null]);\n        if (list._tiles) {\n            list._tiles.forEach((/**\n             * @param {?} tile\n             * @return {?}\n             */\n            tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            }));\n        }\n    }\n}\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * \\@docs-private\n */\nclass RatioTileStyler extends TileStyler {\n    /**\n     * @param {?} value\n     */\n    constructor(value) {\n        super();\n        this._parseRatio(value);\n    }\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n        /** @type {?} */\n        let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n        this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n        // Use padding-top and margin-top to maintain the given aspect ratio, as\n        // a percentage-based value for these properties is applied versus the *width* of the\n        // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n        tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n        tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n    }\n    /**\n     * @return {?}\n     */\n    getComputedHeight() {\n        return [\n            'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n        ];\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n    reset(list) {\n        list._setListStyle(['paddingBottom', null]);\n        list._tiles.forEach((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        tile => {\n            tile._setStyle('marginTop', null);\n            tile._setStyle('paddingTop', null);\n        }));\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _parseRatio(value) {\n        /** @type {?} */\n        const ratioParts = value.split(':');\n        if (ratioParts.length !== 2) {\n            throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n        }\n        this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n    }\n}\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * \\@docs-private\n */\nclass FitTileStyler extends TileStyler {\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @return {?}\n     */\n    setRowStyles(tile, rowIndex) {\n        // Percent of the available vertical space that one row takes up.\n        /** @type {?} */\n        let percentHeightPerTile = 100 / this._rowspan;\n        // Fraction of the horizontal gutter size that each column takes up.\n        /** @type {?} */\n        let gutterHeightPerTile = (this._rows - 1) / this._rows;\n        // Base vertical size of a column.\n        /** @type {?} */\n        let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n        tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n    reset(list) {\n        if (list._tiles) {\n            list._tiles.forEach((/**\n             * @param {?} tile\n             * @return {?}\n             */\n            tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            }));\n        }\n    }\n}\n/**\n * Wraps a CSS string in a calc function\n * @param {?} exp\n * @return {?}\n */\nfunction calc(exp) {\n    return `calc(${exp})`;\n}\n/**\n * Appends pixels to a CSS string if no units are given.\n * @param {?} value\n * @return {?}\n */\nfunction normalizeUnits(value) {\n    return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n/** @type {?} */\nconst MAT_FIT_MODE = 'fit';\nclass MatGridList {\n    /**\n     * @param {?} _element\n     * @param {?} _dir\n     */\n    constructor(_element, _dir) {\n        this._element = _element;\n        this._dir = _dir;\n        /**\n         * The amount of space between tiles. This will be something like '5px' or '2em'.\n         */\n        this._gutter = '1px';\n    }\n    /**\n     * Amount of columns in the grid list.\n     * @return {?}\n     */\n    get cols() { return this._cols; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set cols(value) {\n        this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n    }\n    /**\n     * Size of the grid list's gutter in pixels.\n     * @return {?}\n     */\n    get gutterSize() { return this._gutter; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set gutterSize(value) { this._gutter = `${value == null ? '' : value}`; }\n    /**\n     * Set internal representation of row height from the user-provided value.\n     * @return {?}\n     */\n    get rowHeight() { return this._rowHeight; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set rowHeight(value) {\n        /** @type {?} */\n        const newValue = `${value == null ? '' : value}`;\n        if (newValue !== this._rowHeight) {\n            this._rowHeight = newValue;\n            this._setTileStyler(this._rowHeight);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._checkCols();\n        this._checkRowHeight();\n    }\n    /**\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\n     * to run it frequently.\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        this._layoutTiles();\n    }\n    /**\n     * Throw a friendly error if cols property is missing\n     * @private\n     * @return {?}\n     */\n    _checkCols() {\n        if (!this.cols) {\n            throw Error(`mat-grid-list: must pass in number of columns. ` +\n                `Example: <mat-grid-list cols=\"3\">`);\n        }\n    }\n    /**\n     * Default to equal width:height if rowHeight property is missing\n     * @private\n     * @return {?}\n     */\n    _checkRowHeight() {\n        if (!this._rowHeight) {\n            this._setTileStyler('1:1');\n        }\n    }\n    /**\n     * Creates correct Tile Styler subtype based on rowHeight passed in by user\n     * @private\n     * @param {?} rowHeight\n     * @return {?}\n     */\n    _setTileStyler(rowHeight) {\n        if (this._tileStyler) {\n            this._tileStyler.reset(this);\n        }\n        if (rowHeight === MAT_FIT_MODE) {\n            this._tileStyler = new FitTileStyler();\n        }\n        else if (rowHeight && rowHeight.indexOf(':') > -1) {\n            this._tileStyler = new RatioTileStyler(rowHeight);\n        }\n        else {\n            this._tileStyler = new FixedTileStyler(rowHeight);\n        }\n    }\n    /**\n     * Computes and applies the size and position for all children grid tiles.\n     * @private\n     * @return {?}\n     */\n    _layoutTiles() {\n        if (!this._tileCoordinator) {\n            this._tileCoordinator = new TileCoordinator();\n        }\n        /** @type {?} */\n        const tracker = this._tileCoordinator;\n        /** @type {?} */\n        const tiles = this._tiles.filter((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        tile => !tile._gridList || tile._gridList === this));\n        /** @type {?} */\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._tileCoordinator.update(this.cols, tiles);\n        this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n        tiles.forEach((/**\n         * @param {?} tile\n         * @param {?} index\n         * @return {?}\n         */\n        (tile, index) => {\n            /** @type {?} */\n            const pos = tracker.positions[index];\n            this._tileStyler.setStyle(tile, pos.row, pos.col);\n        }));\n        this._setListStyle(this._tileStyler.getComputedHeight());\n    }\n    /**\n     * Sets style on the main grid-list element, given the style name and value.\n     * @param {?} style\n     * @return {?}\n     */\n    _setListStyle(style) {\n        if (style) {\n            ((/** @type {?} */ (this._element.nativeElement.style)))[style[0]] = style[1];\n        }\n    }\n}\nMatGridList.ɵfac = function MatGridList_Factory(t) { return new (t || MatGridList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8)); };\nMatGridList.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatGridList, selectors: [[\"mat-grid-list\"]], contentQueries: function MatGridList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatGridTile, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tiles = _t);\n    } }, hostAttrs: [1, \"mat-grid-list\"], inputs: { cols: \"cols\", gutterSize: \"gutterSize\", rowHeight: \"rowHeight\" }, exportAs: [\"matGridList\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: MAT_GRID_LIST,\n                useExisting: MatGridList\n            }])], ngContentSelectors: _c0, decls: 2, vars: 0, template: function MatGridList_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\");\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [_c3], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatGridList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nMatGridList.propDecorators = {\n    _tiles: [{ type: ContentChildren, args: [MatGridTile, { descendants: true },] }],\n    cols: [{ type: Input }],\n    gutterSize: [{ type: Input }],\n    rowHeight: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridList, [{\n        type: Component,\n        args: [{ selector: 'mat-grid-list', exportAs: 'matGridList', template: \"<div><ng-content></ng-content></div>\", host: {\n                    'class': 'mat-grid-list'\n                }, providers: [{\n                        provide: MAT_GRID_LIST,\n                        useExisting: MatGridList\n                    }], changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\"] }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { cols: [{\n            type: Input\n        }], gutterSize: [{\n            type: Input\n        }], rowHeight: [{\n            type: Input\n        }], _tiles: [{\n            type: ContentChildren,\n            args: [MatGridTile, { descendants: true }]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatGridListModule {\n}\nMatGridListModule.ɵfac = function MatGridListModule_Factory(t) { return new (t || MatGridListModule)(); };\nMatGridListModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatGridListModule });\nMatGridListModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [MatLineModule, MatCommonModule, MatLineModule,\n        MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridListModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatLineModule, MatCommonModule],\n                exports: [\n                    MatGridList,\n                    MatGridTile,\n                    MatGridTileText,\n                    MatLineModule,\n                    MatCommonModule,\n                    MatGridTileHeaderCssMatStyler,\n                    MatGridTileFooterCssMatStyler,\n                    MatGridAvatarCssMatStyler\n                ],\n                declarations: [\n                    MatGridList,\n                    MatGridTile,\n                    MatGridTileText,\n                    MatGridTileHeaderCssMatStyler,\n                    MatGridTileFooterCssMatStyler,\n                    MatGridAvatarCssMatStyler\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatGridListModule, { declarations: function () { return [MatGridList, MatGridTile, MatGridTileText, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler]; }, imports: function () { return [MatLineModule, MatCommonModule]; }, exports: function () { return [MatGridList, MatGridTile, MatGridTileText, MatLineModule,\n        MatCommonModule, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatGridListModule, MatGridList, MatGridTile, MatGridTileText, MatGridAvatarCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MAT_GRID_LIST as ɵa11 };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}