{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Platform, normalizePassiveListenerOptions, PlatformModule } from '@angular/cdk/platform';\nimport { Directive, ElementRef, EventEmitter, Injectable, NgZone, Output, Input, NgModule, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';\nimport { coerceElement, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { auditTime, takeUntil } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Options to pass to the animationstart listener.\n * @type {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nconst listenerOptions = normalizePassiveListenerOptions({\n  passive: true\n});\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/\\@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nclass AutofillMonitor {\n  /**\n   * @param {?} _platform\n   * @param {?} _ngZone\n   */\n  constructor(_platform, _ngZone) {\n    this._platform = _platform;\n    this._ngZone = _ngZone;\n    this._monitoredElements = new Map();\n  }\n  /**\n   * @param {?} elementOrRef\n   * @return {?}\n   */\n  monitor(elementOrRef) {\n    if (!this._platform.isBrowser) {\n      return EMPTY;\n    }\n    /** @type {?} */\n    const element = coerceElement(elementOrRef);\n    /** @type {?} */\n    const info = this._monitoredElements.get(element);\n    if (info) {\n      return info.subject.asObservable();\n    }\n    /** @type {?} */\n    const result = new Subject();\n    /** @type {?} */\n    const cssClass = 'cdk-text-field-autofilled';\n    /** @type {?} */\n    const listener = /** @type {?} */ /**\n                                      * @param {?} event\n                                      * @return {?}\n                                      */\n    event => {\n      // Animation events fire on initial element render, we check for the presence of the autofill\n      // CSS class to make sure this is a real change in state, not just the initial render before\n      // we fire off events.\n      if (event.animationName === 'cdk-text-field-autofill-start' && !element.classList.contains(cssClass)) {\n        element.classList.add(cssClass);\n        this._ngZone.run(\n        /**\n        * @return {?}\n        */\n        () => result.next({\n          target: /** @type {?} */event.target,\n          isAutofilled: true\n        }));\n      } else if (event.animationName === 'cdk-text-field-autofill-end' && element.classList.contains(cssClass)) {\n        element.classList.remove(cssClass);\n        this._ngZone.run(\n        /**\n        * @return {?}\n        */\n        () => result.next({\n          target: /** @type {?} */event.target,\n          isAutofilled: false\n        }));\n      }\n    };\n    this._ngZone.runOutsideAngular(\n    /**\n    * @return {?}\n    */\n    () => {\n      element.addEventListener('animationstart', listener, listenerOptions);\n      element.classList.add('cdk-text-field-autofill-monitored');\n    });\n    this._monitoredElements.set(element, {\n      subject: result,\n      unlisten:\n      /**\n      * @return {?}\n      */\n      () => {\n        element.removeEventListener('animationstart', listener, listenerOptions);\n      }\n    });\n    return result.asObservable();\n  }\n  /**\n   * @param {?} elementOrRef\n   * @return {?}\n   */\n  stopMonitoring(elementOrRef) {\n    /** @type {?} */\n    const element = coerceElement(elementOrRef);\n    /** @type {?} */\n    const info = this._monitoredElements.get(element);\n    if (info) {\n      info.unlisten();\n      info.subject.complete();\n      element.classList.remove('cdk-text-field-autofill-monitored');\n      element.classList.remove('cdk-text-field-autofilled');\n      this._monitoredElements.delete(element);\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._monitoredElements.forEach(\n    /**\n    * @param {?} _info\n    * @param {?} element\n    * @return {?}\n    */\n    (_info, element) => this.stopMonitoring(element));\n  }\n}\nAutofillMonitor.ɵfac = function AutofillMonitor_Factory(t) {\n  return new (t || AutofillMonitor)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\nAutofillMonitor.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: AutofillMonitor,\n  factory: AutofillMonitor.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\nAutofillMonitor.ctorParameters = () => [{\n  type: Platform\n}, {\n  type: NgZone\n}];\n/** @nocollapse */\nAutofillMonitor.ngInjectableDef = ɵɵdefineInjectable({\n  factory: function AutofillMonitor_Factory() {\n    return new AutofillMonitor(ɵɵinject(Platform), ɵɵinject(NgZone));\n  },\n  token: AutofillMonitor,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AutofillMonitor, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Platform\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n/**\n * A directive that can be used to monitor the autofill state of an input.\n */\nclass CdkAutofill {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _autofillMonitor\n   */\n  constructor(_elementRef, _autofillMonitor) {\n    this._elementRef = _elementRef;\n    this._autofillMonitor = _autofillMonitor;\n    /**\n     * Emits when the autofill state of the element changes.\n     */\n    this.cdkAutofill = new EventEmitter();\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef).subscribe(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => this.cdkAutofill.emit(event));\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._autofillMonitor.stopMonitoring(this._elementRef);\n  }\n}\nCdkAutofill.ɵfac = function CdkAutofill_Factory(t) {\n  return new (t || CdkAutofill)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(AutofillMonitor));\n};\nCdkAutofill.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkAutofill,\n  selectors: [[\"\", \"cdkAutofill\", \"\"]],\n  outputs: {\n    cdkAutofill: \"cdkAutofill\"\n  }\n});\n/** @nocollapse */\nCdkAutofill.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: AutofillMonitor\n}];\nCdkAutofill.propDecorators = {\n  cdkAutofill: [{\n    type: Output\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAutofill, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkAutofill]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: AutofillMonitor\n    }];\n  }, {\n    cdkAutofill: [{\n      type: Output\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\nclass CdkTextareaAutosize {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _platform\n   * @param {?} _ngZone\n   */\n  constructor(_elementRef, _platform, _ngZone) {\n    this._elementRef = _elementRef;\n    this._platform = _platform;\n    this._ngZone = _ngZone;\n    this._destroyed = new Subject();\n    this._enabled = true;\n    /**\n     * Value of minRows as of last resize. If the minRows has decreased, the\n     * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n     * does not have the same problem because it does not affect the textarea's scrollHeight.\n     */\n    this._previousMinRows = -1;\n    this._textareaElement = /** @type {?} */this._elementRef.nativeElement;\n  }\n  /**\n   * Minimum amount of rows in the textarea.\n   * @return {?}\n   */\n  get minRows() {\n    return this._minRows;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set minRows(value) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n  /**\n   * Maximum amount of rows in the textarea.\n   * @return {?}\n   */\n  get maxRows() {\n    return this._maxRows;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set maxRows(value) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n  /**\n   * Whether autosizing is enabled or not\n   * @return {?}\n   */\n  get enabled() {\n    return this._enabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set enabled(value) {\n    value = coerceBooleanProperty(value);\n    // Only act if the actual value changed. This specifically helps to not run\n    // resizeToFitContent too early (i.e. before ngAfterViewInit)\n    if (this._enabled !== value) {\n      (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n    }\n  }\n  /**\n   * Sets the minimum height of the textarea as determined by minRows.\n   * @return {?}\n   */\n  _setMinHeight() {\n    /** @type {?} */\n    const minHeight = this.minRows && this._cachedLineHeight ? `${this.minRows * this._cachedLineHeight}px` : null;\n    if (minHeight) {\n      this._textareaElement.style.minHeight = minHeight;\n    }\n  }\n  /**\n   * Sets the maximum height of the textarea as determined by maxRows.\n   * @return {?}\n   */\n  _setMaxHeight() {\n    /** @type {?} */\n    const maxHeight = this.maxRows && this._cachedLineHeight ? `${this.maxRows * this._cachedLineHeight}px` : null;\n    if (maxHeight) {\n      this._textareaElement.style.maxHeight = maxHeight;\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      // Remember the height which we started with in case autosizing is disabled\n      this._initialHeight = this._textareaElement.style.height;\n      this.resizeToFitContent();\n      this._ngZone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      () => {\n        fromEvent(window, 'resize').pipe(auditTime(16), takeUntil(this._destroyed)).subscribe(\n        /**\n        * @return {?}\n        */\n        () => this.resizeToFitContent(true));\n      });\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   * @private\n   * @return {?}\n   */\n  _cacheTextareaLineHeight() {\n    if (this._cachedLineHeight) {\n      return;\n    }\n    // Use a clone element because we have to override some styles.\n    /** @type {?} */\n    let textareaClone = /** @type {?} */this._textareaElement.cloneNode(false);\n    textareaClone.rows = 1;\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n    /** @type {?} */this._textareaElement.parentNode.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    /** @type {?} */this._textareaElement.parentNode.removeChild(textareaClone);\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n  /**\n   * @return {?}\n   */\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n  /**\n   * Resize the textarea to fit its content.\n   * @param {?=} force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   * @return {?}\n   */\n  resizeToFitContent(force = false) {\n    // If autosizing is disabled, just skip everything else\n    if (!this._enabled) {\n      return;\n    }\n    this._cacheTextareaLineHeight();\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n    /** @type {?} */\n    const textarea = /** @type {?} */this._elementRef.nativeElement;\n    /** @type {?} */\n    const value = textarea.value;\n    // Only resize if the value or minRows have changed since these calculations can be expensive.\n    if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n      return;\n    }\n    /** @type {?} */\n    const placeholderText = textarea.placeholder;\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n    // need to be removed temporarily.\n    textarea.classList.add('cdk-textarea-autosize-measuring');\n    textarea.placeholder = '';\n    // The cdk-textarea-autosize-measuring class includes a 2px padding to workaround an issue with\n    // Chrome, so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n    /** @type {?} */\n    const height = textarea.scrollHeight - 4;\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${height}px`;\n    textarea.classList.remove('cdk-textarea-autosize-measuring');\n    textarea.placeholder = placeholderText;\n    this._ngZone.runOutsideAngular(\n    /**\n    * @return {?}\n    */\n    () => {\n      if (typeof requestAnimationFrame !== 'undefined') {\n        requestAnimationFrame(\n        /**\n        * @return {?}\n        */\n        () => this._scrollToCaretPosition(textarea));\n      } else {\n        setTimeout(\n        /**\n        * @return {?}\n        */\n        () => this._scrollToCaretPosition(textarea));\n      }\n    });\n    this._previousValue = value;\n    this._previousMinRows = this._minRows;\n  }\n  /**\n   * Resets the textarea to its original size\n   * @return {?}\n   */\n  reset() {\n    // Do not try to change the textarea, if the initialHeight has not been determined yet\n    // This might potentially remove styles when reset() is called before ngAfterViewInit\n    if (this._initialHeight === undefined) {\n      return;\n    }\n    this._textareaElement.style.height = this._initialHeight;\n  }\n  /**\n   * @return {?}\n   */\n  _noopInputHandler() {\n    // no-op handler that ensures we're running change detection on input events.\n  }\n  /**\n   * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n   * prevent it from scrolling to the caret position. We need to re-set the selection\n   * in order for it to scroll to the proper position.\n   * @private\n   * @param {?} textarea\n   * @return {?}\n   */\n  _scrollToCaretPosition(textarea) {\n    const {\n      selectionStart,\n      selectionEnd\n    } = textarea;\n    // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n    // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n    // between the time we requested the animation frame and when it was executed.\n    // Also note that we have to assert that the textarea is focused before we set the\n    // selection range. Setting the selection range on a non-focused textarea will cause\n    // it to receive focus on IE and Edge.\n    if (!this._destroyed.isStopped && document.activeElement === textarea) {\n      textarea.setSelectionRange(selectionStart, selectionEnd);\n    }\n  }\n}\nCdkTextareaAutosize.ɵfac = function CdkTextareaAutosize_Factory(t) {\n  return new (t || CdkTextareaAutosize)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\nCdkTextareaAutosize.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkTextareaAutosize,\n  selectors: [[\"textarea\", \"cdkTextareaAutosize\", \"\"]],\n  hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\"],\n  hostBindings: function CdkTextareaAutosize_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"input\", function CdkTextareaAutosize_input_HostBindingHandler() {\n        return ctx._noopInputHandler();\n      });\n    }\n  },\n  inputs: {\n    minRows: [\"cdkAutosizeMinRows\", \"minRows\"],\n    maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"],\n    enabled: [\"cdkTextareaAutosize\", \"enabled\"]\n  },\n  exportAs: [\"cdkTextareaAutosize\"]\n});\n/** @nocollapse */\nCdkTextareaAutosize.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: Platform\n}, {\n  type: NgZone\n}];\nCdkTextareaAutosize.propDecorators = {\n  minRows: [{\n    type: Input,\n    args: ['cdkAutosizeMinRows']\n  }],\n  maxRows: [{\n    type: Input,\n    args: ['cdkAutosizeMaxRows']\n  }],\n  enabled: [{\n    type: Input,\n    args: ['cdkTextareaAutosize']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTextareaAutosize, [{\n    type: Directive,\n    args: [{\n      selector: 'textarea[cdkTextareaAutosize]',\n      exportAs: 'cdkTextareaAutosize',\n      host: {\n        'class': 'cdk-textarea-autosize',\n        // Textarea elements that have the directive applied should have a single row by default.\n        // Browsers normally show two rows by default and therefore this limits the minRows binding.\n        'rows': '1',\n        '(input)': '_noopInputHandler()'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    minRows: [{\n      type: Input,\n      args: ['cdkAutosizeMinRows']\n    }],\n    maxRows: [{\n      type: Input,\n      args: ['cdkAutosizeMaxRows']\n    }],\n    enabled: [{\n      type: Input,\n      args: ['cdkTextareaAutosize']\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass TextFieldModule {}\nTextFieldModule.ɵfac = function TextFieldModule_Factory(t) {\n  return new (t || TextFieldModule)();\n};\nTextFieldModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: TextFieldModule\n});\nTextFieldModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [PlatformModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TextFieldModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [CdkAutofill, CdkTextareaAutosize],\n      imports: [PlatformModule],\n      exports: [CdkAutofill, CdkTextareaAutosize]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TextFieldModule, {\n    declarations: function () {\n      return [CdkAutofill, CdkTextareaAutosize];\n    },\n    imports: function () {\n      return [PlatformModule];\n    },\n    exports: function () {\n      return [CdkAutofill, CdkTextareaAutosize];\n    }\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };","map":{"version":3,"names":["Platform","normalizePassiveListenerOptions","PlatformModule","Directive","ElementRef","EventEmitter","Injectable","NgZone","Output","Input","NgModule","ɵɵdefineInjectable","ɵɵinject","coerceElement","coerceBooleanProperty","EMPTY","Subject","fromEvent","auditTime","takeUntil","ɵngcc0","ɵngcc1","listenerOptions","passive","AutofillMonitor","constructor","_platform","_ngZone","_monitoredElements","Map","monitor","elementOrRef","isBrowser","element","info","get","subject","asObservable","result","cssClass","listener","event","animationName","classList","contains","add","run","next","target","isAutofilled","remove","runOutsideAngular","addEventListener","set","unlisten","removeEventListener","stopMonitoring","complete","delete","ngOnDestroy","forEach","_info","ɵfac","AutofillMonitor_Factory","t","ɵprov","token","factory","providedIn","ctorParameters","type","ngInjectableDef","ngDevMode","ɵsetClassMetadata","args","CdkAutofill","_elementRef","_autofillMonitor","cdkAutofill","ngOnInit","subscribe","emit","CdkAutofill_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","selectors","outputs","propDecorators","selector","CdkTextareaAutosize","_destroyed","_enabled","_previousMinRows","_textareaElement","nativeElement","minRows","_minRows","value","_setMinHeight","maxRows","_maxRows","_setMaxHeight","enabled","resizeToFitContent","reset","minHeight","_cachedLineHeight","style","maxHeight","ngAfterViewInit","_initialHeight","height","window","pipe","_cacheTextareaLineHeight","textareaClone","cloneNode","rows","position","visibility","border","padding","overflow","parentNode","appendChild","clientHeight","removeChild","ngDoCheck","force","textarea","_previousValue","placeholderText","placeholder","scrollHeight","requestAnimationFrame","_scrollToCaretPosition","setTimeout","undefined","_noopInputHandler","selectionStart","selectionEnd","isStopped","document","activeElement","setSelectionRange","CdkTextareaAutosize_Factory","hostAttrs","hostBindings","CdkTextareaAutosize_HostBindings","rf","ctx","ɵɵlistener","CdkTextareaAutosize_input_HostBindingHandler","inputs","exportAs","host","TextFieldModule","TextFieldModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","exports","ngJitMode","ɵɵsetNgModuleScope"],"sources":["C:/Users/dalci/OneDrive/Masaüstü/dotnet-angular-web-explorer/ClientApp/node_modules/@angular/cdk/__ivy_ngcc__/esm2015/text-field.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Platform, normalizePassiveListenerOptions, PlatformModule } from '@angular/cdk/platform';\nimport { Directive, ElementRef, EventEmitter, Injectable, NgZone, Output, Input, NgModule, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';\nimport { coerceElement, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { auditTime, takeUntil } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Options to pass to the animationstart listener.\n * @type {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nconst listenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/\\@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nclass AutofillMonitor {\n    /**\n     * @param {?} _platform\n     * @param {?} _ngZone\n     */\n    constructor(_platform, _ngZone) {\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._monitoredElements = new Map();\n    }\n    /**\n     * @param {?} elementOrRef\n     * @return {?}\n     */\n    monitor(elementOrRef) {\n        if (!this._platform.isBrowser) {\n            return EMPTY;\n        }\n        /** @type {?} */\n        const element = coerceElement(elementOrRef);\n        /** @type {?} */\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            return info.subject.asObservable();\n        }\n        /** @type {?} */\n        const result = new Subject();\n        /** @type {?} */\n        const cssClass = 'cdk-text-field-autofilled';\n        /** @type {?} */\n        const listener = (/** @type {?} */ (((/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            // Animation events fire on initial element render, we check for the presence of the autofill\n            // CSS class to make sure this is a real change in state, not just the initial render before\n            // we fire off events.\n            if (event.animationName === 'cdk-text-field-autofill-start' &&\n                !element.classList.contains(cssClass)) {\n                element.classList.add(cssClass);\n                this._ngZone.run((/**\n                 * @return {?}\n                 */\n                () => result.next({ target: (/** @type {?} */ (event.target)), isAutofilled: true })));\n            }\n            else if (event.animationName === 'cdk-text-field-autofill-end' &&\n                element.classList.contains(cssClass)) {\n                element.classList.remove(cssClass);\n                this._ngZone.run((/**\n                 * @return {?}\n                 */\n                () => result.next({ target: (/** @type {?} */ (event.target)), isAutofilled: false })));\n            }\n        }))));\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            element.addEventListener('animationstart', listener, listenerOptions);\n            element.classList.add('cdk-text-field-autofill-monitored');\n        }));\n        this._monitoredElements.set(element, {\n            subject: result,\n            unlisten: (/**\n             * @return {?}\n             */\n            () => {\n                element.removeEventListener('animationstart', listener, listenerOptions);\n            })\n        });\n        return result.asObservable();\n    }\n    /**\n     * @param {?} elementOrRef\n     * @return {?}\n     */\n    stopMonitoring(elementOrRef) {\n        /** @type {?} */\n        const element = coerceElement(elementOrRef);\n        /** @type {?} */\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            info.unlisten();\n            info.subject.complete();\n            element.classList.remove('cdk-text-field-autofill-monitored');\n            element.classList.remove('cdk-text-field-autofilled');\n            this._monitoredElements.delete(element);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._monitoredElements.forEach((/**\n         * @param {?} _info\n         * @param {?} element\n         * @return {?}\n         */\n        (_info, element) => this.stopMonitoring(element)));\n    }\n}\nAutofillMonitor.ɵfac = function AutofillMonitor_Factory(t) { return new (t || AutofillMonitor)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nAutofillMonitor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: AutofillMonitor, factory: AutofillMonitor.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nAutofillMonitor.ctorParameters = () => [\n    { type: Platform },\n    { type: NgZone }\n];\n/** @nocollapse */ AutofillMonitor.ngInjectableDef = ɵɵdefineInjectable({ factory: function AutofillMonitor_Factory() { return new AutofillMonitor(ɵɵinject(Platform), ɵɵinject(NgZone)); }, token: AutofillMonitor, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AutofillMonitor, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }]; }, null); })();\n/**\n * A directive that can be used to monitor the autofill state of an input.\n */\nclass CdkAutofill {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _autofillMonitor\n     */\n    constructor(_elementRef, _autofillMonitor) {\n        this._elementRef = _elementRef;\n        this._autofillMonitor = _autofillMonitor;\n        /**\n         * Emits when the autofill state of the element changes.\n         */\n        this.cdkAutofill = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._autofillMonitor\n            .monitor(this._elementRef)\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => this.cdkAutofill.emit(event)));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._autofillMonitor.stopMonitoring(this._elementRef);\n    }\n}\nCdkAutofill.ɵfac = function CdkAutofill_Factory(t) { return new (t || CdkAutofill)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(AutofillMonitor)); };\nCdkAutofill.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkAutofill, selectors: [[\"\", \"cdkAutofill\", \"\"]], outputs: { cdkAutofill: \"cdkAutofill\" } });\n/** @nocollapse */\nCdkAutofill.ctorParameters = () => [\n    { type: ElementRef },\n    { type: AutofillMonitor }\n];\nCdkAutofill.propDecorators = {\n    cdkAutofill: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAutofill, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkAutofill]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: AutofillMonitor }]; }, { cdkAutofill: [{\n            type: Output\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\nclass CdkTextareaAutosize {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _platform\n     * @param {?} _ngZone\n     */\n    constructor(_elementRef, _platform, _ngZone) {\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._destroyed = new Subject();\n        this._enabled = true;\n        /**\n         * Value of minRows as of last resize. If the minRows has decreased, the\n         * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n         * does not have the same problem because it does not affect the textarea's scrollHeight.\n         */\n        this._previousMinRows = -1;\n        this._textareaElement = (/** @type {?} */ (this._elementRef.nativeElement));\n    }\n    /**\n     * Minimum amount of rows in the textarea.\n     * @return {?}\n     */\n    get minRows() { return this._minRows; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set minRows(value) {\n        this._minRows = value;\n        this._setMinHeight();\n    }\n    /**\n     * Maximum amount of rows in the textarea.\n     * @return {?}\n     */\n    get maxRows() { return this._maxRows; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set maxRows(value) {\n        this._maxRows = value;\n        this._setMaxHeight();\n    }\n    /**\n     * Whether autosizing is enabled or not\n     * @return {?}\n     */\n    get enabled() { return this._enabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set enabled(value) {\n        value = coerceBooleanProperty(value);\n        // Only act if the actual value changed. This specifically helps to not run\n        // resizeToFitContent too early (i.e. before ngAfterViewInit)\n        if (this._enabled !== value) {\n            (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n        }\n    }\n    /**\n     * Sets the minimum height of the textarea as determined by minRows.\n     * @return {?}\n     */\n    _setMinHeight() {\n        /** @type {?} */\n        const minHeight = this.minRows && this._cachedLineHeight ?\n            `${this.minRows * this._cachedLineHeight}px` : null;\n        if (minHeight) {\n            this._textareaElement.style.minHeight = minHeight;\n        }\n    }\n    /**\n     * Sets the maximum height of the textarea as determined by maxRows.\n     * @return {?}\n     */\n    _setMaxHeight() {\n        /** @type {?} */\n        const maxHeight = this.maxRows && this._cachedLineHeight ?\n            `${this.maxRows * this._cachedLineHeight}px` : null;\n        if (maxHeight) {\n            this._textareaElement.style.maxHeight = maxHeight;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            // Remember the height which we started with in case autosizing is disabled\n            this._initialHeight = this._textareaElement.style.height;\n            this.resizeToFitContent();\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                fromEvent(window, 'resize')\n                    .pipe(auditTime(16), takeUntil(this._destroyed))\n                    .subscribe((/**\n                 * @return {?}\n                 */\n                () => this.resizeToFitContent(true)));\n            }));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     * @private\n     * @return {?}\n     */\n    _cacheTextareaLineHeight() {\n        if (this._cachedLineHeight) {\n            return;\n        }\n        // Use a clone element because we have to override some styles.\n        /** @type {?} */\n        let textareaClone = (/** @type {?} */ (this._textareaElement.cloneNode(false)));\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '0';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = '';\n        // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n        textareaClone.style.overflow = 'hidden';\n        (/** @type {?} */ (this._textareaElement.parentNode)).appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.clientHeight;\n        (/** @type {?} */ (this._textareaElement.parentNode)).removeChild(textareaClone);\n        // Min and max heights have to be re-calculated if the cached line height changes\n        this._setMinHeight();\n        this._setMaxHeight();\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this._platform.isBrowser) {\n            this.resizeToFitContent();\n        }\n    }\n    /**\n     * Resize the textarea to fit its content.\n     * @param {?=} force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     * @return {?}\n     */\n    resizeToFitContent(force = false) {\n        // If autosizing is disabled, just skip everything else\n        if (!this._enabled) {\n            return;\n        }\n        this._cacheTextareaLineHeight();\n        // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n        if (!this._cachedLineHeight) {\n            return;\n        }\n        /** @type {?} */\n        const textarea = (/** @type {?} */ (this._elementRef.nativeElement));\n        /** @type {?} */\n        const value = textarea.value;\n        // Only resize if the value or minRows have changed since these calculations can be expensive.\n        if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n            return;\n        }\n        /** @type {?} */\n        const placeholderText = textarea.placeholder;\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n        // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n        // need to be removed temporarily.\n        textarea.classList.add('cdk-textarea-autosize-measuring');\n        textarea.placeholder = '';\n        // The cdk-textarea-autosize-measuring class includes a 2px padding to workaround an issue with\n        // Chrome, so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n        /** @type {?} */\n        const height = textarea.scrollHeight - 4;\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = `${height}px`;\n        textarea.classList.remove('cdk-textarea-autosize-measuring');\n        textarea.placeholder = placeholderText;\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            if (typeof requestAnimationFrame !== 'undefined') {\n                requestAnimationFrame((/**\n                 * @return {?}\n                 */\n                () => this._scrollToCaretPosition(textarea)));\n            }\n            else {\n                setTimeout((/**\n                 * @return {?}\n                 */\n                () => this._scrollToCaretPosition(textarea)));\n            }\n        }));\n        this._previousValue = value;\n        this._previousMinRows = this._minRows;\n    }\n    /**\n     * Resets the textarea to its original size\n     * @return {?}\n     */\n    reset() {\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\n        if (this._initialHeight === undefined) {\n            return;\n        }\n        this._textareaElement.style.height = this._initialHeight;\n    }\n    /**\n     * @return {?}\n     */\n    _noopInputHandler() {\n        // no-op handler that ensures we're running change detection on input events.\n    }\n    /**\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n     * prevent it from scrolling to the caret position. We need to re-set the selection\n     * in order for it to scroll to the proper position.\n     * @private\n     * @param {?} textarea\n     * @return {?}\n     */\n    _scrollToCaretPosition(textarea) {\n        const { selectionStart, selectionEnd } = textarea;\n        // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n        // between the time we requested the animation frame and when it was executed.\n        // Also note that we have to assert that the textarea is focused before we set the\n        // selection range. Setting the selection range on a non-focused textarea will cause\n        // it to receive focus on IE and Edge.\n        if (!this._destroyed.isStopped && document.activeElement === textarea) {\n            textarea.setSelectionRange(selectionStart, selectionEnd);\n        }\n    }\n}\nCdkTextareaAutosize.ɵfac = function CdkTextareaAutosize_Factory(t) { return new (t || CdkTextareaAutosize)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nCdkTextareaAutosize.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTextareaAutosize, selectors: [[\"textarea\", \"cdkTextareaAutosize\", \"\"]], hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\"], hostBindings: function CdkTextareaAutosize_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"input\", function CdkTextareaAutosize_input_HostBindingHandler() { return ctx._noopInputHandler(); });\n    } }, inputs: { minRows: [\"cdkAutosizeMinRows\", \"minRows\"], maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"], enabled: [\"cdkTextareaAutosize\", \"enabled\"] }, exportAs: [\"cdkTextareaAutosize\"] });\n/** @nocollapse */\nCdkTextareaAutosize.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: NgZone }\n];\nCdkTextareaAutosize.propDecorators = {\n    minRows: [{ type: Input, args: ['cdkAutosizeMinRows',] }],\n    maxRows: [{ type: Input, args: ['cdkAutosizeMaxRows',] }],\n    enabled: [{ type: Input, args: ['cdkTextareaAutosize',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTextareaAutosize, [{\n        type: Directive,\n        args: [{\n                selector: 'textarea[cdkTextareaAutosize]',\n                exportAs: 'cdkTextareaAutosize',\n                host: {\n                    'class': 'cdk-textarea-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1',\n                    '(input)': '_noopInputHandler()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }]; }, { minRows: [{\n            type: Input,\n            args: ['cdkAutosizeMinRows']\n        }], maxRows: [{\n            type: Input,\n            args: ['cdkAutosizeMaxRows']\n        }], enabled: [{\n            type: Input,\n            args: ['cdkTextareaAutosize']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass TextFieldModule {\n}\nTextFieldModule.ɵfac = function TextFieldModule_Factory(t) { return new (t || TextFieldModule)(); };\nTextFieldModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: TextFieldModule });\nTextFieldModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [PlatformModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TextFieldModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [CdkAutofill, CdkTextareaAutosize],\n                imports: [PlatformModule],\n                exports: [CdkAutofill, CdkTextareaAutosize]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TextFieldModule, { declarations: function () { return [CdkAutofill, CdkTextareaAutosize]; }, imports: function () { return [PlatformModule]; }, exports: function () { return [CdkAutofill, CdkTextareaAutosize]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}