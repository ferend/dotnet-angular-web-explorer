{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { Component, ElementRef, EventEmitter, Inject, Optional, ChangeDetectorRef, ViewChild, ViewEncapsulation, ChangeDetectionStrategy, Injectable, InjectionToken, Injector, SkipSelf, TemplateRef, Directive, Input, NgModule } from '@angular/core';\nimport { DOCUMENT, Location, CommonModule } from '@angular/common';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, PortalInjector, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { FocusTrapFactory } from '@angular/cdk/a11y';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Subject, defer, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayConfig, OverlayContainer, OverlayModule } from '@angular/cdk/overlay';\nimport { MatCommonModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n * @template D\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/common';\nfunction MatDialogContainer_ng_template_0_Template(rf, ctx) {}\nclass MatDialogConfig {\n  constructor() {\n    /**\n     * The ARIA role of the dialog element.\n     */\n    this.role = 'dialog';\n    /**\n     * Custom class for the overlay pane.\n     */\n    this.panelClass = '';\n    /**\n     * Whether the dialog has a backdrop.\n     */\n    this.hasBackdrop = true;\n    /**\n     * Custom class for the backdrop.\n     */\n    this.backdropClass = '';\n    /**\n     * Whether the user can use escape or clicking on the backdrop to close the modal.\n     */\n    this.disableClose = false;\n    /**\n     * Width of the dialog.\n     */\n    this.width = '';\n    /**\n     * Height of the dialog.\n     */\n    this.height = '';\n    /**\n     * Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw.\n     */\n    this.maxWidth = '80vw';\n    /**\n     * Data being injected into the child component.\n     */\n    this.data = null;\n    /**\n     * ID of the element that describes the dialog.\n     */\n    this.ariaDescribedBy = null;\n    /**\n     * ID of the element that labels the dialog.\n     */\n    this.ariaLabelledBy = null;\n    /**\n     * Aria label to assign to the dialog element.\n     */\n    this.ariaLabel = null;\n    /**\n     * Whether the dialog should focus the first focusable element on open.\n     */\n    this.autoFocus = true;\n    /**\n     * Whether the dialog should restore focus to the\n     * previously-focused element, after it's closed.\n     */\n    this.restoreFocus = true;\n    /**\n     * Whether the dialog should close when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     */\n    this.closeOnNavigation = true;\n    // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst animationBody = [\n// Note: The `enter` animation transitions to `transform: none`, because for some reason\n// specifying the transform explicitly, causes IE both to blur the dialog content and\n// decimate the animation performance. Leaving it as `none` solves both issues.\nstate('void, exit', style({\n  opacity: 0,\n  transform: 'scale(0.7)'\n})), state('enter', style({\n  transform: 'none'\n})), transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({\n  transform: 'none',\n  opacity: 1\n}))), transition('* => void, * => exit', animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({\n  opacity: 0\n})))];\n/**\n * Animations used by MatDialog.\n * \\@docs-private\n * @type {?}\n */\nconst matDialogAnimations = {\n  /**\n   * Animation that is applied on the dialog container by defalt.\n   */\n  dialogContainer: trigger('dialogContainer', animationBody),\n  /**\n   * @deprecated \\@breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead.\n   */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * \\@docs-private\n * @return {?}\n */\nfunction throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * \\@docs-private\n */\nclass MatDialogContainer extends BasePortalOutlet {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _focusTrapFactory\n   * @param {?} _changeDetectorRef\n   * @param {?} _document\n   * @param {?} _config\n   */\n  constructor(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, _config) {\n    super();\n    this._elementRef = _elementRef;\n    this._focusTrapFactory = _focusTrapFactory;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._document = _document;\n    this._config = _config;\n    /**\n     * Element that was focused before the dialog was opened. Save this to restore upon close.\n     */\n    this._elementFocusedBeforeDialogWasOpened = null;\n    /**\n     * State of the dialog animation.\n     */\n    this._state = 'enter';\n    /**\n     * Emits when an animation state changes.\n     */\n    this._animationStateChanged = new EventEmitter();\n    this._ariaLabelledBy = _config.ariaLabelledBy || null;\n  }\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @template T\n   * @param {?} portal Portal to be attached as the dialog content.\n   * @return {?}\n   */\n  attachComponentPortal(portal) {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @template C\n   * @param {?} portal Portal to be attached as the dialog content.\n   * @return {?}\n   */\n  attachTemplatePortal(portal) {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n  /**\n   * Moves the focus inside the focus trap.\n   * @private\n   * @return {?}\n   */\n  _trapFocus() {\n    /** @type {?} */\n    const element = this._elementRef.nativeElement;\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(element);\n    }\n    // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    } else {\n      /** @type {?} */\n      const activeElement = this._document.activeElement;\n      // Otherwise ensure that focus is on the dialog container. It's possible that a different\n      // component tried to move focus while the open animation was running. See:\n      // https://github.com/angular/components/issues/16215. Note that we only want to do this\n      // if the focus isn't inside the dialog already, because it's possible that the consumer\n      // turned off `autoFocus` in order to move focus themselves.\n      if (activeElement !== element && !element.contains(activeElement)) {\n        element.focus();\n      }\n    }\n  }\n  /**\n   * Restores focus to the element that was focused before the dialog opened.\n   * @private\n   * @return {?}\n   */\n  _restoreFocus() {\n    /** @type {?} */\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n  /**\n   * Saves a reference to the element that was focused before the dialog was opened.\n   * @private\n   * @return {?}\n   */\n  _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = /** @type {?} */this._document.activeElement;\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(\n        /**\n        * @return {?}\n        */\n        () => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n  /**\n   * Callback, invoked whenever an animation on the host completes.\n   * @param {?} event\n   * @return {?}\n   */\n  _onAnimationDone(event) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n    this._animationStateChanged.emit(event);\n  }\n  /**\n   * Callback, invoked when an animation on the host starts.\n   * @param {?} event\n   * @return {?}\n   */\n  _onAnimationStart(event) {\n    this._animationStateChanged.emit(event);\n  }\n  /**\n   * Starts the dialog exit animation.\n   * @return {?}\n   */\n  _startExitAnimation() {\n    this._state = 'exit';\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\nMatDialogContainer.ɵfac = function MatDialogContainer_Factory(t) {\n  return new (t || MatDialogContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MatDialogConfig));\n};\nMatDialogContainer.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatDialogContainer,\n  selectors: [[\"mat-dialog-container\"]],\n  viewQuery: function MatDialogContainer_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    }\n  },\n  hostAttrs: [\"tabindex\", \"-1\", \"aria-modal\", \"true\", 1, \"mat-dialog-container\"],\n  hostVars: 6,\n  hostBindings: function MatDialogContainer_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵsyntheticHostListener(\"@dialogContainer.start\", function MatDialogContainer_animation_dialogContainer_start_HostBindingHandler($event) {\n        return ctx._onAnimationStart($event);\n      })(\"@dialogContainer.done\", function MatDialogContainer_animation_dialogContainer_done_HostBindingHandler($event) {\n        return ctx._onAnimationDone($event);\n      });\n    }\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"id\", ctx._id)(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n      ɵngcc0.ɵɵsyntheticHostProperty(\"@dialogContainer\", ctx._state);\n    }\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkPortalOutlet\", \"\"]],\n  template: function MatDialogContainer_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, MatDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    }\n  },\n  dependencies: [ɵngcc2.CdkPortalOutlet],\n  styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}@media (-ms-high-contrast:active){.mat-dialog-container{outline:solid 1px}}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base{margin-left:0;margin-right:8px}\"],\n  encapsulation: 2,\n  data: {\n    animation: [matDialogAnimations.dialogContainer]\n  }\n});\n/** @nocollapse */\nMatDialogContainer.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: FocusTrapFactory\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: MatDialogConfig\n}];\nMatDialogContainer.propDecorators = {\n  _portalOutlet: [{\n    type: ViewChild,\n    args: [CdkPortalOutlet, {\n      static: true\n    }]\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogContainer, [{\n    type: Component,\n    args: [{\n      selector: 'mat-dialog-container',\n      template: \"<ng-template cdkPortalOutlet></ng-template>\",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.Default,\n      animations: [matDialogAnimations.dialogContainer],\n      host: {\n        'class': 'mat-dialog-container',\n        'tabindex': '-1',\n        'aria-modal': 'true',\n        '[attr.id]': '_id',\n        '[attr.role]': '_config.role',\n        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n        '[attr.aria-label]': '_config.ariaLabel',\n        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n        '[@dialogContainer]': '_state',\n        '(@dialogContainer.start)': '_onAnimationStart($event)',\n        '(@dialogContainer.done)': '_onAnimationDone($event)'\n      },\n      styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}@media (-ms-high-contrast:active){.mat-dialog-container{outline:solid 1px}}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base{margin-left:0;margin-right:8px}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.FocusTrapFactory\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: MatDialogConfig\n    }];\n  }, {\n    _portalOutlet: [{\n      type: ViewChild,\n      args: [CdkPortalOutlet, {\n        static: true\n      }]\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(jelbourn): resizing\n// Counter for unique dialog ids.\n/** @type {?} */\nlet uniqueId = 0;\n/**\n * Reference to a dialog opened via the MatDialog service.\n * @template T, R\n */\nclass MatDialogRef {\n  /**\n   * @param {?} _overlayRef\n   * @param {?} _containerInstance\n   * @param {?=} _location\n   * @param {?=} id\n   */\n  constructor(_overlayRef, _containerInstance,\n  // @breaking-change 8.0.0 `_location` parameter to be removed.\n  _location, id = `mat-dialog-${uniqueId++}`) {\n    this._overlayRef = _overlayRef;\n    this._containerInstance = _containerInstance;\n    this.id = id;\n    /**\n     * Whether the user is allowed to close the dialog.\n     */\n    this.disableClose = this._containerInstance._config.disableClose;\n    /**\n     * Subject for notifying the user that the dialog has finished opening.\n     */\n    this._afterOpened = new Subject();\n    /**\n     * Subject for notifying the user that the dialog has finished closing.\n     */\n    this._afterClosed = new Subject();\n    /**\n     * Subject for notifying the user that the dialog has started closing.\n     */\n    this._beforeClosed = new Subject();\n    /**\n     * Current state of the dialog.\n     */\n    this._state = 0 /* OPEN */;\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(filter(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => event.phaseName === 'done' && event.toState === 'enter'), take(1)).subscribe(\n    /**\n    * @return {?}\n    */\n    () => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(filter(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => event.phaseName === 'done' && event.toState === 'exit'), take(1)).subscribe(\n    /**\n    * @return {?}\n    */\n    () => {\n      clearTimeout(this._closeFallbackTimeout);\n      this._overlayRef.dispose();\n    });\n    _overlayRef.detachments().subscribe(\n    /**\n    * @return {?}\n    */\n    () => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = /** @type {?} */null;\n      this._overlayRef.dispose();\n    });\n    _overlayRef.keydownEvents().pipe(filter(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => {\n      return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n    })).subscribe(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => {\n      event.preventDefault();\n      this.close();\n    });\n  }\n  /**\n   * Close the dialog.\n   * @param {?=} dialogResult Optional result to return to the dialog opener.\n   * @return {?}\n   */\n  close(dialogResult) {\n    this._result = dialogResult;\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(filter(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => event.phaseName === 'start'), take(1)).subscribe(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._state = 2 /* CLOSED */;\n      this._overlayRef.detachBackdrop();\n      // The logic that disposes of the overlay depends on the exit animation completing, however\n      // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n      // timeout which will clean everything up if the animation hasn't fired within the specified\n      // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n      // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n      this._closeFallbackTimeout = setTimeout(\n      /**\n      * @return {?}\n      */\n      () => {\n        this._overlayRef.dispose();\n      }, event.totalTime + 100);\n    });\n    this._containerInstance._startExitAnimation();\n    this._state = 1 /* CLOSING */;\n  }\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @return {?}\n   */\n  afterOpened() {\n    return this._afterOpened.asObservable();\n  }\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   * @return {?}\n   */\n  afterClosed() {\n    return this._afterClosed.asObservable();\n  }\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @return {?}\n   */\n  beforeClosed() {\n    return this._beforeClosed.asObservable();\n  }\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   * @return {?}\n   */\n  backdropClick() {\n    return this._overlayRef.backdropClick();\n  }\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   * @return {?}\n   */\n  keydownEvents() {\n    return this._overlayRef.keydownEvents();\n  }\n  /**\n   * Updates the dialog's position.\n   * @template THIS\n   * @this {THIS}\n   * @param {?=} position New dialog position.\n   * @return {THIS}\n   */\n  updatePosition(position) {\n    /** @type {?} */\n    let strategy = /** @type {?} */this._getPositionStrategy();\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n    /** @type {?} */this._overlayRef.updatePosition();\n    return (/** @type {?} */this\n    );\n  }\n  /**\n   * Updates the dialog's width and height.\n   * @template THIS\n   * @this {THIS}\n   * @param {?=} width New width of the dialog.\n   * @param {?=} height New height of the dialog.\n   * @return {THIS}\n   */\n  updateSize(width = '', height = '') {\n    /** @type {?} */this._getPositionStrategy().width(width).height(height);\n    /** @type {?} */this._overlayRef.updatePosition();\n    return (/** @type {?} */this\n    );\n  }\n  /**\n   * Add a CSS class or an array of classes to the overlay pane.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} classes\n   * @return {THIS}\n   */\n  addPanelClass(classes) {\n    /** @type {?} */this._overlayRef.addPanelClass(classes);\n    return (/** @type {?} */this\n    );\n  }\n  /**\n   * Remove a CSS class or an array of classes from the overlay pane.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} classes\n   * @return {THIS}\n   */\n  removePanelClass(classes) {\n    /** @type {?} */this._overlayRef.removePanelClass(classes);\n    return (/** @type {?} */this\n    );\n  }\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * \\@breaking-change 8.0.0\n   * @return {?}\n   */\n  afterOpen() {\n    return this.afterOpened();\n  }\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * \\@breaking-change 8.0.0\n   * @return {?}\n   */\n  beforeClose() {\n    return this.beforeClosed();\n  }\n  /**\n   * Gets the current state of the dialog's lifecycle.\n   * @return {?}\n   */\n  getState() {\n    return this._state;\n  }\n  /**\n   * Fetches the position strategy object from the overlay ref.\n   * @private\n   * @return {?}\n   */\n  _getPositionStrategy() {\n    return (/** @type {?} */this._overlayRef.getConfig().positionStrategy\n    );\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to access the data that was passed in to a dialog.\n * @type {?}\n */\nconst MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/**\n * Injection token that can be used to specify default dialog options.\n * @type {?}\n */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/**\n * Injection token that determines the scroll handling while the dialog is open.\n * @type {?}\n */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n  return (\n    /**\n    * @return {?}\n    */\n    () => overlay.scrollStrategies.block()\n  );\n}\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return (\n    /**\n    * @return {?}\n    */\n    () => overlay.scrollStrategies.block()\n  );\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * Service to open Material Design modal dialogs.\n */\nclass MatDialog {\n  /**\n   * @param {?} _overlay\n   * @param {?} _injector\n   * @param {?} _location\n   * @param {?} _defaultOptions\n   * @param {?} scrollStrategy\n   * @param {?} _parentDialog\n   * @param {?} _overlayContainer\n   */\n  constructor(_overlay, _injector, _location, _defaultOptions, scrollStrategy, _parentDialog, _overlayContainer) {\n    this._overlay = _overlay;\n    this._injector = _injector;\n    this._location = _location;\n    this._defaultOptions = _defaultOptions;\n    this._parentDialog = _parentDialog;\n    this._overlayContainer = _overlayContainer;\n    this._openDialogsAtThisLevel = [];\n    this._afterAllClosedAtThisLevel = new Subject();\n    this._afterOpenedAtThisLevel = new Subject();\n    this._ariaHiddenElements = new Map();\n    // TODO (jelbourn): tighten the typing right-hand side of this expression.\n    /**\n     * Stream that emits when all open dialog have finished closing.\n     * Will emit on subscribe if there are no open dialogs to begin with.\n     */\n    this.afterAllClosed = /** @type {?} */defer(\n    /**\n    * @return {?}\n    */\n    () => this.openDialogs.length ? this._afterAllClosed : this._afterAllClosed.pipe(startWith(undefined)));\n    this._scrollStrategy = scrollStrategy;\n  }\n  /**\n   * Keeps track of the currently-open dialogs.\n   * @return {?}\n   */\n  get openDialogs() {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @return {?}\n   */\n  get afterOpened() {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * \\@breaking-change 8.0.0\n   * @return {?}\n   */\n  get afterOpen() {\n    return this.afterOpened;\n  }\n  /**\n   * @return {?}\n   */\n  get _afterAllClosed() {\n    /** @type {?} */\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n  /**\n   * Opens a modal dialog containing the given component.\n   * @template T, D, R\n   * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param {?=} config Extra configuration options.\n   * @return {?} Reference to the newly-opened dialog.\n   */\n  open(componentOrTemplateRef, config) {\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n    /** @type {?} */\n    const overlayRef = this._createOverlay(config);\n    /** @type {?} */\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    /** @type {?} */\n    const dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(\n    /**\n    * @return {?}\n    */\n    () => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n    return dialogRef;\n  }\n  /**\n   * Closes all of the currently-open dialogs.\n   * @return {?}\n   */\n  closeAll() {\n    this._closeDialogs(this.openDialogs);\n  }\n  /**\n   * Finds an open dialog by its id.\n   * @param {?} id ID to use when looking up the dialog.\n   * @return {?}\n   */\n  getDialogById(id) {\n    return this.openDialogs.find(\n    /**\n    * @param {?} dialog\n    * @return {?}\n    */\n    dialog => dialog.id === id);\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @private\n   * @param {?} config The dialog configuration.\n   * @return {?} A promise resolving to the OverlayRef for the created overlay.\n   */\n  _createOverlay(config) {\n    /** @type {?} */\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n  /**\n   * Creates an overlay config from a dialog config.\n   * @private\n   * @param {?} dialogConfig The dialog configuration.\n   * @return {?} The overlay configuration.\n   */\n  _getOverlayConfig(dialogConfig) {\n    /** @type {?} */\n    const state$$1 = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n    if (dialogConfig.backdropClass) {\n      state$$1.backdropClass = dialogConfig.backdropClass;\n    }\n    return state$$1;\n  }\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @private\n   * @param {?} overlay Reference to the dialog's underlying overlay.\n   * @param {?} config The dialog configuration.\n   * @return {?} A promise resolving to a ComponentRef for the attached container.\n   */\n  _attachDialogContainer(overlay, config) {\n    /** @type {?} */\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    /** @type {?} */\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([[MatDialogConfig, config]]));\n    /** @type {?} */\n    const containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector, config.componentFactoryResolver);\n    /** @type {?} */\n    const containerRef = overlay.attach(containerPortal);\n    return containerRef.instance;\n  }\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @private\n   * @template T, R\n   * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param {?} dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n   * @param {?} config The dialog configuration.\n   * @return {?} A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    /** @type {?} */\n    const dialogRef = new MatDialogRef(overlayRef, dialogContainer, this._location, config.id);\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(\n      /**\n      * @return {?}\n      */\n      () => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, /** @type {?} */null, /** @type {?} */{\n        $implicit: config.data,\n        dialogRef\n      }));\n    } else {\n      /** @type {?} */\n      const injector = this._createInjector(config, dialogRef, dialogContainer);\n      /** @type {?} */\n      const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n    dialogRef.updateSize(config.width, config.height).updatePosition(config.position);\n    return dialogRef;\n  }\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @private\n   * @template T\n   * @param {?} config Config object that is used to construct the dialog.\n   * @param {?} dialogRef Reference to the dialog.\n   * @param {?} dialogContainer\n   * @return {?} The custom injector that can be used inside the dialog.\n   */\n  _createInjector(config, dialogRef, dialogContainer) {\n    /** @type {?} */\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    /** @type {?} */\n    const injectionTokens = new WeakMap([[MatDialogContainer, dialogContainer], [MAT_DIALOG_DATA, config.data], [MatDialogRef, dialogRef]]);\n    if (config.direction && (!userInjector || !userInjector.get(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: of()\n      });\n    }\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @private\n   * @param {?} dialogRef Dialog to be removed.\n   * @return {?}\n   */\n  _removeOpenDialog(dialogRef) {\n    /** @type {?} */\n    const index = this.openDialogs.indexOf(dialogRef);\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach(\n        /**\n        * @param {?} previousValue\n        * @param {?} element\n        * @return {?}\n        */\n        (previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   * @private\n   * @return {?}\n   */\n  _hideNonDialogContentFromAssistiveTechnology() {\n    /** @type {?} */\n    const overlayContainer = this._overlayContainer.getContainerElement();\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      /** @type {?} */\n      const siblings = overlayContainer.parentElement.children;\n      for (let i = siblings.length - 1; i > -1; i--) {\n        /** @type {?} */\n        let sibling = siblings[i];\n        if (sibling !== overlayContainer && sibling.nodeName !== 'SCRIPT' && sibling.nodeName !== 'STYLE' && !sibling.hasAttribute('aria-live')) {\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n  /**\n   * Closes all of the dialogs in an array.\n   * @private\n   * @param {?} dialogs\n   * @return {?}\n   */\n  _closeDialogs(dialogs) {\n    /** @type {?} */\n    let i = dialogs.length;\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n}\nMatDialog.ɵfac = function MatDialog_Factory(t) {\n  return new (t || MatDialog)(ɵngcc0.ɵɵinject(ɵngcc3.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_SCROLL_STRATEGY), ɵngcc0.ɵɵinject(MatDialog, 12), ɵngcc0.ɵɵinject(ɵngcc3.OverlayContainer));\n};\nMatDialog.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: MatDialog,\n  factory: MatDialog.ɵfac\n});\n/** @nocollapse */\nMatDialog.ctorParameters = () => [{\n  type: Overlay\n}, {\n  type: Injector\n}, {\n  type: Location,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: MatDialogConfig,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_DIALOG_DEFAULT_OPTIONS]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_DIALOG_SCROLL_STRATEGY]\n  }]\n}, {\n  type: MatDialog,\n  decorators: [{\n    type: Optional\n  }, {\n    type: SkipSelf\n  }]\n}, {\n  type: OverlayContainer\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialog, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ɵngcc3.Overlay\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: ɵngcc4.Location,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: MatDialogConfig,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_DIALOG_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_DIALOG_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: MatDialog,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: ɵngcc3.OverlayContainer\n    }];\n  }, null);\n})();\n/**\n * Applies default options to the dialog config.\n * @param {?=} config Config to be modified.\n * @param {?=} defaultOptions Default options provided.\n * @return {?} The new configuration object.\n */\nfunction _applyConfigDefaults(config, defaultOptions) {\n  return Object.assign({}, defaultOptions, config);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Counter used to generate unique IDs for dialog elements.\n * @type {?}\n */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nclass MatDialogClose {\n  /**\n   * @param {?} dialogRef\n   * @param {?} _elementRef\n   * @param {?} _dialog\n   */\n  constructor(dialogRef, _elementRef, _dialog) {\n    this.dialogRef = dialogRef;\n    this._elementRef = _elementRef;\n    this._dialog = _dialog;\n    /**\n     * Default to \"button\" to prevents accidental form submits.\n     */\n    this.type = 'button';\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = /** @type {?} */getClosestDialog(this._elementRef, this._dialog.openDialogs);\n    }\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n  ngOnChanges(changes) {\n    /** @type {?} */\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\nMatDialogClose.ɵfac = function MatDialogClose_Factory(t) {\n  return new (t || MatDialogClose)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog));\n};\nMatDialogClose.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatDialogClose,\n  selectors: [[\"\", \"mat-dialog-close\", \"\"], [\"\", \"matDialogClose\", \"\"]],\n  hostVars: 2,\n  hostBindings: function MatDialogClose_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function MatDialogClose_click_HostBindingHandler() {\n        return ctx.dialogRef.close(ctx.dialogResult);\n      });\n    }\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel || null)(\"type\", ctx.type);\n    }\n  },\n  inputs: {\n    type: \"type\",\n    dialogResult: [\"mat-dialog-close\", \"dialogResult\"],\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"]\n  },\n  exportAs: [\"matDialogClose\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/** @nocollapse */\nMatDialogClose.ctorParameters = () => [{\n  type: MatDialogRef,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: ElementRef\n}, {\n  type: MatDialog\n}];\nMatDialogClose.propDecorators = {\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  type: [{\n    type: Input\n  }],\n  dialogResult: [{\n    type: Input,\n    args: ['mat-dialog-close']\n  }],\n  _matDialogClose: [{\n    type: Input,\n    args: ['matDialogClose']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogClose, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-dialog-close], [matDialogClose]',\n      exportAs: 'matDialogClose',\n      host: {\n        '(click)': 'dialogRef.close(dialogResult)',\n        '[attr.aria-label]': 'ariaLabel || null',\n        '[attr.type]': 'type'\n      }\n    }]\n  }], function () {\n    return [{\n      type: MatDialogRef,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: MatDialog\n    }];\n  }, {\n    type: [{\n      type: Input\n    }],\n    dialogResult: [{\n      type: Input,\n      args: ['mat-dialog-close']\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    _matDialogClose: [{\n      type: Input,\n      args: ['matDialogClose']\n    }]\n  });\n})();\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nclass MatDialogTitle {\n  /**\n   * @param {?} _dialogRef\n   * @param {?} _elementRef\n   * @param {?} _dialog\n   */\n  constructor(_dialogRef, _elementRef, _dialog) {\n    this._dialogRef = _dialogRef;\n    this._elementRef = _elementRef;\n    this._dialog = _dialog;\n    this.id = `mat-dialog-title-${dialogElementUid++}`;\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = /** @type {?} */getClosestDialog(this._elementRef, this._dialog.openDialogs);\n    }\n    if (this._dialogRef) {\n      Promise.resolve().then(\n      /**\n      * @return {?}\n      */\n      () => {\n        /** @type {?} */\n        const container = this._dialogRef._containerInstance;\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\nMatDialogTitle.ɵfac = function MatDialogTitle_Factory(t) {\n  return new (t || MatDialogTitle)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog));\n};\nMatDialogTitle.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatDialogTitle,\n  selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]],\n  hostAttrs: [1, \"mat-dialog-title\"],\n  hostVars: 1,\n  hostBindings: function MatDialogTitle_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n    }\n  },\n  inputs: {\n    id: \"id\"\n  },\n  exportAs: [\"matDialogTitle\"]\n});\n/** @nocollapse */\nMatDialogTitle.ctorParameters = () => [{\n  type: MatDialogRef,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: ElementRef\n}, {\n  type: MatDialog\n}];\nMatDialogTitle.propDecorators = {\n  id: [{\n    type: Input\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogTitle, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-dialog-title], [matDialogTitle]',\n      exportAs: 'matDialogTitle',\n      host: {\n        'class': 'mat-dialog-title',\n        '[id]': 'id'\n      }\n    }]\n  }], function () {\n    return [{\n      type: MatDialogRef,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: MatDialog\n    }];\n  }, {\n    id: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Scrollable content container of a dialog.\n */\nclass MatDialogContent {}\nMatDialogContent.ɵfac = function MatDialogContent_Factory(t) {\n  return new (t || MatDialogContent)();\n};\nMatDialogContent.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatDialogContent,\n  selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]],\n  hostAttrs: [1, \"mat-dialog-content\"]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogContent, [{\n    type: Directive,\n    args: [{\n      selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n      host: {\n        'class': 'mat-dialog-content'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nclass MatDialogActions {}\nMatDialogActions.ɵfac = function MatDialogActions_Factory(t) {\n  return new (t || MatDialogActions)();\n};\nMatDialogActions.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatDialogActions,\n  selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]],\n  hostAttrs: [1, \"mat-dialog-actions\"]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogActions, [{\n    type: Directive,\n    args: [{\n      selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n      host: {\n        'class': 'mat-dialog-actions'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param {?} element Element relative to which to look for a dialog.\n * @param {?} openDialogs References to the currently-open dialogs.\n * @return {?}\n */\nfunction getClosestDialog(element, openDialogs) {\n  /** @type {?} */\n  let parent = element.nativeElement.parentElement;\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n  return parent ? openDialogs.find(\n  /**\n  * @param {?} dialog\n  * @return {?}\n  */\n  dialog => dialog.id === /** @type {?} */parent.id) : null;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatDialogModule {}\nMatDialogModule.ɵfac = function MatDialogModule_Factory(t) {\n  return new (t || MatDialogModule)();\n};\nMatDialogModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatDialogModule\n});\nMatDialogModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER],\n  imports: [CommonModule, OverlayModule, PortalModule, MatCommonModule, MatCommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, OverlayModule, PortalModule, MatCommonModule],\n      exports: [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule],\n      declarations: [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent],\n      providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER],\n      entryComponents: [MatDialogContainer]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDialogModule, {\n    declarations: function () {\n      return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent];\n    },\n    imports: function () {\n      return [CommonModule, OverlayModule, PortalModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule];\n    }\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatDialogModule, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog, throwMatDialogContentAlreadyAttachedError, MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatDialogConfig, MatDialogRef, matDialogAnimations };","map":{"version":3,"names":["animate","state","style","transition","trigger","Component","ElementRef","EventEmitter","Inject","Optional","ChangeDetectorRef","ViewChild","ViewEncapsulation","ChangeDetectionStrategy","Injectable","InjectionToken","Injector","SkipSelf","TemplateRef","Directive","Input","NgModule","DOCUMENT","Location","CommonModule","BasePortalOutlet","CdkPortalOutlet","ComponentPortal","PortalInjector","TemplatePortal","PortalModule","FocusTrapFactory","ESCAPE","hasModifierKey","Subject","defer","of","filter","take","startWith","Directionality","Overlay","OverlayConfig","OverlayContainer","OverlayModule","MatCommonModule","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","MatDialogContainer_ng_template_0_Template","rf","ctx","MatDialogConfig","constructor","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","maxWidth","data","ariaDescribedBy","ariaLabelledBy","ariaLabel","autoFocus","restoreFocus","closeOnNavigation","animationBody","opacity","transform","matDialogAnimations","dialogContainer","slideDialog","throwMatDialogContentAlreadyAttachedError","Error","MatDialogContainer","_elementRef","_focusTrapFactory","_changeDetectorRef","_document","_config","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","attachComponentPortal","portal","_portalOutlet","hasAttached","_savePreviouslyFocusedElement","attachTemplatePortal","_trapFocus","element","nativeElement","_focusTrap","create","focusInitialElementWhenReady","activeElement","contains","focus","_restoreFocus","toFocus","destroy","Promise","resolve","then","_onAnimationDone","event","toState","emit","_onAnimationStart","_startExitAnimation","markForCheck","ɵfac","MatDialogContainer_Factory","t","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","type","selectors","viewQuery","MatDialogContainer_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","hostAttrs","hostVars","hostBindings","MatDialogContainer_HostBindings","ɵɵsyntheticHostListener","MatDialogContainer_animation_dialogContainer_start_HostBindingHandler","$event","MatDialogContainer_animation_dialogContainer_done_HostBindingHandler","ɵɵattribute","_id","ɵɵsyntheticHostProperty","features","ɵɵInheritDefinitionFeature","decls","vars","consts","template","MatDialogContainer_Template","ɵɵtemplate","dependencies","styles","encapsulation","animation","ctorParameters","undefined","decorators","args","propDecorators","static","ngDevMode","ɵsetClassMetadata","selector","None","changeDetection","Default","animations","host","uniqueId","MatDialogRef","_overlayRef","_containerInstance","_location","id","_afterOpened","_afterClosed","_beforeClosed","pipe","phaseName","subscribe","next","complete","clearTimeout","_closeFallbackTimeout","dispose","detachments","_result","componentInstance","keydownEvents","keyCode","preventDefault","close","dialogResult","detachBackdrop","setTimeout","totalTime","afterOpened","asObservable","afterClosed","beforeClosed","backdropClick","updatePosition","position","strategy","_getPositionStrategy","left","right","centerHorizontally","top","bottom","centerVertically","updateSize","addPanelClass","classes","removePanelClass","afterOpen","beforeClose","getState","getConfig","positionStrategy","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","block","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MatDialog","_overlay","_injector","_defaultOptions","scrollStrategy","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","Map","afterAllClosed","openDialogs","length","_afterAllClosed","_scrollStrategy","parent","open","componentOrTemplateRef","config","_applyConfigDefaults","getDialogById","overlayRef","_createOverlay","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","push","_removeOpenDialog","closeAll","_closeDialogs","find","dialog","ngOnDestroy","overlayConfig","_getOverlayConfig","dialogConfig","state$$1","global","direction","minWidth","minHeight","maxHeight","disposeOnNavigation","userInjector","viewContainerRef","injector","WeakMap","containerPortal","componentFactoryResolver","containerRef","attach","instance","$implicit","_createInjector","contentRef","injectionTokens","get","set","value","change","index","indexOf","splice","forEach","previousValue","setAttribute","removeAttribute","clear","overlayContainer","getContainerElement","parentElement","siblings","children","i","sibling","nodeName","hasAttribute","getAttribute","dialogs","MatDialog_Factory","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","defaultOptions","Object","assign","dialogElementUid","MatDialogClose","_dialog","ngOnInit","getClosestDialog","ngOnChanges","changes","proxiedChange","currentValue","MatDialogClose_Factory","ɵdir","ɵɵdefineDirective","MatDialogClose_HostBindings","ɵɵlistener","MatDialogClose_click_HostBindingHandler","inputs","_matDialogClose","exportAs","ɵɵNgOnChangesFeature","MatDialogTitle","_dialogRef","container","MatDialogTitle_Factory","MatDialogTitle_HostBindings","ɵɵhostProperty","MatDialogContent","MatDialogContent_Factory","MatDialogActions","MatDialogActions_Factory","classList","MatDialogModule","MatDialogModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","exports","declarations","entryComponents","ngJitMode","ɵɵsetNgModuleScope"],"sources":["C:/Users/dalci/OneDrive/Masaüstü/dotnet-angular-web-explorer/ClientApp/node_modules/@angular/material/__ivy_ngcc__/esm2015/dialog.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { Component, ElementRef, EventEmitter, Inject, Optional, ChangeDetectorRef, ViewChild, ViewEncapsulation, ChangeDetectionStrategy, Injectable, InjectionToken, Injector, SkipSelf, TemplateRef, Directive, Input, NgModule } from '@angular/core';\nimport { DOCUMENT, Location, CommonModule } from '@angular/common';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, PortalInjector, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { FocusTrapFactory } from '@angular/cdk/a11y';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Subject, defer, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayConfig, OverlayContainer, OverlayModule } from '@angular/cdk/overlay';\nimport { MatCommonModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n * @template D\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/common';\n\nfunction MatDialogContainer_ng_template_0_Template(rf, ctx) { }\nclass MatDialogConfig {\n    constructor() {\n        /**\n         * The ARIA role of the dialog element.\n         */\n        this.role = 'dialog';\n        /**\n         * Custom class for the overlay pane.\n         */\n        this.panelClass = '';\n        /**\n         * Whether the dialog has a backdrop.\n         */\n        this.hasBackdrop = true;\n        /**\n         * Custom class for the backdrop.\n         */\n        this.backdropClass = '';\n        /**\n         * Whether the user can use escape or clicking on the backdrop to close the modal.\n         */\n        this.disableClose = false;\n        /**\n         * Width of the dialog.\n         */\n        this.width = '';\n        /**\n         * Height of the dialog.\n         */\n        this.height = '';\n        /**\n         * Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw.\n         */\n        this.maxWidth = '80vw';\n        /**\n         * Data being injected into the child component.\n         */\n        this.data = null;\n        /**\n         * ID of the element that describes the dialog.\n         */\n        this.ariaDescribedBy = null;\n        /**\n         * ID of the element that labels the dialog.\n         */\n        this.ariaLabelledBy = null;\n        /**\n         * Aria label to assign to the dialog element.\n         */\n        this.ariaLabel = null;\n        /**\n         * Whether the dialog should focus the first focusable element on open.\n         */\n        this.autoFocus = true;\n        /**\n         * Whether the dialog should restore focus to the\n         * previously-focused element, after it's closed.\n         */\n        this.restoreFocus = true;\n        /**\n         * Whether the dialog should close when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.closeOnNavigation = true;\n        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst animationBody = [\n    // Note: The `enter` animation transitions to `transform: none`, because for some reason\n    // specifying the transform explicitly, causes IE both to blur the dialog content and\n    // decimate the animation performance. Leaving it as `none` solves both issues.\n    state('void, exit', style({ opacity: 0, transform: 'scale(0.7)' })),\n    state('enter', style({ transform: 'none' })),\n    transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 }))),\n    transition('* => void, * => exit', animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 }))),\n];\n/**\n * Animations used by MatDialog.\n * \\@docs-private\n * @type {?}\n */\nconst matDialogAnimations = {\n    /**\n     * Animation that is applied on the dialog container by defalt.\n     */\n    dialogContainer: trigger('dialogContainer', animationBody),\n    /**\n     * @deprecated \\@breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead.\n     */\n    slideDialog: trigger('slideDialog', animationBody)\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * \\@docs-private\n * @return {?}\n */\nfunction throwMatDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * \\@docs-private\n */\nclass MatDialogContainer extends BasePortalOutlet {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusTrapFactory\n     * @param {?} _changeDetectorRef\n     * @param {?} _document\n     * @param {?} _config\n     */\n    constructor(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, _config) {\n        super();\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._document = _document;\n        this._config = _config;\n        /**\n         * Element that was focused before the dialog was opened. Save this to restore upon close.\n         */\n        this._elementFocusedBeforeDialogWasOpened = null;\n        /**\n         * State of the dialog animation.\n         */\n        this._state = 'enter';\n        /**\n         * Emits when an animation state changes.\n         */\n        this._animationStateChanged = new EventEmitter();\n        this._ariaLabelledBy = _config.ariaLabelledBy || null;\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @template T\n     * @param {?} portal Portal to be attached as the dialog content.\n     * @return {?}\n     */\n    attachComponentPortal(portal) {\n        if (this._portalOutlet.hasAttached()) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        this._savePreviouslyFocusedElement();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @template C\n     * @param {?} portal Portal to be attached as the dialog content.\n     * @return {?}\n     */\n    attachTemplatePortal(portal) {\n        if (this._portalOutlet.hasAttached()) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        this._savePreviouslyFocusedElement();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /**\n     * Moves the focus inside the focus trap.\n     * @private\n     * @return {?}\n     */\n    _trapFocus() {\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        if (!this._focusTrap) {\n            this._focusTrap = this._focusTrapFactory.create(element);\n        }\n        // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait for the microtask queue to be empty.\n        if (this._config.autoFocus) {\n            this._focusTrap.focusInitialElementWhenReady();\n        }\n        else {\n            /** @type {?} */\n            const activeElement = this._document.activeElement;\n            // Otherwise ensure that focus is on the dialog container. It's possible that a different\n            // component tried to move focus while the open animation was running. See:\n            // https://github.com/angular/components/issues/16215. Note that we only want to do this\n            // if the focus isn't inside the dialog already, because it's possible that the consumer\n            // turned off `autoFocus` in order to move focus themselves.\n            if (activeElement !== element && !element.contains(activeElement)) {\n                element.focus();\n            }\n        }\n    }\n    /**\n     * Restores focus to the element that was focused before the dialog opened.\n     * @private\n     * @return {?}\n     */\n    _restoreFocus() {\n        /** @type {?} */\n        const toFocus = this._elementFocusedBeforeDialogWasOpened;\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n            toFocus.focus();\n        }\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    }\n    /**\n     * Saves a reference to the element that was focused before the dialog was opened.\n     * @private\n     * @return {?}\n     */\n    _savePreviouslyFocusedElement() {\n        if (this._document) {\n            this._elementFocusedBeforeDialogWasOpened = (/** @type {?} */ (this._document.activeElement));\n            // Note that there is no focus method when rendering on the server.\n            if (this._elementRef.nativeElement.focus) {\n                // Move focus onto the dialog immediately in order to prevent the user from accidentally\n                // opening multiple dialogs at the same time. Needs to be async, because the element\n                // may not be focusable immediately.\n                Promise.resolve().then((/**\n                 * @return {?}\n                 */\n                () => this._elementRef.nativeElement.focus()));\n            }\n        }\n    }\n    /**\n     * Callback, invoked whenever an animation on the host completes.\n     * @param {?} event\n     * @return {?}\n     */\n    _onAnimationDone(event) {\n        if (event.toState === 'enter') {\n            this._trapFocus();\n        }\n        else if (event.toState === 'exit') {\n            this._restoreFocus();\n        }\n        this._animationStateChanged.emit(event);\n    }\n    /**\n     * Callback, invoked when an animation on the host starts.\n     * @param {?} event\n     * @return {?}\n     */\n    _onAnimationStart(event) {\n        this._animationStateChanged.emit(event);\n    }\n    /**\n     * Starts the dialog exit animation.\n     * @return {?}\n     */\n    _startExitAnimation() {\n        this._state = 'exit';\n        // Mark the container for check so it can react if the\n        // view container is using OnPush change detection.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatDialogContainer.ɵfac = function MatDialogContainer_Factory(t) { return new (t || MatDialogContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MatDialogConfig)); };\nMatDialogContainer.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatDialogContainer, selectors: [[\"mat-dialog-container\"]], viewQuery: function MatDialogContainer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    } }, hostAttrs: [\"tabindex\", \"-1\", \"aria-modal\", \"true\", 1, \"mat-dialog-container\"], hostVars: 6, hostBindings: function MatDialogContainer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@dialogContainer.start\", function MatDialogContainer_animation_dialogContainer_start_HostBindingHandler($event) { return ctx._onAnimationStart($event); })(\"@dialogContainer.done\", function MatDialogContainer_animation_dialogContainer_done_HostBindingHandler($event) { return ctx._onAnimationDone($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx._id)(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@dialogContainer\", ctx._state);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkPortalOutlet\", \"\"]], template: function MatDialogContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    } }, dependencies: [ɵngcc2.CdkPortalOutlet], styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}@media (-ms-high-contrast:active){.mat-dialog-container{outline:solid 1px}}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base{margin-left:0;margin-right:8px}\"], encapsulation: 2, data: { animation: [matDialogAnimations.dialogContainer] } });\n/** @nocollapse */\nMatDialogContainer.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusTrapFactory },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: MatDialogConfig }\n];\nMatDialogContainer.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogContainer, [{\n        type: Component,\n        args: [{ selector: 'mat-dialog-container', template: \"<ng-template cdkPortalOutlet></ng-template>\", encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, animations: [matDialogAnimations.dialogContainer], host: {\n                    'class': 'mat-dialog-container',\n                    'tabindex': '-1',\n                    'aria-modal': 'true',\n                    '[attr.id]': '_id',\n                    '[attr.role]': '_config.role',\n                    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n                    '[attr.aria-label]': '_config.ariaLabel',\n                    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                    '[@dialogContainer]': '_state',\n                    '(@dialogContainer.start)': '_onAnimationStart($event)',\n                    '(@dialogContainer.done)': '_onAnimationDone($event)'\n                }, styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}@media (-ms-high-contrast:active){.mat-dialog-container{outline:solid 1px}}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base{margin-left:0;margin-right:8px}\"] }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusTrapFactory }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: MatDialogConfig }]; }, { _portalOutlet: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet, { static: true }]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(jelbourn): resizing\n// Counter for unique dialog ids.\n/** @type {?} */\nlet uniqueId = 0;\n/**\n * Reference to a dialog opened via the MatDialog service.\n * @template T, R\n */\nclass MatDialogRef {\n    /**\n     * @param {?} _overlayRef\n     * @param {?} _containerInstance\n     * @param {?=} _location\n     * @param {?=} id\n     */\n    constructor(_overlayRef, _containerInstance, \n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location, id = `mat-dialog-${uniqueId++}`) {\n        this._overlayRef = _overlayRef;\n        this._containerInstance = _containerInstance;\n        this.id = id;\n        /**\n         * Whether the user is allowed to close the dialog.\n         */\n        this.disableClose = this._containerInstance._config.disableClose;\n        /**\n         * Subject for notifying the user that the dialog has finished opening.\n         */\n        this._afterOpened = new Subject();\n        /**\n         * Subject for notifying the user that the dialog has finished closing.\n         */\n        this._afterClosed = new Subject();\n        /**\n         * Subject for notifying the user that the dialog has started closing.\n         */\n        this._beforeClosed = new Subject();\n        /**\n         * Current state of the dialog.\n         */\n        this._state = 0 /* OPEN */;\n        // Pass the id along to the container.\n        _containerInstance._id = id;\n        // Emit when opening animation completes\n        _containerInstance._animationStateChanged.pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => event.phaseName === 'done' && event.toState === 'enter')), take(1))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }));\n        // Dispose overlay when closing animation is complete\n        _containerInstance._animationStateChanged.pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => event.phaseName === 'done' && event.toState === 'exit')), take(1)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            clearTimeout(this._closeFallbackTimeout);\n            this._overlayRef.dispose();\n        }));\n        _overlayRef.detachments().subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._beforeClosed.next(this._result);\n            this._beforeClosed.complete();\n            this._afterClosed.next(this._result);\n            this._afterClosed.complete();\n            this.componentInstance = (/** @type {?} */ (null));\n            this._overlayRef.dispose();\n        }));\n        _overlayRef.keydownEvents()\n            .pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n        })))\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            event.preventDefault();\n            this.close();\n        }));\n    }\n    /**\n     * Close the dialog.\n     * @param {?=} dialogResult Optional result to return to the dialog opener.\n     * @return {?}\n     */\n    close(dialogResult) {\n        this._result = dialogResult;\n        // Transition the backdrop in parallel to the dialog.\n        this._containerInstance._animationStateChanged.pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => event.phaseName === 'start')), take(1))\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this._beforeClosed.next(dialogResult);\n            this._beforeClosed.complete();\n            this._state = 2 /* CLOSED */;\n            this._overlayRef.detachBackdrop();\n            // The logic that disposes of the overlay depends on the exit animation completing, however\n            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n            // timeout which will clean everything up if the animation hasn't fired within the specified\n            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n            // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n            this._closeFallbackTimeout = setTimeout((/**\n             * @return {?}\n             */\n            () => {\n                this._overlayRef.dispose();\n            }), event.totalTime + 100);\n        }));\n        this._containerInstance._startExitAnimation();\n        this._state = 1 /* CLOSING */;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     * @return {?}\n     */\n    afterOpened() {\n        return this._afterOpened.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     * @return {?}\n     */\n    afterClosed() {\n        return this._afterClosed.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     * @return {?}\n     */\n    beforeClosed() {\n        return this._beforeClosed.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     * @return {?}\n     */\n    backdropClick() {\n        return this._overlayRef.backdropClick();\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     * @return {?}\n     */\n    keydownEvents() {\n        return this._overlayRef.keydownEvents();\n    }\n    /**\n     * Updates the dialog's position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} position New dialog position.\n     * @return {THIS}\n     */\n    updatePosition(position) {\n        /** @type {?} */\n        let strategy = (/** @type {?} */ (this))._getPositionStrategy();\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        (/** @type {?} */ (this))._overlayRef.updatePosition();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} width New width of the dialog.\n     * @param {?=} height New height of the dialog.\n     * @return {THIS}\n     */\n    updateSize(width = '', height = '') {\n        (/** @type {?} */ (this))._getPositionStrategy().width(width).height(height);\n        (/** @type {?} */ (this))._overlayRef.updatePosition();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Add a CSS class or an array of classes to the overlay pane.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} classes\n     * @return {THIS}\n     */\n    addPanelClass(classes) {\n        (/** @type {?} */ (this))._overlayRef.addPanelClass(classes);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Remove a CSS class or an array of classes from the overlay pane.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} classes\n     * @return {THIS}\n     */\n    removePanelClass(classes) {\n        (/** @type {?} */ (this))._overlayRef.removePanelClass(classes);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     * @deprecated Use `afterOpened` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n    afterOpen() {\n        return this.afterOpened();\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     * @deprecated Use `beforeClosed` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n    beforeClose() {\n        return this.beforeClosed();\n    }\n    /**\n     * Gets the current state of the dialog's lifecycle.\n     * @return {?}\n     */\n    getState() {\n        return this._state;\n    }\n    /**\n     * Fetches the position strategy object from the overlay ref.\n     * @private\n     * @return {?}\n     */\n    _getPositionStrategy() {\n        return (/** @type {?} */ (this._overlayRef.getConfig().positionStrategy));\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to access the data that was passed in to a dialog.\n * @type {?}\n */\nconst MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/**\n * Injection token that can be used to specify default dialog options.\n * @type {?}\n */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/**\n * Injection token that determines the scroll handling while the dialog is open.\n * @type {?}\n */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.block());\n}\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.block());\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Service to open Material Design modal dialogs.\n */\nclass MatDialog {\n    /**\n     * @param {?} _overlay\n     * @param {?} _injector\n     * @param {?} _location\n     * @param {?} _defaultOptions\n     * @param {?} scrollStrategy\n     * @param {?} _parentDialog\n     * @param {?} _overlayContainer\n     */\n    constructor(_overlay, _injector, _location, _defaultOptions, scrollStrategy, _parentDialog, _overlayContainer) {\n        this._overlay = _overlay;\n        this._injector = _injector;\n        this._location = _location;\n        this._defaultOptions = _defaultOptions;\n        this._parentDialog = _parentDialog;\n        this._overlayContainer = _overlayContainer;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this._ariaHiddenElements = new Map();\n        // TODO (jelbourn): tighten the typing right-hand side of this expression.\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = (/** @type {?} */ (defer((/**\n         * @return {?}\n         */\n        () => this.openDialogs.length ?\n            this._afterAllClosed :\n            this._afterAllClosed.pipe(startWith(undefined))))));\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Keeps track of the currently-open dialogs.\n     * @return {?}\n     */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /**\n     * Stream that emits when a dialog has been opened.\n     * @return {?}\n     */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    /**\n     * Stream that emits when a dialog has been opened.\n     * @deprecated Use `afterOpened` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n    get afterOpen() {\n        return this.afterOpened;\n    }\n    /**\n     * @return {?}\n     */\n    get _afterAllClosed() {\n        /** @type {?} */\n        const parent = this._parentDialog;\n        return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n    }\n    /**\n     * Opens a modal dialog containing the given component.\n     * @template T, D, R\n     * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n     *     or a TemplateRef to instantiate as the dialog content.\n     * @param {?=} config Extra configuration options.\n     * @return {?} Reference to the newly-opened dialog.\n     */\n    open(componentOrTemplateRef, config) {\n        config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n        if (config.id && this.getDialogById(config.id)) {\n            throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n        }\n        /** @type {?} */\n        const overlayRef = this._createOverlay(config);\n        /** @type {?} */\n        const dialogContainer = this._attachDialogContainer(overlayRef, config);\n        /** @type {?} */\n        const dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n        // If this is the first dialog that we're opening, hide all the non-overlay content.\n        if (!this.openDialogs.length) {\n            this._hideNonDialogContentFromAssistiveTechnology();\n        }\n        this.openDialogs.push(dialogRef);\n        dialogRef.afterClosed().subscribe((/**\n         * @return {?}\n         */\n        () => this._removeOpenDialog(dialogRef)));\n        this.afterOpened.next(dialogRef);\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     * @return {?}\n     */\n    closeAll() {\n        this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param {?} id ID to use when looking up the dialog.\n     * @return {?}\n     */\n    getDialogById(id) {\n        return this.openDialogs.find((/**\n         * @param {?} dialog\n         * @return {?}\n         */\n        dialog => dialog.id === id));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n    }\n    /**\n     * Creates the overlay into which the dialog will be loaded.\n     * @private\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to the OverlayRef for the created overlay.\n     */\n    _createOverlay(config) {\n        /** @type {?} */\n        const overlayConfig = this._getOverlayConfig(config);\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @private\n     * @param {?} dialogConfig The dialog configuration.\n     * @return {?} The overlay configuration.\n     */\n    _getOverlayConfig(dialogConfig) {\n        /** @type {?} */\n        const state$$1 = new OverlayConfig({\n            positionStrategy: this._overlay.position().global(),\n            scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n            panelClass: dialogConfig.panelClass,\n            hasBackdrop: dialogConfig.hasBackdrop,\n            direction: dialogConfig.direction,\n            minWidth: dialogConfig.minWidth,\n            minHeight: dialogConfig.minHeight,\n            maxWidth: dialogConfig.maxWidth,\n            maxHeight: dialogConfig.maxHeight,\n            disposeOnNavigation: dialogConfig.closeOnNavigation\n        });\n        if (dialogConfig.backdropClass) {\n            state$$1.backdropClass = dialogConfig.backdropClass;\n        }\n        return state$$1;\n    }\n    /**\n     * Attaches an MatDialogContainer to a dialog's already-created overlay.\n     * @private\n     * @param {?} overlay Reference to the dialog's underlying overlay.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to a ComponentRef for the attached container.\n     */\n    _attachDialogContainer(overlay, config) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        /** @type {?} */\n        const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n            [MatDialogConfig, config]\n        ]));\n        /** @type {?} */\n        const containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector, config.componentFactoryResolver);\n        /** @type {?} */\n        const containerRef = overlay.attach(containerPortal);\n        return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created MatDialogContainer.\n     * @private\n     * @template T, R\n     * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param {?} dialogContainer Reference to the wrapping MatDialogContainer.\n     * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to the MatDialogRef that should be returned to the user.\n     */\n    _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n        // Create a reference to the dialog we're creating in order to give the user a handle\n        // to modify and close it.\n        /** @type {?} */\n        const dialogRef = new MatDialogRef(overlayRef, dialogContainer, this._location, config.id);\n        // When the dialog backdrop is clicked, we want to close it.\n        if (config.hasBackdrop) {\n            overlayRef.backdropClick().subscribe((/**\n             * @return {?}\n             */\n            () => {\n                if (!dialogRef.disableClose) {\n                    dialogRef.close();\n                }\n            }));\n        }\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, (/** @type {?} */ (null)), (/** @type {?} */ ({ $implicit: config.data, dialogRef }))));\n        }\n        else {\n            /** @type {?} */\n            const injector = this._createInjector(config, dialogRef, dialogContainer);\n            /** @type {?} */\n            const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, undefined, injector));\n            dialogRef.componentInstance = contentRef.instance;\n        }\n        dialogRef\n            .updateSize(config.width, config.height)\n            .updatePosition(config.position);\n        return dialogRef;\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @private\n     * @template T\n     * @param {?} config Config object that is used to construct the dialog.\n     * @param {?} dialogRef Reference to the dialog.\n     * @param {?} dialogContainer\n     * @return {?} The custom injector that can be used inside the dialog.\n     */\n    _createInjector(config, dialogRef, dialogContainer) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n        // content are created out of the same ViewContainerRef and as such, are siblings for injector\n        // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n        // added to the injection tokens.\n        /** @type {?} */\n        const injectionTokens = new WeakMap([\n            [MatDialogContainer, dialogContainer],\n            [MAT_DIALOG_DATA, config.data],\n            [MatDialogRef, dialogRef]\n        ]);\n        if (config.direction &&\n            (!userInjector || !userInjector.get(Directionality, null))) {\n            injectionTokens.set(Directionality, {\n                value: config.direction,\n                change: of()\n            });\n        }\n        return new PortalInjector(userInjector || this._injector, injectionTokens);\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @private\n     * @param {?} dialogRef Dialog to be removed.\n     * @return {?}\n     */\n    _removeOpenDialog(dialogRef) {\n        /** @type {?} */\n        const index = this.openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this.openDialogs.splice(index, 1);\n            // If all the dialogs were closed, remove/restore the `aria-hidden`\n            // to a the siblings and emit to the `afterAllClosed` stream.\n            if (!this.openDialogs.length) {\n                this._ariaHiddenElements.forEach((/**\n                 * @param {?} previousValue\n                 * @param {?} element\n                 * @return {?}\n                 */\n                (previousValue, element) => {\n                    if (previousValue) {\n                        element.setAttribute('aria-hidden', previousValue);\n                    }\n                    else {\n                        element.removeAttribute('aria-hidden');\n                    }\n                }));\n                this._ariaHiddenElements.clear();\n                this._afterAllClosed.next();\n            }\n        }\n    }\n    /**\n     * Hides all of the content that isn't an overlay from assistive technology.\n     * @private\n     * @return {?}\n     */\n    _hideNonDialogContentFromAssistiveTechnology() {\n        /** @type {?} */\n        const overlayContainer = this._overlayContainer.getContainerElement();\n        // Ensure that the overlay container is attached to the DOM.\n        if (overlayContainer.parentElement) {\n            /** @type {?} */\n            const siblings = overlayContainer.parentElement.children;\n            for (let i = siblings.length - 1; i > -1; i--) {\n                /** @type {?} */\n                let sibling = siblings[i];\n                if (sibling !== overlayContainer &&\n                    sibling.nodeName !== 'SCRIPT' &&\n                    sibling.nodeName !== 'STYLE' &&\n                    !sibling.hasAttribute('aria-live')) {\n                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                    sibling.setAttribute('aria-hidden', 'true');\n                }\n            }\n        }\n    }\n    /**\n     * Closes all of the dialogs in an array.\n     * @private\n     * @param {?} dialogs\n     * @return {?}\n     */\n    _closeDialogs(dialogs) {\n        /** @type {?} */\n        let i = dialogs.length;\n        while (i--) {\n            // The `_openDialogs` property isn't updated after close until the rxjs subscription\n            // runs on the next microtask, in addition to modifying the array as we're going\n            // through it. We loop through all of them and call close without assuming that\n            // they'll be removed from the list instantaneously.\n            dialogs[i].close();\n        }\n    }\n}\nMatDialog.ɵfac = function MatDialog_Factory(t) { return new (t || MatDialog)(ɵngcc0.ɵɵinject(ɵngcc3.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_SCROLL_STRATEGY), ɵngcc0.ɵɵinject(MatDialog, 12), ɵngcc0.ɵɵinject(ɵngcc3.OverlayContainer)); };\nMatDialog.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MatDialog, factory: MatDialog.ɵfac });\n/** @nocollapse */\nMatDialog.ctorParameters = () => [\n    { type: Overlay },\n    { type: Injector },\n    { type: Location, decorators: [{ type: Optional }] },\n    { type: MatDialogConfig, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DEFAULT_OPTIONS,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_SCROLL_STRATEGY,] }] },\n    { type: MatDialog, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: OverlayContainer }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialog, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc3.Overlay }, { type: ɵngcc0.Injector }, { type: ɵngcc4.Location, decorators: [{\n                type: Optional\n            }] }, { type: MatDialogConfig, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_DIALOG_DEFAULT_OPTIONS]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_DIALOG_SCROLL_STRATEGY]\n            }] }, { type: MatDialog, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc3.OverlayContainer }]; }, null); })();\n/**\n * Applies default options to the dialog config.\n * @param {?=} config Config to be modified.\n * @param {?=} defaultOptions Default options provided.\n * @return {?} The new configuration object.\n */\nfunction _applyConfigDefaults(config, defaultOptions) {\n    return Object.assign({}, defaultOptions, config);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Counter used to generate unique IDs for dialog elements.\n * @type {?}\n */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nclass MatDialogClose {\n    /**\n     * @param {?} dialogRef\n     * @param {?} _elementRef\n     * @param {?} _dialog\n     */\n    constructor(dialogRef, _elementRef, _dialog) {\n        this.dialogRef = dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /**\n         * Default to \"button\" to prevents accidental form submits.\n         */\n        this.type = 'button';\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (!this.dialogRef) {\n            // When this directive is included in a dialog via TemplateRef (rather than being\n            // in a Component), the DialogRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n            // be resolved at constructor time.\n            this.dialogRef = (/** @type {?} */ (getClosestDialog(this._elementRef, this._dialog.openDialogs)));\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n        if (proxiedChange) {\n            this.dialogResult = proxiedChange.currentValue;\n        }\n    }\n}\nMatDialogClose.ɵfac = function MatDialogClose_Factory(t) { return new (t || MatDialogClose)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog)); };\nMatDialogClose.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatDialogClose, selectors: [[\"\", \"mat-dialog-close\", \"\"], [\"\", \"matDialogClose\", \"\"]], hostVars: 2, hostBindings: function MatDialogClose_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatDialogClose_click_HostBindingHandler() { return ctx.dialogRef.close(ctx.dialogResult); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel || null)(\"type\", ctx.type);\n    } }, inputs: { type: \"type\", dialogResult: [\"mat-dialog-close\", \"dialogResult\"], ariaLabel: [\"aria-label\", \"ariaLabel\"], _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"] }, exportAs: [\"matDialogClose\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nMatDialogClose.ctorParameters = () => [\n    { type: MatDialogRef, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: MatDialog }\n];\nMatDialogClose.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    type: [{ type: Input }],\n    dialogResult: [{ type: Input, args: ['mat-dialog-close',] }],\n    _matDialogClose: [{ type: Input, args: ['matDialogClose',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogClose, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-dialog-close], [matDialogClose]',\n                exportAs: 'matDialogClose',\n                host: {\n                    '(click)': 'dialogRef.close(dialogResult)',\n                    '[attr.aria-label]': 'ariaLabel || null',\n                    '[attr.type]': 'type'\n                }\n            }]\n    }], function () { return [{ type: MatDialogRef, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: MatDialog }]; }, { type: [{\n            type: Input\n        }], dialogResult: [{\n            type: Input,\n            args: ['mat-dialog-close']\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], _matDialogClose: [{\n            type: Input,\n            args: ['matDialogClose']\n        }] }); })();\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nclass MatDialogTitle {\n    /**\n     * @param {?} _dialogRef\n     * @param {?} _elementRef\n     * @param {?} _dialog\n     */\n    constructor(_dialogRef, _elementRef, _dialog) {\n        this._dialogRef = _dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        this.id = `mat-dialog-title-${dialogElementUid++}`;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (!this._dialogRef) {\n            this._dialogRef = (/** @type {?} */ (getClosestDialog(this._elementRef, this._dialog.openDialogs)));\n        }\n        if (this._dialogRef) {\n            Promise.resolve().then((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const container = this._dialogRef._containerInstance;\n                if (container && !container._ariaLabelledBy) {\n                    container._ariaLabelledBy = this.id;\n                }\n            }));\n        }\n    }\n}\nMatDialogTitle.ɵfac = function MatDialogTitle_Factory(t) { return new (t || MatDialogTitle)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog)); };\nMatDialogTitle.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatDialogTitle, selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]], hostAttrs: [1, \"mat-dialog-title\"], hostVars: 1, hostBindings: function MatDialogTitle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n    } }, inputs: { id: \"id\" }, exportAs: [\"matDialogTitle\"] });\n/** @nocollapse */\nMatDialogTitle.ctorParameters = () => [\n    { type: MatDialogRef, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: MatDialog }\n];\nMatDialogTitle.propDecorators = {\n    id: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogTitle, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-dialog-title], [matDialogTitle]',\n                exportAs: 'matDialogTitle',\n                host: {\n                    'class': 'mat-dialog-title',\n                    '[id]': 'id'\n                }\n            }]\n    }], function () { return [{ type: MatDialogRef, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: MatDialog }]; }, { id: [{\n            type: Input\n        }] }); })();\n/**\n * Scrollable content container of a dialog.\n */\nclass MatDialogContent {\n}\nMatDialogContent.ɵfac = function MatDialogContent_Factory(t) { return new (t || MatDialogContent)(); };\nMatDialogContent.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatDialogContent, selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]], hostAttrs: [1, \"mat-dialog-content\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogContent, [{\n        type: Directive,\n        args: [{\n                selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n                host: { 'class': 'mat-dialog-content' }\n            }]\n    }], null, null); })();\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nclass MatDialogActions {\n}\nMatDialogActions.ɵfac = function MatDialogActions_Factory(t) { return new (t || MatDialogActions)(); };\nMatDialogActions.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatDialogActions, selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]], hostAttrs: [1, \"mat-dialog-actions\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogActions, [{\n        type: Directive,\n        args: [{\n                selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n                host: { 'class': 'mat-dialog-actions' }\n            }]\n    }], null, null); })();\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param {?} element Element relative to which to look for a dialog.\n * @param {?} openDialogs References to the currently-open dialogs.\n * @return {?}\n */\nfunction getClosestDialog(element, openDialogs) {\n    /** @type {?} */\n    let parent = element.nativeElement.parentElement;\n    while (parent && !parent.classList.contains('mat-dialog-container')) {\n        parent = parent.parentElement;\n    }\n    return parent ? openDialogs.find((/**\n     * @param {?} dialog\n     * @return {?}\n     */\n    dialog => dialog.id === (/** @type {?} */ (parent)).id)) : null;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatDialogModule {\n}\nMatDialogModule.ɵfac = function MatDialogModule_Factory(t) { return new (t || MatDialogModule)(); };\nMatDialogModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatDialogModule });\nMatDialogModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        MatDialog,\n        MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n    ], imports: [CommonModule,\n        OverlayModule,\n        PortalModule,\n        MatCommonModule, MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    OverlayModule,\n                    PortalModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogContent,\n                    MatDialogActions,\n                    MatCommonModule,\n                ],\n                declarations: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogActions,\n                    MatDialogContent,\n                ],\n                providers: [\n                    MatDialog,\n                    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n                ],\n                entryComponents: [MatDialogContainer]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDialogModule, { declarations: function () { return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent]; }, imports: function () { return [CommonModule,\n        OverlayModule,\n        PortalModule,\n        MatCommonModule]; }, exports: function () { return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatDialogModule, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog, throwMatDialogContentAlreadyAttachedError, MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatDialogConfig, MatDialogRef, matDialogAnimations };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}