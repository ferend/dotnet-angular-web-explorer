{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Inject, Injectable, Optional, SkipSelf, QueryList, Directive, ElementRef, Input, NgZone, isDevMode, InjectionToken, EventEmitter, Output, NgModule, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';\nimport { Subject, Subscription, of } from 'rxjs';\nimport { UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW, TAB, A, Z, ZERO, NINE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { debounceTime, filter, map, tap, take } from 'rxjs/operators';\nimport { Platform, normalizePassiveListenerOptions, PlatformModule } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement } from '@angular/cdk/coercion';\nimport { ContentObserver, ObserversModule } from '@angular/cdk/observers';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * IDs are deliminated by an empty space, as per the spec.\n * @type {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/observers';\nconst ID_DELIMINATOR = ' ';\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @param {?} id\n * @return {?}\n */\nfunction addAriaReferencedId(el, attr, id) {\n  /** @type {?} */\n  const ids = getAriaReferenceIds(el, attr);\n  if (ids.some(\n  /**\n  * @param {?} existingId\n  * @return {?}\n  */\n  existingId => existingId.trim() == id.trim())) {\n    return;\n  }\n  ids.push(id.trim());\n  el.setAttribute(attr, ids.join(ID_DELIMINATOR));\n}\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @param {?} id\n * @return {?}\n */\nfunction removeAriaReferencedId(el, attr, id) {\n  /** @type {?} */\n  const ids = getAriaReferenceIds(el, attr);\n  /** @type {?} */\n  const filteredIds = ids.filter(\n  /**\n  * @param {?} val\n  * @return {?}\n  */\n  val => val != id.trim());\n  if (filteredIds.length) {\n    el.setAttribute(attr, filteredIds.join(ID_DELIMINATOR));\n  } else {\n    el.removeAttribute(attr);\n  }\n}\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @return {?}\n */\nfunction getAriaReferenceIds(el, attr) {\n  // Get string array of all individual ids (whitespace deliminated) in the attribute value\n  return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * ID used for the body container where all messages are appended.\n * @type {?}\n */\nconst MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n/**\n * ID prefix used for each created message element.\n * @type {?}\n */\nconst CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n/**\n * Attribute given to each host element that is described by a message element.\n * @type {?}\n */\nconst CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n/**\n * Global incremental identifier for each registered message element.\n * @type {?}\n */\nlet nextId = 0;\n/**\n * Global map of all registered message elements that have been placed into the document.\n * @type {?}\n */\nconst messageRegistry = new Map();\n/**\n * Container for all registered messages.\n * @type {?}\n */\nlet messagesContainer = null;\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n */\nclass AriaDescriber {\n  /**\n   * @param {?} _document\n   */\n  constructor(_document) {\n    this._document = _document;\n  }\n  /**\n   * Adds to the host element an aria-describedby reference to a hidden element that contains\n   * the message. If the same message has already been registered, then it will reuse the created\n   * message element.\n   * @param {?} hostElement\n   * @param {?} message\n   * @return {?}\n   */\n  describe(hostElement, message) {\n    if (!this._canBeDescribed(hostElement, message)) {\n      return;\n    }\n    if (typeof message !== 'string') {\n      // We need to ensure that the element has an ID.\n      this._setMessageId(message);\n      messageRegistry.set(message, {\n        messageElement: message,\n        referenceCount: 0\n      });\n    } else if (!messageRegistry.has(message)) {\n      this._createMessageElement(message);\n    }\n    if (!this._isElementDescribedByMessage(hostElement, message)) {\n      this._addMessageReference(hostElement, message);\n    }\n  }\n  /**\n   * Removes the host element's aria-describedby reference to the message element.\n   * @param {?} hostElement\n   * @param {?} message\n   * @return {?}\n   */\n  removeDescription(hostElement, message) {\n    if (!this._isElementNode(hostElement)) {\n      return;\n    }\n    if (this._isElementDescribedByMessage(hostElement, message)) {\n      this._removeMessageReference(hostElement, message);\n    }\n    // If the message is a string, it means that it's one that we created for the\n    // consumer so we can remove it safely, otherwise we should leave it in place.\n    if (typeof message === 'string') {\n      /** @type {?} */\n      const registeredMessage = messageRegistry.get(message);\n      if (registeredMessage && registeredMessage.referenceCount === 0) {\n        this._deleteMessageElement(message);\n      }\n    }\n    if (messagesContainer && messagesContainer.childNodes.length === 0) {\n      this._deleteMessagesContainer();\n    }\n  }\n  /**\n   * Unregisters all created message elements and removes the message container.\n   * @return {?}\n   */\n  ngOnDestroy() {\n    /** @type {?} */\n    const describedElements = this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}]`);\n    for (let i = 0; i < describedElements.length; i++) {\n      this._removeCdkDescribedByReferenceIds(describedElements[i]);\n      describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n    if (messagesContainer) {\n      this._deleteMessagesContainer();\n    }\n    messageRegistry.clear();\n  }\n  /**\n   * Creates a new element in the visually hidden message container element with the message\n   * as its content and adds it to the message registry.\n   * @private\n   * @param {?} message\n   * @return {?}\n   */\n  _createMessageElement(message) {\n    /** @type {?} */\n    const messageElement = this._document.createElement('div');\n    this._setMessageId(messageElement);\n    messageElement.textContent = message;\n    this._createMessagesContainer();\n    /** @type {?} */messagesContainer.appendChild(messageElement);\n    messageRegistry.set(message, {\n      messageElement,\n      referenceCount: 0\n    });\n  }\n  /**\n   * Assigns a unique ID to an element, if it doesn't have one already.\n   * @private\n   * @param {?} element\n   * @return {?}\n   */\n  _setMessageId(element) {\n    if (!element.id) {\n      element.id = `${CDK_DESCRIBEDBY_ID_PREFIX}-${nextId++}`;\n    }\n  }\n  /**\n   * Deletes the message element from the global messages container.\n   * @private\n   * @param {?} message\n   * @return {?}\n   */\n  _deleteMessageElement(message) {\n    /** @type {?} */\n    const registeredMessage = messageRegistry.get(message);\n    /** @type {?} */\n    const messageElement = registeredMessage && registeredMessage.messageElement;\n    if (messagesContainer && messageElement) {\n      messagesContainer.removeChild(messageElement);\n    }\n    messageRegistry.delete(message);\n  }\n  /**\n   * Creates the global container for all aria-describedby messages.\n   * @private\n   * @return {?}\n   */\n  _createMessagesContainer() {\n    if (!messagesContainer) {\n      /** @type {?} */\n      const preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID);\n      // When going from the server to the client, we may end up in a situation where there's\n      // already a container on the page, but we don't have a reference to it. Clear the\n      // old container so we don't get duplicates. Doing this, instead of emptying the previous\n      // container, should be slightly faster.\n      if (preExistingContainer) {\n        /** @type {?} */preExistingContainer.parentNode.removeChild(preExistingContainer);\n      }\n      messagesContainer = this._document.createElement('div');\n      messagesContainer.id = MESSAGES_CONTAINER_ID;\n      messagesContainer.setAttribute('aria-hidden', 'true');\n      messagesContainer.style.display = 'none';\n      this._document.body.appendChild(messagesContainer);\n    }\n  }\n  /**\n   * Deletes the global messages container.\n   * @private\n   * @return {?}\n   */\n  _deleteMessagesContainer() {\n    if (messagesContainer && messagesContainer.parentNode) {\n      messagesContainer.parentNode.removeChild(messagesContainer);\n      messagesContainer = null;\n    }\n  }\n  /**\n   * Removes all cdk-describedby messages that are hosted through the element.\n   * @private\n   * @param {?} element\n   * @return {?}\n   */\n  _removeCdkDescribedByReferenceIds(element) {\n    // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n    /** @type {?} */\n    const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby').filter(\n    /**\n    * @param {?} id\n    * @return {?}\n    */\n    id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);\n    element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n  }\n  /**\n   * Adds a message reference to the element using aria-describedby and increments the registered\n   * message's reference count.\n   * @private\n   * @param {?} element\n   * @param {?} message\n   * @return {?}\n   */\n  _addMessageReference(element, message) {\n    /** @type {?} */\n    const registeredMessage = /** @type {?} */messageRegistry.get(message);\n    // Add the aria-describedby reference and set the\n    // describedby_host attribute to mark the element.\n    addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n    element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');\n    registeredMessage.referenceCount++;\n  }\n  /**\n   * Removes a message reference from the element using aria-describedby\n   * and decrements the registered message's reference count.\n   * @private\n   * @param {?} element\n   * @param {?} message\n   * @return {?}\n   */\n  _removeMessageReference(element, message) {\n    /** @type {?} */\n    const registeredMessage = /** @type {?} */messageRegistry.get(message);\n    registeredMessage.referenceCount--;\n    removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n    element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n  }\n  /**\n   * Returns true if the element has been described by the provided message ID.\n   * @private\n   * @param {?} element\n   * @param {?} message\n   * @return {?}\n   */\n  _isElementDescribedByMessage(element, message) {\n    /** @type {?} */\n    const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n    /** @type {?} */\n    const registeredMessage = messageRegistry.get(message);\n    /** @type {?} */\n    const messageId = registeredMessage && registeredMessage.messageElement.id;\n    return !!messageId && referenceIds.indexOf(messageId) != -1;\n  }\n  /**\n   * Determines whether a message can be described on a particular element.\n   * @private\n   * @param {?} element\n   * @param {?} message\n   * @return {?}\n   */\n  _canBeDescribed(element, message) {\n    if (!this._isElementNode(element)) {\n      return false;\n    }\n    if (message && typeof message === 'object') {\n      // We'd have to make some assumptions about the description element's text, if the consumer\n      // passed in an element. Assume that if an element is passed in, the consumer has verified\n      // that it can be used as a description.\n      return true;\n    }\n    /** @type {?} */\n    const trimmedMessage = message == null ? '' : `${message}`.trim();\n    /** @type {?} */\n    const ariaLabel = element.getAttribute('aria-label');\n    // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the\n    // element, because screen readers will end up reading out the same text twice in a row.\n    return trimmedMessage ? !ariaLabel || ariaLabel.trim() !== trimmedMessage : false;\n  }\n  /**\n   * Checks whether a node is an Element node.\n   * @private\n   * @param {?} element\n   * @return {?}\n   */\n  _isElementNode(element) {\n    return element.nodeType === this._document.ELEMENT_NODE;\n  }\n}\nAriaDescriber.ɵfac = function AriaDescriber_Factory(t) {\n  return new (t || AriaDescriber)(ɵngcc0.ɵɵinject(DOCUMENT));\n};\nAriaDescriber.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: AriaDescriber,\n  factory: AriaDescriber.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\nAriaDescriber.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n/** @nocollapse */\nAriaDescriber.ngInjectableDef = ɵɵdefineInjectable({\n  factory: function AriaDescriber_Factory() {\n    return new AriaDescriber(ɵɵinject(DOCUMENT));\n  },\n  token: AriaDescriber,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AriaDescriber, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} _document\n * @return {?}\n */\nfunction ARIA_DESCRIBER_PROVIDER_FACTORY(parentDispatcher, _document) {\n  return parentDispatcher || new AriaDescriber(_document);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\nconst ARIA_DESCRIBER_PROVIDER = {\n  // If there is already an AriaDescriber available, use that. Otherwise, provide a new one.\n  provide: AriaDescriber,\n  deps: [[new Optional(), new SkipSelf(), AriaDescriber], /** @type {?} */DOCUMENT],\n  useFactory: ARIA_DESCRIBER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n * @template T\n */\nclass ListKeyManager {\n  /**\n   * @param {?} _items\n   */\n  constructor(_items) {\n    this._items = _items;\n    this._activeItemIndex = -1;\n    this._activeItem = null;\n    this._wrap = false;\n    this._letterKeyStream = new Subject();\n    this._typeaheadSubscription = Subscription.EMPTY;\n    this._vertical = true;\n    this._allowedModifierKeys = [];\n    /**\n     * Predicate function that can be used to check whether an item should be skipped\n     * by the key manager. By default, disabled items are skipped.\n     */\n    this._skipPredicateFn =\n    /**\n    * @param {?} item\n    * @return {?}\n    */\n    item => item.disabled;\n    // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n    this._pressedLetters = [];\n    /**\n     * Stream that emits any time the TAB key is pressed, so components can react\n     * when focus is shifted off of the list.\n     */\n    this.tabOut = new Subject();\n    /**\n     * Stream that emits whenever the active item of the list manager changes.\n     */\n    this.change = new Subject();\n    // We allow for the items to be an array because, in some cases, the consumer may\n    // not have access to a QueryList of the items they want to manage (e.g. when the\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\n    if (_items instanceof QueryList) {\n      _items.changes.subscribe(\n      /**\n      * @param {?} newItems\n      * @return {?}\n      */\n      newItems => {\n        if (this._activeItem) {\n          /** @type {?} */\n          const itemArray = newItems.toArray();\n          /** @type {?} */\n          const newIndex = itemArray.indexOf(this._activeItem);\n          if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n            this._activeItemIndex = newIndex;\n          }\n        }\n      });\n    }\n  }\n  /**\n   * Sets the predicate function that determines which items should be skipped by the\n   * list key manager.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} predicate Function that determines whether the given item should be skipped.\n   * @return {THIS}\n   */\n  skipPredicate(predicate) {\n    /** @type {?} */this._skipPredicateFn = predicate;\n    return (/** @type {?} */this\n    );\n  }\n  /**\n   * Configures wrapping mode, which determines whether the active item will wrap to\n   * the other end of list when there are no more items in the given direction.\n   * @template THIS\n   * @this {THIS}\n   * @param {?=} shouldWrap Whether the list should wrap when reaching the end.\n   * @return {THIS}\n   */\n  withWrap(shouldWrap = true) {\n    /** @type {?} */this._wrap = shouldWrap;\n    return (/** @type {?} */this\n    );\n  }\n  /**\n   * Configures whether the key manager should be able to move the selection vertically.\n   * @template THIS\n   * @this {THIS}\n   * @param {?=} enabled Whether vertical selection should be enabled.\n   * @return {THIS}\n   */\n  withVerticalOrientation(enabled = true) {\n    /** @type {?} */this._vertical = enabled;\n    return (/** @type {?} */this\n    );\n  }\n  /**\n   * Configures the key manager to move the selection horizontally.\n   * Passing in `null` will disable horizontal movement.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} direction Direction in which the selection can be moved.\n   * @return {THIS}\n   */\n  withHorizontalOrientation(direction) {\n    /** @type {?} */this._horizontal = direction;\n    return (/** @type {?} */this\n    );\n  }\n  /**\n   * Modifier keys which are allowed to be held down and whose default actions will be prevented\n   * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} keys\n   * @return {THIS}\n   */\n  withAllowedModifierKeys(keys) {\n    /** @type {?} */this._allowedModifierKeys = keys;\n    return (/** @type {?} */this\n    );\n  }\n  /**\n   * Turns on typeahead mode which allows users to set the active item by typing.\n   * @template THIS\n   * @this {THIS}\n   * @param {?=} debounceInterval Time to wait after the last keystroke before setting the active item.\n   * @return {THIS}\n   */\n  withTypeAhead(debounceInterval = 200) {\n    if ( /** @type {?} */this._items.length && /** @type {?} */this._items.some(\n    /**\n    * @param {?} item\n    * @return {?}\n    */\n    item => typeof item.getLabel !== 'function')) {\n      throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n    }\n    /** @type {?} */this._typeaheadSubscription.unsubscribe();\n    // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n    // and convert those letters back into a string. Afterwards find the first item that starts\n    // with that string and select it.\n    /** @type {?} */this._typeaheadSubscription = /** @type {?} */this._letterKeyStream.pipe(tap(\n    /**\n    * @param {?} keyCode\n    * @return {?}\n    */\n    keyCode => /** @type {?} */this._pressedLetters.push(keyCode)), debounceTime(debounceInterval), filter(\n    /**\n    * @return {?}\n    */\n    () => /** @type {?} */this._pressedLetters.length > 0), map(\n    /**\n    * @return {?}\n    */\n    () => /** @type {?} */this._pressedLetters.join(''))).subscribe(\n    /**\n    * @param {?} inputString\n    * @return {?}\n    */\n    inputString => {\n      /** @type {?} */\n      const items = /** @type {?} */this._getItemsArray();\n      // Start at 1 because we want to start searching at the item immediately\n      // following the current active item.\n      for (let i = 1; i < items.length + 1; i++) {\n        /** @type {?} */\n        const index = ( /** @type {?} */this._activeItemIndex + i) % items.length;\n        /** @type {?} */\n        const item = items[index];\n        if (! /** @type {?} */this._skipPredicateFn(item) && /** @type {?} */item.getLabel().toUpperCase().trim().indexOf(inputString) === 0) {\n          /** @type {?} */this.setActiveItem(index);\n          break;\n        }\n      }\n      /** @type {?} */this._pressedLetters = [];\n    });\n    return (/** @type {?} */this\n    );\n  }\n  /**\n   * @param {?} item\n   * @return {?}\n   */\n  setActiveItem(item) {\n    /** @type {?} */\n    const previousIndex = this._activeItemIndex;\n    this.updateActiveItem(item);\n    if (this._activeItemIndex !== previousIndex) {\n      this.change.next(this._activeItemIndex);\n    }\n  }\n  /**\n   * Sets the active item depending on the key event passed in.\n   * @param {?} event Keyboard event to be used for determining which element should be active.\n   * @return {?}\n   */\n  onKeydown(event) {\n    /** @type {?} */\n    const keyCode = event.keyCode;\n    /** @type {?} */\n    const modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n    /** @type {?} */\n    const isModifierAllowed = modifiers.every(\n    /**\n    * @param {?} modifier\n    * @return {?}\n    */\n    modifier => {\n      return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\n    });\n    switch (keyCode) {\n      case TAB:\n        this.tabOut.next();\n        return;\n      case DOWN_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n      case UP_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n      case RIGHT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n      case LEFT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n      default:\n        if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n          // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n          // otherwise fall back to resolving alphanumeric characters via the keyCode.\n          if (event.key && event.key.length === 1) {\n            this._letterKeyStream.next(event.key.toLocaleUpperCase());\n          } else if (keyCode >= A && keyCode <= Z || keyCode >= ZERO && keyCode <= NINE) {\n            this._letterKeyStream.next(String.fromCharCode(keyCode));\n          }\n        }\n        // Note that we return here, in order to avoid preventing\n        // the default action of non-navigational keys.\n        return;\n    }\n    this._pressedLetters = [];\n    event.preventDefault();\n  }\n  /**\n   * Index of the currently active item.\n   * @return {?}\n   */\n  get activeItemIndex() {\n    return this._activeItemIndex;\n  }\n  /**\n   * The active item.\n   * @return {?}\n   */\n  get activeItem() {\n    return this._activeItem;\n  }\n  /**\n   * Sets the active item to the first enabled item in the list.\n   * @return {?}\n   */\n  setFirstItemActive() {\n    this._setActiveItemByIndex(0, 1);\n  }\n  /**\n   * Sets the active item to the last enabled item in the list.\n   * @return {?}\n   */\n  setLastItemActive() {\n    this._setActiveItemByIndex(this._items.length - 1, -1);\n  }\n  /**\n   * Sets the active item to the next enabled item in the list.\n   * @return {?}\n   */\n  setNextItemActive() {\n    this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n  }\n  /**\n   * Sets the active item to a previous enabled item in the list.\n   * @return {?}\n   */\n  setPreviousItemActive() {\n    this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive() : this._setActiveItemByDelta(-1);\n  }\n  /**\n   * @param {?} item\n   * @return {?}\n   */\n  updateActiveItem(item) {\n    /** @type {?} */\n    const itemArray = this._getItemsArray();\n    /** @type {?} */\n    const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n    /** @type {?} */\n    const activeItem = itemArray[index];\n    // Explicitly check for `null` and `undefined` because other falsy values are valid.\n    this._activeItem = activeItem == null ? null : activeItem;\n    this._activeItemIndex = index;\n  }\n  /**\n   * Allows setting of the activeItemIndex without any other effects.\n   * @deprecated Use `updateActiveItem` instead.\n   * \\@breaking-change 8.0.0\n   * @param {?} index The new activeItemIndex.\n   * @return {?}\n   */\n  updateActiveItemIndex(index) {\n    this.updateActiveItem(index);\n  }\n  /**\n   * This method sets the active item, given a list of items and the delta between the\n   * currently active item and the new active item. It will calculate differently\n   * depending on whether wrap mode is turned on.\n   * @private\n   * @param {?} delta\n   * @return {?}\n   */\n  _setActiveItemByDelta(delta) {\n    this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n  }\n  /**\n   * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n   * down the list until it finds an item that is not disabled, and it will wrap if it\n   * encounters either end of the list.\n   * @private\n   * @param {?} delta\n   * @return {?}\n   */\n  _setActiveInWrapMode(delta) {\n    /** @type {?} */\n    const items = this._getItemsArray();\n    for (let i = 1; i <= items.length; i++) {\n      /** @type {?} */\n      const index = (this._activeItemIndex + delta * i + items.length) % items.length;\n      /** @type {?} */\n      const item = items[index];\n      if (!this._skipPredicateFn(item)) {\n        this.setActiveItem(index);\n        return;\n      }\n    }\n  }\n  /**\n   * Sets the active item properly given the default mode. In other words, it will\n   * continue to move down the list until it finds an item that is not disabled. If\n   * it encounters either end of the list, it will stop and not wrap.\n   * @private\n   * @param {?} delta\n   * @return {?}\n   */\n  _setActiveInDefaultMode(delta) {\n    this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n  }\n  /**\n   * Sets the active item to the first enabled item starting at the index specified. If the\n   * item is disabled, it will move in the fallbackDelta direction until it either\n   * finds an enabled item or encounters the end of the list.\n   * @private\n   * @param {?} index\n   * @param {?} fallbackDelta\n   * @return {?}\n   */\n  _setActiveItemByIndex(index, fallbackDelta) {\n    /** @type {?} */\n    const items = this._getItemsArray();\n    if (!items[index]) {\n      return;\n    }\n    while (this._skipPredicateFn(items[index])) {\n      index += fallbackDelta;\n      if (!items[index]) {\n        return;\n      }\n    }\n    this.setActiveItem(index);\n  }\n  /**\n   * Returns the items as an array.\n   * @private\n   * @return {?}\n   */\n  _getItemsArray() {\n    return this._items instanceof QueryList ? this._items.toArray() : this._items;\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n */\nclass ActiveDescendantKeyManager extends ListKeyManager {\n  /**\n   * @param {?} index\n   * @return {?}\n   */\n  setActiveItem(index) {\n    if (this.activeItem) {\n      this.activeItem.setInactiveStyles();\n    }\n    super.setActiveItem(index);\n    if (this.activeItem) {\n      this.activeItem.setActiveStyles();\n    }\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n */\nclass FocusKeyManager extends ListKeyManager {\n  constructor() {\n    super(...arguments);\n    this._origin = 'program';\n  }\n  /**\n   * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} origin Focus origin to be used when focusing items.\n   * @return {THIS}\n   */\n  setFocusOrigin(origin) {\n    /** @type {?} */this._origin = origin;\n    return (/** @type {?} */this\n    );\n  }\n  /**\n   * @param {?} item\n   * @return {?}\n   */\n  setActiveItem(item) {\n    super.setActiveItem(item);\n    if (this.activeItem) {\n      this.activeItem.focus(this._origin);\n    }\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// The InteractivityChecker leans heavily on the ally.js accessibility utilities.\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\n// supported.\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\nclass InteractivityChecker {\n  /**\n   * @param {?} _platform\n   */\n  constructor(_platform) {\n    this._platform = _platform;\n  }\n  /**\n   * Gets whether an element is disabled.\n   *\n   * @param {?} element Element to be checked.\n   * @return {?} Whether the element is disabled.\n   */\n  isDisabled(element) {\n    // This does not capture some cases, such as a non-form control with a disabled attribute or\n    // a form control inside of a disabled form, but should capture the most common cases.\n    return element.hasAttribute('disabled');\n  }\n  /**\n   * Gets whether an element is visible for the purposes of interactivity.\n   *\n   * This will capture states like `display: none` and `visibility: hidden`, but not things like\n   * being clipped by an `overflow: hidden` parent or being outside the viewport.\n   *\n   * @param {?} element\n   * @return {?} Whether the element is visible.\n   */\n  isVisible(element) {\n    return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n  }\n  /**\n   * Gets whether an element can be reached via Tab key.\n   * Assumes that the element has already been checked with isFocusable.\n   *\n   * @param {?} element Element to be checked.\n   * @return {?} Whether the element is tabbable.\n   */\n  isTabbable(element) {\n    // Nothing is tabbable on the server 😎\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n    /** @type {?} */\n    const frameElement = getFrameElement(getWindow(element));\n    if (frameElement) {\n      /** @type {?} */\n      const frameType = frameElement && frameElement.nodeName.toLowerCase();\n      // Frame elements inherit their tabindex onto all child elements.\n      if (getTabIndexValue(frameElement) === -1) {\n        return false;\n      }\n      // Webkit and Blink consider anything inside of an <object> element as non-tabbable.\n      if ((this._platform.BLINK || this._platform.WEBKIT) && frameType === 'object') {\n        return false;\n      }\n      // Webkit and Blink disable tabbing to an element inside of an invisible frame.\n      if ((this._platform.BLINK || this._platform.WEBKIT) && !this.isVisible(frameElement)) {\n        return false;\n      }\n    }\n    /** @type {?} */\n    let nodeName = element.nodeName.toLowerCase();\n    /** @type {?} */\n    let tabIndexValue = getTabIndexValue(element);\n    if (element.hasAttribute('contenteditable')) {\n      return tabIndexValue !== -1;\n    }\n    if (nodeName === 'iframe') {\n      // The frames may be tabbable depending on content, but it's not possibly to reliably\n      // investigate the content of the frames.\n      return false;\n    }\n    if (nodeName === 'audio') {\n      if (!element.hasAttribute('controls')) {\n        // By default an <audio> element without the controls enabled is not tabbable.\n        return false;\n      } else if (this._platform.BLINK) {\n        // In Blink <audio controls> elements are always tabbable.\n        return true;\n      }\n    }\n    if (nodeName === 'video') {\n      if (!element.hasAttribute('controls') && this._platform.TRIDENT) {\n        // In Trident a <video> element without the controls enabled is not tabbable.\n        return false;\n      } else if (this._platform.BLINK || this._platform.FIREFOX) {\n        // In Chrome and Firefox <video controls> elements are always tabbable.\n        return true;\n      }\n    }\n    if (nodeName === 'object' && (this._platform.BLINK || this._platform.WEBKIT)) {\n      // In all Blink and WebKit based browsers <object> elements are never tabbable.\n      return false;\n    }\n    // In iOS the browser only considers some specific elements as tabbable.\n    if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n      return false;\n    }\n    return element.tabIndex >= 0;\n  }\n  /**\n   * Gets whether an element can be focused by the user.\n   *\n   * @param {?} element Element to be checked.\n   * @return {?} Whether the element is focusable.\n   */\n  isFocusable(element) {\n    // Perform checks in order of left to most expensive.\n    // Again, naive approach that does not capture many edge cases and browser quirks.\n    return isPotentiallyFocusable(element) && !this.isDisabled(element) && this.isVisible(element);\n  }\n}\nInteractivityChecker.ɵfac = function InteractivityChecker_Factory(t) {\n  return new (t || InteractivityChecker)(ɵngcc0.ɵɵinject(ɵngcc1.Platform));\n};\nInteractivityChecker.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: InteractivityChecker,\n  factory: InteractivityChecker.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\nInteractivityChecker.ctorParameters = () => [{\n  type: Platform\n}];\n/** @nocollapse */\nInteractivityChecker.ngInjectableDef = ɵɵdefineInjectable({\n  factory: function InteractivityChecker_Factory() {\n    return new InteractivityChecker(ɵɵinject(Platform));\n  },\n  token: InteractivityChecker,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InteractivityChecker, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Platform\n    }];\n  }, null);\n})();\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n * @param {?} window\n * @return {?}\n */\nfunction getFrameElement(window) {\n  try {\n    return (/** @type {?} */window.frameElement\n    );\n  } catch (_a) {\n    return null;\n  }\n}\n/**\n * Checks whether the specified element has any geometry / rectangles.\n * @param {?} element\n * @return {?}\n */\nfunction hasGeometry(element) {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(element.offsetWidth || element.offsetHeight || typeof element.getClientRects === 'function' && element.getClientRects().length);\n}\n/**\n * Gets whether an element's\n * @param {?} element\n * @return {?}\n */\nfunction isNativeFormElement(element) {\n  /** @type {?} */\n  let nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'input' || nodeName === 'select' || nodeName === 'button' || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is an `<input type=\"hidden\">`.\n * @param {?} element\n * @return {?}\n */\nfunction isHiddenInput(element) {\n  return isInputElement(element) && element.type == 'hidden';\n}\n/**\n * Gets whether an element is an anchor that has an href attribute.\n * @param {?} element\n * @return {?}\n */\nfunction isAnchorWithHref(element) {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n/**\n * Gets whether an element is an input element.\n * @param {?} element\n * @return {?}\n */\nfunction isInputElement(element) {\n  return element.nodeName.toLowerCase() == 'input';\n}\n/**\n * Gets whether an element is an anchor element.\n * @param {?} element\n * @return {?}\n */\nfunction isAnchorElement(element) {\n  return element.nodeName.toLowerCase() == 'a';\n}\n/**\n * Gets whether an element has a valid tabindex.\n * @param {?} element\n * @return {?}\n */\nfunction hasValidTabIndex(element) {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n  /** @type {?} */\n  let tabIndex = element.getAttribute('tabindex');\n  // IE11 parses tabindex=\"\" as the value \"-32768\"\n  if (tabIndex == '-32768') {\n    return false;\n  }\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n * @param {?} element\n * @return {?}\n */\nfunction getTabIndexValue(element) {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  }\n  // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n  /** @type {?} */\n  const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/**\n * Checks whether the specified element is potentially tabbable on iOS\n * @param {?} element\n * @return {?}\n */\nfunction isPotentiallyTabbableIOS(element) {\n  /** @type {?} */\n  let nodeName = element.nodeName.toLowerCase();\n  /** @type {?} */\n  let inputType = nodeName === 'input' && /** @type {?} */element.type;\n  return inputType === 'text' || inputType === 'password' || nodeName === 'select' || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n * @param {?} element\n * @return {?}\n */\nfunction isPotentiallyFocusable(element) {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n  return isNativeFormElement(element) || isAnchorWithHref(element) || element.hasAttribute('contenteditable') || hasValidTabIndex(element);\n}\n/**\n * Gets the parent window of a DOM node with regards of being inside of an iframe.\n * @param {?} node\n * @return {?}\n */\nfunction getWindow(node) {\n  // ownerDocument is null if `node` itself *is* a document.\n  return node.ownerDocument && node.ownerDocument.defaultView || window;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause to two to misalign.\n */\nclass FocusTrap {\n  /**\n   * @param {?} _element\n   * @param {?} _checker\n   * @param {?} _ngZone\n   * @param {?} _document\n   * @param {?=} deferAnchors\n   */\n  constructor(_element, _checker, _ngZone, _document, deferAnchors = false) {\n    this._element = _element;\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._document = _document;\n    this._hasAttached = false;\n    // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\n    this.startAnchorListener =\n    /**\n    * @return {?}\n    */\n    () => this.focusLastTabbableElement();\n    this.endAnchorListener =\n    /**\n    * @return {?}\n    */\n    () => this.focusFirstTabbableElement();\n    this._enabled = true;\n    if (!deferAnchors) {\n      this.attachAnchors();\n    }\n  }\n  /**\n   * Whether the focus trap is active.\n   * @return {?}\n   */\n  get enabled() {\n    return this._enabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set enabled(value) {\n    this._enabled = value;\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(value, this._startAnchor);\n      this._toggleAnchorTabIndex(value, this._endAnchor);\n    }\n  }\n  /**\n   * Destroys the focus trap by cleaning up the anchors.\n   * @return {?}\n   */\n  destroy() {\n    /** @type {?} */\n    const startAnchor = this._startAnchor;\n    /** @type {?} */\n    const endAnchor = this._endAnchor;\n    if (startAnchor) {\n      startAnchor.removeEventListener('focus', this.startAnchorListener);\n      if (startAnchor.parentNode) {\n        startAnchor.parentNode.removeChild(startAnchor);\n      }\n    }\n    if (endAnchor) {\n      endAnchor.removeEventListener('focus', this.endAnchorListener);\n      if (endAnchor.parentNode) {\n        endAnchor.parentNode.removeChild(endAnchor);\n      }\n    }\n    this._startAnchor = this._endAnchor = null;\n  }\n  /**\n   * Inserts the anchors into the DOM. This is usually done automatically\n   * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n   * @return {?} Whether the focus trap managed to attach successfuly. This may not be the case\n   * if the target element isn't currently in the DOM.\n   */\n  attachAnchors() {\n    // If we're not on the browser, there can be no focus to trap.\n    if (this._hasAttached) {\n      return true;\n    }\n    this._ngZone.runOutsideAngular(\n    /**\n    * @return {?}\n    */\n    () => {\n      if (!this._startAnchor) {\n        this._startAnchor = this._createAnchor();\n        /** @type {?} */this._startAnchor.addEventListener('focus', this.startAnchorListener);\n      }\n      if (!this._endAnchor) {\n        this._endAnchor = this._createAnchor();\n        /** @type {?} */this._endAnchor.addEventListener('focus', this.endAnchorListener);\n      }\n    });\n    if (this._element.parentNode) {\n      this._element.parentNode.insertBefore( /** @type {?} */this._startAnchor, this._element);\n      this._element.parentNode.insertBefore( /** @type {?} */this._endAnchor, this._element.nextSibling);\n      this._hasAttached = true;\n    }\n    return this._hasAttached;\n  }\n  /**\n   * Waits for the zone to stabilize, then either focuses the first element that the\n   * user specified, or the first tabbable element.\n   * @return {?} Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfuly.\n   */\n  focusInitialElementWhenReady() {\n    return new Promise(\n    /**\n    * @param {?} resolve\n    * @return {?}\n    */\n    resolve => {\n      this._executeOnStable(\n      /**\n      * @return {?}\n      */\n      () => resolve(this.focusInitialElement()));\n    });\n  }\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the first tabbable element within the focus trap region.\n   * @return {?} Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfuly.\n   */\n  focusFirstTabbableElementWhenReady() {\n    return new Promise(\n    /**\n    * @param {?} resolve\n    * @return {?}\n    */\n    resolve => {\n      this._executeOnStable(\n      /**\n      * @return {?}\n      */\n      () => resolve(this.focusFirstTabbableElement()));\n    });\n  }\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the last tabbable element within the focus trap region.\n   * @return {?} Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfuly.\n   */\n  focusLastTabbableElementWhenReady() {\n    return new Promise(\n    /**\n    * @param {?} resolve\n    * @return {?}\n    */\n    resolve => {\n      this._executeOnStable(\n      /**\n      * @return {?}\n      */\n      () => resolve(this.focusLastTabbableElement()));\n    });\n  }\n  /**\n   * Get the specified boundary element of the trapped region.\n   * @private\n   * @param {?} bound The boundary to get (start or end of trapped region).\n   * @return {?} The boundary element.\n   */\n  _getRegionBoundary(bound) {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    /** @type {?} */\n    let markers = /** @type {?} */this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` + `[cdkFocusRegion${bound}], ` + `[cdk-focus-${bound}]`);\n    for (let i = 0; i < markers.length; i++) {\n      // @breaking-change 8.0.0\n      if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` + `use 'cdkFocusRegion${bound}' instead. The deprecated ` + `attribute will be removed in 8.0.0.`, markers[i]);\n      } else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` + `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` + `will be removed in 8.0.0.`, markers[i]);\n      }\n    }\n    if (bound == 'start') {\n      return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n    }\n    return markers.length ? markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n  }\n  /**\n   * Focuses the element that should be focused when the focus trap is initialized.\n   * @return {?} Whether focus was moved successfuly.\n   */\n  focusInitialElement() {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    /** @type {?} */\n    const redirectToElement = /** @type {?} */this._element.querySelector(`[cdk-focus-initial], ` + `[cdkFocusInitial]`);\n    if (redirectToElement) {\n      // @breaking-change 8.0.0\n      if (redirectToElement.hasAttribute(`cdk-focus-initial`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` + `use 'cdkFocusInitial' instead. The deprecated attribute ` + `will be removed in 8.0.0`, redirectToElement);\n      }\n      // Warn the consumer if the element they've pointed to\n      // isn't focusable, when not in production mode.\n      if (isDevMode() && !this._checker.isFocusable(redirectToElement)) {\n        console.warn(`Element matching '[cdkFocusInitial]' is not focusable.`, redirectToElement);\n      }\n      redirectToElement.focus();\n      return true;\n    }\n    return this.focusFirstTabbableElement();\n  }\n  /**\n   * Focuses the first tabbable element within the focus trap region.\n   * @return {?} Whether focus was moved successfuly.\n   */\n  focusFirstTabbableElement() {\n    /** @type {?} */\n    const redirectToElement = this._getRegionBoundary('start');\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n    return !!redirectToElement;\n  }\n  /**\n   * Focuses the last tabbable element within the focus trap region.\n   * @return {?} Whether focus was moved successfuly.\n   */\n  focusLastTabbableElement() {\n    /** @type {?} */\n    const redirectToElement = this._getRegionBoundary('end');\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n    return !!redirectToElement;\n  }\n  /**\n   * Checks whether the focus trap has successfuly been attached.\n   * @return {?}\n   */\n  hasAttached() {\n    return this._hasAttached;\n  }\n  /**\n   * Get the first tabbable element from a DOM subtree (inclusive).\n   * @private\n   * @param {?} root\n   * @return {?}\n   */\n  _getFirstTabbableElement(root) {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n    // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall\n    // back to `childNodes` which includes text nodes, comments etc.\n    /** @type {?} */\n    let children = root.children || root.childNodes;\n    for (let i = 0; i < children.length; i++) {\n      /** @type {?} */\n      let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getFirstTabbableElement( /** @type {?} */children[i]) : null;\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n    return null;\n  }\n  /**\n   * Get the last tabbable element from a DOM subtree (inclusive).\n   * @private\n   * @param {?} root\n   * @return {?}\n   */\n  _getLastTabbableElement(root) {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n    // Iterate in reverse DOM order.\n    /** @type {?} */\n    let children = root.children || root.childNodes;\n    for (let i = children.length - 1; i >= 0; i--) {\n      /** @type {?} */\n      let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getLastTabbableElement( /** @type {?} */children[i]) : null;\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n    return null;\n  }\n  /**\n   * Creates an anchor element.\n   * @private\n   * @return {?}\n   */\n  _createAnchor() {\n    /** @type {?} */\n    const anchor = this._document.createElement('div');\n    this._toggleAnchorTabIndex(this._enabled, anchor);\n    anchor.classList.add('cdk-visually-hidden');\n    anchor.classList.add('cdk-focus-trap-anchor');\n    anchor.setAttribute('aria-hidden', 'true');\n    return anchor;\n  }\n  /**\n   * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n   * @private\n   * @param {?} isEnabled Whether the focus trap is enabled.\n   * @param {?} anchor Anchor on which to toggle the tabindex.\n   * @return {?}\n   */\n  _toggleAnchorTabIndex(isEnabled, anchor) {\n    // Remove the tabindex completely, rather than setting it to -1, because if the\n    // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n    isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n  }\n  /**\n   * Executes a function when the zone is stable.\n   * @private\n   * @param {?} fn\n   * @return {?}\n   */\n  _executeOnStable(fn) {\n    if (this._ngZone.isStable) {\n      fn();\n    } else {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(fn);\n    }\n  }\n}\n/**\n * Factory that allows easy instantiation of focus traps.\n */\nclass FocusTrapFactory {\n  /**\n   * @param {?} _checker\n   * @param {?} _ngZone\n   * @param {?} _document\n   */\n  constructor(_checker, _ngZone, _document) {\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._document = _document;\n  }\n  /**\n   * Creates a focus-trapped region around the given element.\n   * @param {?} element The element around which focus will be trapped.\n   * @param {?=} deferCaptureElements Defers the creation of focus-capturing elements to be done\n   *     manually by the user.\n   * @return {?} The created focus trap instance.\n   */\n  create(element, deferCaptureElements = false) {\n    return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);\n  }\n}\nFocusTrapFactory.ɵfac = function FocusTrapFactory_Factory(t) {\n  return new (t || FocusTrapFactory)(ɵngcc0.ɵɵinject(InteractivityChecker), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT));\n};\nFocusTrapFactory.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: FocusTrapFactory,\n  factory: FocusTrapFactory.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\nFocusTrapFactory.ctorParameters = () => [{\n  type: InteractivityChecker\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n/** @nocollapse */\nFocusTrapFactory.ngInjectableDef = ɵɵdefineInjectable({\n  factory: function FocusTrapFactory_Factory() {\n    return new FocusTrapFactory(ɵɵinject(InteractivityChecker), ɵɵinject(NgZone), ɵɵinject(DOCUMENT));\n  },\n  token: FocusTrapFactory,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusTrapFactory, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: InteractivityChecker\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Directive for trapping focus within a region.\n */\nclass CdkTrapFocus {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _focusTrapFactory\n   * @param {?} _document\n   */\n  constructor(_elementRef, _focusTrapFactory, _document) {\n    this._elementRef = _elementRef;\n    this._focusTrapFactory = _focusTrapFactory;\n    /**\n     * Previously focused element to restore focus to upon destroy when using autoCapture.\n     */\n    this._previouslyFocusedElement = null;\n    this._document = _document;\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n  }\n  /**\n   * Whether the focus trap is active.\n   * @return {?}\n   */\n  get enabled() {\n    return this.focusTrap.enabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set enabled(value) {\n    this.focusTrap.enabled = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the directive should automatially move focus into the trapped region upon\n   * initialization and return focus to the previous activeElement upon destruction.\n   * @return {?}\n   */\n  get autoCapture() {\n    return this._autoCapture;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set autoCapture(value) {\n    this._autoCapture = coerceBooleanProperty(value);\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this.focusTrap.destroy();\n    // If we stored a previously focused element when using autoCapture, return focus to that\n    // element now that the trapped region is being destroyed.\n    if (this._previouslyFocusedElement) {\n      this._previouslyFocusedElement.focus();\n      this._previouslyFocusedElement = null;\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    this.focusTrap.attachAnchors();\n    if (this.autoCapture) {\n      this._previouslyFocusedElement = /** @type {?} */this._document.activeElement;\n      this.focusTrap.focusInitialElementWhenReady();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngDoCheck() {\n    if (!this.focusTrap.hasAttached()) {\n      this.focusTrap.attachAnchors();\n    }\n  }\n}\nCdkTrapFocus.ɵfac = function CdkTrapFocus_Factory(t) {\n  return new (t || CdkTrapFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n};\nCdkTrapFocus.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkTrapFocus,\n  selectors: [[\"\", \"cdkTrapFocus\", \"\"]],\n  inputs: {\n    enabled: [\"cdkTrapFocus\", \"enabled\"],\n    autoCapture: [\"cdkTrapFocusAutoCapture\", \"autoCapture\"]\n  },\n  exportAs: [\"cdkTrapFocus\"]\n});\n/** @nocollapse */\nCdkTrapFocus.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: FocusTrapFactory\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\nCdkTrapFocus.propDecorators = {\n  enabled: [{\n    type: Input,\n    args: ['cdkTrapFocus']\n  }],\n  autoCapture: [{\n    type: Input,\n    args: ['cdkTrapFocusAutoCapture']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTrapFocus, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTrapFocus]',\n      exportAs: 'cdkTrapFocus'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: FocusTrapFactory\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    enabled: [{\n      type: Input,\n      args: ['cdkTrapFocus']\n    }],\n    autoCapture: [{\n      type: Input,\n      args: ['cdkTrapFocusAutoCapture']\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken('liveAnnouncerElement', {\n  providedIn: 'root',\n  factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {\n  return null;\n}\n/**\n * Injection token that can be used to configure the default options for the LiveAnnouncer.\n * @type {?}\n */\nconst LIVE_ANNOUNCER_DEFAULT_OPTIONS = new InjectionToken('LIVE_ANNOUNCER_DEFAULT_OPTIONS');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass LiveAnnouncer {\n  /**\n   * @param {?} elementToken\n   * @param {?} _ngZone\n   * @param {?} _document\n   * @param {?=} _defaultOptions\n   */\n  constructor(elementToken, _ngZone, _document, _defaultOptions) {\n    this._ngZone = _ngZone;\n    this._defaultOptions = _defaultOptions;\n    // We inject the live element and document as `any` because the constructor signature cannot\n    // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n    // a class decorator causes TypeScript to preserve the constructor signature types.\n    this._document = _document;\n    this._liveElement = elementToken || this._createLiveElement();\n  }\n  /**\n   * @param {?} message\n   * @param {...?} args\n   * @return {?}\n   */\n  announce(message, ...args) {\n    /** @type {?} */\n    const defaultOptions = this._defaultOptions;\n    /** @type {?} */\n    let politeness;\n    /** @type {?} */\n    let duration;\n    if (args.length === 1 && typeof args[0] === 'number') {\n      duration = args[0];\n    } else {\n      [politeness, duration] = args;\n    }\n    this.clear();\n    clearTimeout(this._previousTimeout);\n    if (!politeness) {\n      politeness = defaultOptions && defaultOptions.politeness ? defaultOptions.politeness : 'polite';\n    }\n    if (duration == null && defaultOptions) {\n      duration = defaultOptions.duration;\n    }\n    // TODO: ensure changing the politeness works on all environments we support.\n    this._liveElement.setAttribute('aria-live', politeness);\n    // This 100ms timeout is necessary for some browser + screen-reader combinations:\n    // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n    // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n    //   second time without clearing and then using a non-zero delay.\n    // (using JAWS 17 at time of this writing).\n    return this._ngZone.runOutsideAngular(\n    /**\n    * @return {?}\n    */\n    () => {\n      return new Promise(\n      /**\n      * @param {?} resolve\n      * @return {?}\n      */\n      resolve => {\n        clearTimeout(this._previousTimeout);\n        this._previousTimeout = setTimeout(\n        /**\n        * @return {?}\n        */\n        () => {\n          this._liveElement.textContent = message;\n          resolve();\n          if (typeof duration === 'number') {\n            this._previousTimeout = setTimeout(\n            /**\n            * @return {?}\n            */\n            () => this.clear(), duration);\n          }\n        }, 100);\n      });\n    });\n  }\n  /**\n   * Clears the current text from the announcer element. Can be used to prevent\n   * screen readers from reading the text out again while the user is going\n   * through the page landmarks.\n   * @return {?}\n   */\n  clear() {\n    if (this._liveElement) {\n      this._liveElement.textContent = '';\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    clearTimeout(this._previousTimeout);\n    if (this._liveElement && this._liveElement.parentNode) {\n      this._liveElement.parentNode.removeChild(this._liveElement);\n      this._liveElement = /** @type {?} */null;\n    }\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  _createLiveElement() {\n    /** @type {?} */\n    const elementClass = 'cdk-live-announcer-element';\n    /** @type {?} */\n    const previousElements = this._document.getElementsByClassName(elementClass);\n    /** @type {?} */\n    const liveEl = this._document.createElement('div');\n    // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n    for (let i = 0; i < previousElements.length; i++) {\n      /** @type {?} */previousElements[i].parentNode.removeChild(previousElements[i]);\n    }\n    liveEl.classList.add(elementClass);\n    liveEl.classList.add('cdk-visually-hidden');\n    liveEl.setAttribute('aria-atomic', 'true');\n    liveEl.setAttribute('aria-live', 'polite');\n    this._document.body.appendChild(liveEl);\n    return liveEl;\n  }\n}\nLiveAnnouncer.ɵfac = function LiveAnnouncer_Factory(t) {\n  return new (t || LiveAnnouncer)(ɵngcc0.ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8));\n};\nLiveAnnouncer.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: LiveAnnouncer,\n  factory: LiveAnnouncer.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\nLiveAnnouncer.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]\n  }]\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS]\n  }]\n}];\n/** @nocollapse */\nLiveAnnouncer.ngInjectableDef = ɵɵdefineInjectable({\n  factory: function LiveAnnouncer_Factory() {\n    return new LiveAnnouncer(ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), ɵɵinject(NgZone), ɵɵinject(DOCUMENT), ɵɵinject(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8));\n  },\n  token: LiveAnnouncer,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LiveAnnouncer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\nclass CdkAriaLive {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _liveAnnouncer\n   * @param {?} _contentObserver\n   * @param {?} _ngZone\n   */\n  constructor(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {\n    this._elementRef = _elementRef;\n    this._liveAnnouncer = _liveAnnouncer;\n    this._contentObserver = _contentObserver;\n    this._ngZone = _ngZone;\n    this._politeness = 'off';\n  }\n  /**\n   * The aria-live politeness level to use when announcing messages.\n   * @return {?}\n   */\n  get politeness() {\n    return this._politeness;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set politeness(value) {\n    this._politeness = value === 'polite' || value === 'assertive' ? value : 'off';\n    if (this._politeness === 'off') {\n      if (this._subscription) {\n        this._subscription.unsubscribe();\n        this._subscription = null;\n      }\n    } else if (!this._subscription) {\n      this._subscription = this._ngZone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      () => {\n        return this._contentObserver.observe(this._elementRef).subscribe(\n        /**\n        * @return {?}\n        */\n        () => {\n          // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\n          /** @type {?} */\n          const elementText = this._elementRef.nativeElement.textContent;\n          // The `MutationObserver` fires also for attribute\n          // changes which we don't want to announce.\n          if (elementText !== this._previousAnnouncedText) {\n            this._liveAnnouncer.announce(elementText, this._politeness);\n            this._previousAnnouncedText = elementText;\n          }\n        });\n      });\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n  }\n}\nCdkAriaLive.ɵfac = function CdkAriaLive_Factory(t) {\n  return new (t || CdkAriaLive)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\nCdkAriaLive.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkAriaLive,\n  selectors: [[\"\", \"cdkAriaLive\", \"\"]],\n  inputs: {\n    politeness: [\"cdkAriaLive\", \"politeness\"]\n  },\n  exportAs: [\"cdkAriaLive\"]\n});\n/** @nocollapse */\nCdkAriaLive.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: LiveAnnouncer\n}, {\n  type: ContentObserver\n}, {\n  type: NgZone\n}];\nCdkAriaLive.propDecorators = {\n  politeness: [{\n    type: Input,\n    args: ['cdkAriaLive']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAriaLive, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkAriaLive]',\n      exportAs: 'cdkAriaLive'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: LiveAnnouncer\n    }, {\n      type: ɵngcc2.ContentObserver\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    politeness: [{\n      type: Input,\n      args: ['cdkAriaLive']\n    }]\n  });\n})();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentAnnouncer\n * @param {?} liveElement\n * @param {?} _document\n * @param {?} ngZone\n * @return {?}\n */\nfunction LIVE_ANNOUNCER_PROVIDER_FACTORY(parentAnnouncer, liveElement, _document, ngZone) {\n  return parentAnnouncer || new LiveAnnouncer(liveElement, ngZone, _document);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\nconst LIVE_ANNOUNCER_PROVIDER = {\n  // If there is already a LiveAnnouncer available, use that. Otherwise, provide a new one.\n  provide: LiveAnnouncer,\n  deps: [[new Optional(), new SkipSelf(), LiveAnnouncer], [new Optional(), new Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN)], DOCUMENT, NgZone],\n  useFactory: LIVE_ANNOUNCER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\n/** @type {?} */\nconst TOUCH_BUFFER_MS = 650;\n/**\n * Event listener options that enable capturing and also\n * mark the listener as passive if the browser supports it.\n * @type {?}\n */\nconst captureEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true,\n  capture: true\n});\n/**\n * Monitors mouse and keyboard events to determine the cause of focus events.\n */\nclass FocusMonitor {\n  /**\n   * @param {?} _ngZone\n   * @param {?} _platform\n   */\n  constructor(_ngZone, _platform) {\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n    /**\n     * The focus origin that the next focus event is a result of.\n     */\n    this._origin = null;\n    /**\n     * Whether the window has just been focused.\n     */\n    this._windowFocused = false;\n    /**\n     * Map of elements being monitored to their info.\n     */\n    this._elementInfo = new Map();\n    /**\n     * The number of elements currently being monitored.\n     */\n    this._monitoredElementCount = 0;\n    /**\n     * Event listener for `keydown` events on the document.\n     * Needs to be an arrow function in order to preserve the context when it gets bound.\n     */\n    this._documentKeydownListener =\n    /**\n    * @return {?}\n    */\n    () => {\n      // On keydown record the origin and clear any touch event that may be in progress.\n      this._lastTouchTarget = null;\n      this._setOriginForCurrentEventQueue('keyboard');\n    };\n    /**\n     * Event listener for `mousedown` events on the document.\n     * Needs to be an arrow function in order to preserve the context when it gets bound.\n     */\n    this._documentMousedownListener =\n    /**\n    * @return {?}\n    */\n    () => {\n      // On mousedown record the origin only if there is not touch\n      // target, since a mousedown can happen as a result of a touch event.\n      if (!this._lastTouchTarget) {\n        this._setOriginForCurrentEventQueue('mouse');\n      }\n    };\n    /**\n     * Event listener for `touchstart` events on the document.\n     * Needs to be an arrow function in order to preserve the context when it gets bound.\n     */\n    this._documentTouchstartListener =\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => {\n      // When the touchstart event fires the focus event is not yet in the event queue. This means\n      // we can't rely on the trick used above (setting timeout of 1ms). Instead we wait 650ms to\n      // see if a focus happens.\n      if (this._touchTimeoutId != null) {\n        clearTimeout(this._touchTimeoutId);\n      }\n      // Since this listener is bound on the `document` level, any events coming from the shadow DOM\n      // will have their `target` set to the shadow root. If available, use `composedPath` to\n      // figure out the event target.\n      this._lastTouchTarget = event.composedPath ? event.composedPath()[0] : event.target;\n      this._touchTimeoutId = setTimeout(\n      /**\n      * @return {?}\n      */\n      () => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\n    };\n    /**\n     * Event listener for `focus` events on the window.\n     * Needs to be an arrow function in order to preserve the context when it gets bound.\n     */\n    this._windowFocusListener =\n    /**\n    * @return {?}\n    */\n    () => {\n      // Make a note of when the window regains focus, so we can\n      // restore the origin info for the focused element.\n      this._windowFocused = true;\n      this._windowFocusTimeoutId = setTimeout(\n      /**\n      * @return {?}\n      */\n      () => this._windowFocused = false);\n    };\n  }\n  /**\n   * @param {?} element\n   * @param {?=} checkChildren\n   * @return {?}\n   */\n  monitor(element, checkChildren = false) {\n    // Do nothing if we're not on the browser platform.\n    if (!this._platform.isBrowser) {\n      return of(null);\n    }\n    /** @type {?} */\n    const nativeElement = coerceElement(element);\n    // Check if we're already monitoring this element.\n    if (this._elementInfo.has(nativeElement)) {\n      /** @type {?} */\n      let cachedInfo = this._elementInfo.get(nativeElement);\n      /** @type {?} */cachedInfo.checkChildren = checkChildren;\n      return (/** @type {?} */cachedInfo.subject.asObservable()\n      );\n    }\n    // Create monitored element info.\n    /** @type {?} */\n    let info = {\n      unlisten:\n      /**\n      * @return {?}\n      */\n      () => {},\n      checkChildren: checkChildren,\n      subject: new Subject()\n    };\n    this._elementInfo.set(nativeElement, info);\n    this._incrementMonitoredElementCount();\n    // Start listening. We need to listen in capture phase since focus events don't bubble.\n    /** @type {?} */\n    let focusListener =\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => this._onFocus(event, nativeElement);\n    /** @type {?} */\n    let blurListener =\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => this._onBlur(event, nativeElement);\n    this._ngZone.runOutsideAngular(\n    /**\n    * @return {?}\n    */\n    () => {\n      nativeElement.addEventListener('focus', focusListener, true);\n      nativeElement.addEventListener('blur', blurListener, true);\n    });\n    // Create an unlisten function for later.\n    info.unlisten =\n    /**\n    * @return {?}\n    */\n    () => {\n      nativeElement.removeEventListener('focus', focusListener, true);\n      nativeElement.removeEventListener('blur', blurListener, true);\n    };\n    return info.subject.asObservable();\n  }\n  /**\n   * @param {?} element\n   * @return {?}\n   */\n  stopMonitoring(element) {\n    /** @type {?} */\n    const nativeElement = coerceElement(element);\n    /** @type {?} */\n    const elementInfo = this._elementInfo.get(nativeElement);\n    if (elementInfo) {\n      elementInfo.unlisten();\n      elementInfo.subject.complete();\n      this._setClasses(nativeElement);\n      this._elementInfo.delete(nativeElement);\n      this._decrementMonitoredElementCount();\n    }\n  }\n  /**\n   * @param {?} element\n   * @param {?} origin\n   * @param {?=} options\n   * @return {?}\n   */\n  focusVia(element, origin, options) {\n    /** @type {?} */\n    const nativeElement = coerceElement(element);\n    this._setOriginForCurrentEventQueue(origin);\n    // `focus` isn't available on the server\n    if (typeof nativeElement.focus === 'function') {\n      // Cast the element to `any`, because the TS typings don't have the `options` parameter yet.\n      /** @type {?} */nativeElement.focus(options);\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._elementInfo.forEach(\n    /**\n    * @param {?} _info\n    * @param {?} element\n    * @return {?}\n    */\n    (_info, element) => this.stopMonitoring(element));\n  }\n  /**\n   * @private\n   * @param {?} element\n   * @param {?} className\n   * @param {?} shouldSet\n   * @return {?}\n   */\n  _toggleClass(element, className, shouldSet) {\n    if (shouldSet) {\n      element.classList.add(className);\n    } else {\n      element.classList.remove(className);\n    }\n  }\n  /**\n   * Sets the focus classes on the element based on the given focus origin.\n   * @private\n   * @param {?} element The element to update the classes on.\n   * @param {?=} origin The focus origin.\n   * @return {?}\n   */\n  _setClasses(element, origin) {\n    /** @type {?} */\n    const elementInfo = this._elementInfo.get(element);\n    if (elementInfo) {\n      this._toggleClass(element, 'cdk-focused', !!origin);\n      this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');\n      this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\n      this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');\n      this._toggleClass(element, 'cdk-program-focused', origin === 'program');\n    }\n  }\n  /**\n   * Sets the origin and schedules an async function to clear it at the end of the event queue.\n   * @private\n   * @param {?} origin The origin to set.\n   * @return {?}\n   */\n  _setOriginForCurrentEventQueue(origin) {\n    this._ngZone.runOutsideAngular(\n    /**\n    * @return {?}\n    */\n    () => {\n      this._origin = origin;\n      // Sometimes the focus origin won't be valid in Firefox because Firefox seems to focus *one*\n      // tick after the interaction event fired. To ensure the focus origin is always correct,\n      // the focus origin will be determined at the beginning of the next tick.\n      this._originTimeoutId = setTimeout(\n      /**\n      * @return {?}\n      */\n      () => this._origin = null, 1);\n    });\n  }\n  /**\n   * Checks whether the given focus event was caused by a touchstart event.\n   * @private\n   * @param {?} event The focus event to check.\n   * @return {?} Whether the event was caused by a touch.\n   */\n  _wasCausedByTouch(event) {\n    // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n    // Consider the following dom structure:\n    //\n    // <div #parent tabindex=\"0\" cdkFocusClasses>\n    //   <div #child (click)=\"#parent.focus()\"></div>\n    // </div>\n    //\n    // If the user touches the #child element and the #parent is programmatically focused as a\n    // result, this code will still consider it to have been caused by the touch event and will\n    // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n    // relatively small edge-case that can be worked around by using\n    // focusVia(parentEl, 'program') to focus the parent element.\n    //\n    // If we decide that we absolutely must handle this case correctly, we can do so by listening\n    // for the first focus event after the touchstart, and then the first blur event after that\n    // focus event. When that blur event fires we know that whatever follows is not a result of the\n    // touchstart.\n    /** @type {?} */\n    let focusTarget = event.target;\n    return this._lastTouchTarget instanceof Node && focusTarget instanceof Node && (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n  }\n  /**\n   * Handles focus events on a registered element.\n   * @private\n   * @param {?} event The focus event.\n   * @param {?} element The monitored element.\n   * @return {?}\n   */\n  _onFocus(event, element) {\n    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n    // focus event affecting the monitored element. If we want to use the origin of the first event\n    // instead we should check for the cdk-focused class here and return if the element already has\n    // it. (This only matters for elements that have includesChildren = true).\n    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n    // focus event affecting the monitored element. If we want to use the origin of the first event\n    // instead we should check for the cdk-focused class here and return if the element already has\n    // it. (This only matters for elements that have includesChildren = true).\n    // If we are not counting child-element-focus as focused, make sure that the event target is the\n    // monitored element itself.\n    /** @type {?} */\n    const elementInfo = this._elementInfo.get(element);\n    if (!elementInfo || !elementInfo.checkChildren && element !== event.target) {\n      return;\n    }\n    // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n    // 1) The window has just regained focus, in which case we want to restore the focused state of\n    //    the element from before the window blurred.\n    // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n    // 3) The element was programmatically focused, in which case we should mark the origin as\n    //    'program'.\n    /** @type {?} */\n    let origin = this._origin;\n    if (!origin) {\n      if (this._windowFocused && this._lastFocusOrigin) {\n        origin = this._lastFocusOrigin;\n      } else if (this._wasCausedByTouch(event)) {\n        origin = 'touch';\n      } else {\n        origin = 'program';\n      }\n    }\n    this._setClasses(element, origin);\n    this._emitOrigin(elementInfo.subject, origin);\n    this._lastFocusOrigin = origin;\n  }\n  /**\n   * Handles blur events on a registered element.\n   * @param {?} event The blur event.\n   * @param {?} element The monitored element.\n   * @return {?}\n   */\n  _onBlur(event, element) {\n    // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n    // order to focus another child of the monitored element.\n    /** @type {?} */\n    const elementInfo = this._elementInfo.get(element);\n    if (!elementInfo || elementInfo.checkChildren && event.relatedTarget instanceof Node && element.contains(event.relatedTarget)) {\n      return;\n    }\n    this._setClasses(element);\n    this._emitOrigin(elementInfo.subject, null);\n  }\n  /**\n   * @private\n   * @param {?} subject\n   * @param {?} origin\n   * @return {?}\n   */\n  _emitOrigin(subject, origin) {\n    this._ngZone.run(\n    /**\n    * @return {?}\n    */\n    () => subject.next(origin));\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  _incrementMonitoredElementCount() {\n    // Register global listeners when first element is monitored.\n    if (++this._monitoredElementCount == 1 && this._platform.isBrowser) {\n      // Note: we listen to events in the capture phase so we\n      // can detect them even if the user stops propagation.\n      this._ngZone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      () => {\n        document.addEventListener('keydown', this._documentKeydownListener, captureEventListenerOptions);\n        document.addEventListener('mousedown', this._documentMousedownListener, captureEventListenerOptions);\n        document.addEventListener('touchstart', this._documentTouchstartListener, captureEventListenerOptions);\n        window.addEventListener('focus', this._windowFocusListener);\n      });\n    }\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  _decrementMonitoredElementCount() {\n    // Unregister global listeners when last element is unmonitored.\n    if (! --this._monitoredElementCount) {\n      document.removeEventListener('keydown', this._documentKeydownListener, captureEventListenerOptions);\n      document.removeEventListener('mousedown', this._documentMousedownListener, captureEventListenerOptions);\n      document.removeEventListener('touchstart', this._documentTouchstartListener, captureEventListenerOptions);\n      window.removeEventListener('focus', this._windowFocusListener);\n      // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n      clearTimeout(this._windowFocusTimeoutId);\n      clearTimeout(this._touchTimeoutId);\n      clearTimeout(this._originTimeoutId);\n    }\n  }\n}\nFocusMonitor.ɵfac = function FocusMonitor_Factory(t) {\n  return new (t || FocusMonitor)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform));\n};\nFocusMonitor.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: FocusMonitor,\n  factory: FocusMonitor.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\nFocusMonitor.ctorParameters = () => [{\n  type: NgZone\n}, {\n  type: Platform\n}];\n/** @nocollapse */\nFocusMonitor.ngInjectableDef = ɵɵdefineInjectable({\n  factory: function FocusMonitor_Factory() {\n    return new FocusMonitor(ɵɵinject(NgZone), ɵɵinject(Platform));\n  },\n  token: FocusMonitor,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusMonitor, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc1.Platform\n    }];\n  }, null);\n})();\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\nclass CdkMonitorFocus {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _focusMonitor\n   */\n  constructor(_elementRef, _focusMonitor) {\n    this._elementRef = _elementRef;\n    this._focusMonitor = _focusMonitor;\n    this.cdkFocusChange = new EventEmitter();\n    this._monitorSubscription = this._focusMonitor.monitor(this._elementRef, this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus')).subscribe(\n    /**\n    * @param {?} origin\n    * @return {?}\n    */\n    origin => this.cdkFocusChange.emit(origin));\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._monitorSubscription.unsubscribe();\n  }\n}\nCdkMonitorFocus.ɵfac = function CdkMonitorFocus_Factory(t) {\n  return new (t || CdkMonitorFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusMonitor));\n};\nCdkMonitorFocus.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkMonitorFocus,\n  selectors: [[\"\", \"cdkMonitorElementFocus\", \"\"], [\"\", \"cdkMonitorSubtreeFocus\", \"\"]],\n  outputs: {\n    cdkFocusChange: \"cdkFocusChange\"\n  }\n});\n/** @nocollapse */\nCdkMonitorFocus.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: FocusMonitor\n}];\nCdkMonitorFocus.propDecorators = {\n  cdkFocusChange: [{\n    type: Output\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkMonitorFocus, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: FocusMonitor\n    }];\n  }, {\n    cdkFocusChange: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nfunction FOCUS_MONITOR_PROVIDER_FACTORY(parentDispatcher, ngZone, platform) {\n  return parentDispatcher || new FocusMonitor(ngZone, platform);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\nconst FOCUS_MONITOR_PROVIDER = {\n  // If there is already a FocusMonitor available, use that. Otherwise, provide a new one.\n  provide: FocusMonitor,\n  deps: [[new Optional(), new SkipSelf(), FocusMonitor], NgZone, Platform],\n  useFactory: FOCUS_MONITOR_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Screenreaders will often fire fake mousedown events when a focusable element\n * is activated using the keyboard. We can typically distinguish between these faked\n * mousedown events and real mousedown events using the \"buttons\" property. While\n * real mousedowns will indicate the mouse button that was pressed (e.g. \"1\" for\n * the left mouse button), faked mousedowns will usually set the property value to 0.\n * @param {?} event\n * @return {?}\n */\nfunction isFakeMousedownFromScreenReader(event) {\n  return event.buttons === 0;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass A11yModule {}\nA11yModule.ɵfac = function A11yModule_Factory(t) {\n  return new (t || A11yModule)();\n};\nA11yModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: A11yModule\n});\nA11yModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [CommonModule, PlatformModule, ObserversModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(A11yModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, PlatformModule, ObserversModule],\n      declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n      exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(A11yModule, {\n    declarations: function () {\n      return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus];\n    },\n    imports: function () {\n      return [CommonModule, PlatformModule, ObserversModule];\n    },\n    exports: function () {\n      return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus];\n    }\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { ARIA_DESCRIBER_PROVIDER_FACTORY, MESSAGES_CONTAINER_ID, CDK_DESCRIBEDBY_ID_PREFIX, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, AriaDescriber, ARIA_DESCRIBER_PROVIDER, ActiveDescendantKeyManager, FocusKeyManager, ListKeyManager, FocusTrap, FocusTrapFactory, CdkTrapFocus, InteractivityChecker, LIVE_ANNOUNCER_PROVIDER_FACTORY, LiveAnnouncer, CdkAriaLive, LIVE_ANNOUNCER_PROVIDER, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, LIVE_ANNOUNCER_ELEMENT_TOKEN, LIVE_ANNOUNCER_DEFAULT_OPTIONS, FOCUS_MONITOR_PROVIDER_FACTORY, TOUCH_BUFFER_MS, FocusMonitor, CdkMonitorFocus, FOCUS_MONITOR_PROVIDER, isFakeMousedownFromScreenReader, A11yModule };","map":{"version":3,"names":["DOCUMENT","CommonModule","Inject","Injectable","Optional","SkipSelf","QueryList","Directive","ElementRef","Input","NgZone","isDevMode","InjectionToken","EventEmitter","Output","NgModule","ɵɵdefineInjectable","ɵɵinject","Subject","Subscription","of","UP_ARROW","DOWN_ARROW","LEFT_ARROW","RIGHT_ARROW","TAB","A","Z","ZERO","NINE","hasModifierKey","debounceTime","filter","map","tap","take","Platform","normalizePassiveListenerOptions","PlatformModule","coerceBooleanProperty","coerceElement","ContentObserver","ObserversModule","ɵngcc0","ɵngcc1","ɵngcc2","ID_DELIMINATOR","addAriaReferencedId","el","attr","id","ids","getAriaReferenceIds","some","existingId","trim","push","setAttribute","join","removeAriaReferencedId","filteredIds","val","length","removeAttribute","getAttribute","match","MESSAGES_CONTAINER_ID","CDK_DESCRIBEDBY_ID_PREFIX","CDK_DESCRIBEDBY_HOST_ATTRIBUTE","nextId","messageRegistry","Map","messagesContainer","AriaDescriber","constructor","_document","describe","hostElement","message","_canBeDescribed","_setMessageId","set","messageElement","referenceCount","has","_createMessageElement","_isElementDescribedByMessage","_addMessageReference","removeDescription","_isElementNode","_removeMessageReference","registeredMessage","get","_deleteMessageElement","childNodes","_deleteMessagesContainer","ngOnDestroy","describedElements","querySelectorAll","i","_removeCdkDescribedByReferenceIds","clear","createElement","textContent","_createMessagesContainer","appendChild","element","removeChild","delete","preExistingContainer","getElementById","parentNode","style","display","body","originalReferenceIds","indexOf","referenceIds","messageId","trimmedMessage","ariaLabel","nodeType","ELEMENT_NODE","ɵfac","AriaDescriber_Factory","t","ɵprov","token","factory","providedIn","ctorParameters","type","undefined","decorators","args","ngInjectableDef","ngDevMode","ɵsetClassMetadata","ARIA_DESCRIBER_PROVIDER_FACTORY","parentDispatcher","ARIA_DESCRIBER_PROVIDER","provide","deps","useFactory","ListKeyManager","_items","_activeItemIndex","_activeItem","_wrap","_letterKeyStream","_typeaheadSubscription","EMPTY","_vertical","_allowedModifierKeys","_skipPredicateFn","item","disabled","_pressedLetters","tabOut","change","changes","subscribe","newItems","itemArray","toArray","newIndex","skipPredicate","predicate","withWrap","shouldWrap","withVerticalOrientation","enabled","withHorizontalOrientation","direction","_horizontal","withAllowedModifierKeys","keys","withTypeAhead","debounceInterval","getLabel","Error","unsubscribe","pipe","keyCode","inputString","items","_getItemsArray","index","toUpperCase","setActiveItem","previousIndex","updateActiveItem","next","onKeydown","event","modifiers","isModifierAllowed","every","modifier","setNextItemActive","setPreviousItemActive","key","toLocaleUpperCase","String","fromCharCode","preventDefault","activeItemIndex","activeItem","setFirstItemActive","_setActiveItemByIndex","setLastItemActive","_setActiveItemByDelta","updateActiveItemIndex","delta","_setActiveInWrapMode","_setActiveInDefaultMode","fallbackDelta","ActiveDescendantKeyManager","setInactiveStyles","setActiveStyles","FocusKeyManager","arguments","_origin","setFocusOrigin","origin","focus","InteractivityChecker","_platform","isDisabled","hasAttribute","isVisible","hasGeometry","getComputedStyle","visibility","isTabbable","isBrowser","frameElement","getFrameElement","getWindow","frameType","nodeName","toLowerCase","getTabIndexValue","BLINK","WEBKIT","tabIndexValue","TRIDENT","FIREFOX","IOS","isPotentiallyTabbableIOS","tabIndex","isFocusable","isPotentiallyFocusable","InteractivityChecker_Factory","window","_a","offsetWidth","offsetHeight","getClientRects","isNativeFormElement","isHiddenInput","isInputElement","isAnchorWithHref","isAnchorElement","hasValidTabIndex","isNaN","parseInt","inputType","node","ownerDocument","defaultView","FocusTrap","_element","_checker","_ngZone","deferAnchors","_hasAttached","startAnchorListener","focusLastTabbableElement","endAnchorListener","focusFirstTabbableElement","_enabled","attachAnchors","value","_startAnchor","_endAnchor","_toggleAnchorTabIndex","destroy","startAnchor","endAnchor","removeEventListener","runOutsideAngular","_createAnchor","addEventListener","insertBefore","nextSibling","focusInitialElementWhenReady","Promise","resolve","_executeOnStable","focusInitialElement","focusFirstTabbableElementWhenReady","focusLastTabbableElementWhenReady","_getRegionBoundary","bound","markers","console","warn","_getFirstTabbableElement","_getLastTabbableElement","redirectToElement","querySelector","hasAttached","root","children","tabbableChild","anchor","classList","add","isEnabled","fn","isStable","onStable","asObservable","FocusTrapFactory","create","deferCaptureElements","FocusTrapFactory_Factory","CdkTrapFocus","_elementRef","_focusTrapFactory","_previouslyFocusedElement","focusTrap","nativeElement","autoCapture","_autoCapture","ngAfterContentInit","activeElement","ngDoCheck","CdkTrapFocus_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","selectors","inputs","exportAs","propDecorators","selector","LIVE_ANNOUNCER_ELEMENT_TOKEN","LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY","LIVE_ANNOUNCER_DEFAULT_OPTIONS","LiveAnnouncer","elementToken","_defaultOptions","_liveElement","_createLiveElement","announce","defaultOptions","politeness","duration","clearTimeout","_previousTimeout","setTimeout","elementClass","previousElements","getElementsByClassName","liveEl","LiveAnnouncer_Factory","CdkAriaLive","_liveAnnouncer","_contentObserver","_politeness","_subscription","observe","elementText","_previousAnnouncedText","CdkAriaLive_Factory","LIVE_ANNOUNCER_PROVIDER_FACTORY","parentAnnouncer","liveElement","ngZone","LIVE_ANNOUNCER_PROVIDER","TOUCH_BUFFER_MS","captureEventListenerOptions","passive","capture","FocusMonitor","_windowFocused","_elementInfo","_monitoredElementCount","_documentKeydownListener","_lastTouchTarget","_setOriginForCurrentEventQueue","_documentMousedownListener","_documentTouchstartListener","_touchTimeoutId","composedPath","target","_windowFocusListener","_windowFocusTimeoutId","monitor","checkChildren","cachedInfo","subject","info","unlisten","_incrementMonitoredElementCount","focusListener","_onFocus","blurListener","_onBlur","stopMonitoring","elementInfo","complete","_setClasses","_decrementMonitoredElementCount","focusVia","options","forEach","_info","_toggleClass","className","shouldSet","remove","_originTimeoutId","_wasCausedByTouch","focusTarget","Node","contains","_lastFocusOrigin","_emitOrigin","relatedTarget","run","document","FocusMonitor_Factory","CdkMonitorFocus","_focusMonitor","cdkFocusChange","_monitorSubscription","emit","CdkMonitorFocus_Factory","outputs","FOCUS_MONITOR_PROVIDER_FACTORY","platform","FOCUS_MONITOR_PROVIDER","isFakeMousedownFromScreenReader","buttons","A11yModule","A11yModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","exports","ngJitMode","ɵɵsetNgModuleScope"],"sources":["C:/Users/dalci/OneDrive/Masaüstü/dotnet-angular-web-explorer/ClientApp/node_modules/@angular/cdk/__ivy_ngcc__/esm2015/a11y.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Inject, Injectable, Optional, SkipSelf, QueryList, Directive, ElementRef, Input, NgZone, isDevMode, InjectionToken, EventEmitter, Output, NgModule, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';\nimport { Subject, Subscription, of } from 'rxjs';\nimport { UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW, TAB, A, Z, ZERO, NINE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { debounceTime, filter, map, tap, take } from 'rxjs/operators';\nimport { Platform, normalizePassiveListenerOptions, PlatformModule } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement } from '@angular/cdk/coercion';\nimport { ContentObserver, ObserversModule } from '@angular/cdk/observers';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * IDs are deliminated by an empty space, as per the spec.\n * @type {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/observers';\nconst ID_DELIMINATOR = ' ';\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @param {?} id\n * @return {?}\n */\nfunction addAriaReferencedId(el, attr, id) {\n    /** @type {?} */\n    const ids = getAriaReferenceIds(el, attr);\n    if (ids.some((/**\n     * @param {?} existingId\n     * @return {?}\n     */\n    existingId => existingId.trim() == id.trim()))) {\n        return;\n    }\n    ids.push(id.trim());\n    el.setAttribute(attr, ids.join(ID_DELIMINATOR));\n}\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @param {?} id\n * @return {?}\n */\nfunction removeAriaReferencedId(el, attr, id) {\n    /** @type {?} */\n    const ids = getAriaReferenceIds(el, attr);\n    /** @type {?} */\n    const filteredIds = ids.filter((/**\n     * @param {?} val\n     * @return {?}\n     */\n    val => val != id.trim()));\n    if (filteredIds.length) {\n        el.setAttribute(attr, filteredIds.join(ID_DELIMINATOR));\n    }\n    else {\n        el.removeAttribute(attr);\n    }\n}\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @return {?}\n */\nfunction getAriaReferenceIds(el, attr) {\n    // Get string array of all individual ids (whitespace deliminated) in the attribute value\n    return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * ID used for the body container where all messages are appended.\n * @type {?}\n */\nconst MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n/**\n * ID prefix used for each created message element.\n * @type {?}\n */\nconst CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n/**\n * Attribute given to each host element that is described by a message element.\n * @type {?}\n */\nconst CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n/**\n * Global incremental identifier for each registered message element.\n * @type {?}\n */\nlet nextId = 0;\n/**\n * Global map of all registered message elements that have been placed into the document.\n * @type {?}\n */\nconst messageRegistry = new Map();\n/**\n * Container for all registered messages.\n * @type {?}\n */\nlet messagesContainer = null;\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n */\nclass AriaDescriber {\n    /**\n     * @param {?} _document\n     */\n    constructor(_document) {\n        this._document = _document;\n    }\n    /**\n     * Adds to the host element an aria-describedby reference to a hidden element that contains\n     * the message. If the same message has already been registered, then it will reuse the created\n     * message element.\n     * @param {?} hostElement\n     * @param {?} message\n     * @return {?}\n     */\n    describe(hostElement, message) {\n        if (!this._canBeDescribed(hostElement, message)) {\n            return;\n        }\n        if (typeof message !== 'string') {\n            // We need to ensure that the element has an ID.\n            this._setMessageId(message);\n            messageRegistry.set(message, { messageElement: message, referenceCount: 0 });\n        }\n        else if (!messageRegistry.has(message)) {\n            this._createMessageElement(message);\n        }\n        if (!this._isElementDescribedByMessage(hostElement, message)) {\n            this._addMessageReference(hostElement, message);\n        }\n    }\n    /**\n     * Removes the host element's aria-describedby reference to the message element.\n     * @param {?} hostElement\n     * @param {?} message\n     * @return {?}\n     */\n    removeDescription(hostElement, message) {\n        if (!this._isElementNode(hostElement)) {\n            return;\n        }\n        if (this._isElementDescribedByMessage(hostElement, message)) {\n            this._removeMessageReference(hostElement, message);\n        }\n        // If the message is a string, it means that it's one that we created for the\n        // consumer so we can remove it safely, otherwise we should leave it in place.\n        if (typeof message === 'string') {\n            /** @type {?} */\n            const registeredMessage = messageRegistry.get(message);\n            if (registeredMessage && registeredMessage.referenceCount === 0) {\n                this._deleteMessageElement(message);\n            }\n        }\n        if (messagesContainer && messagesContainer.childNodes.length === 0) {\n            this._deleteMessagesContainer();\n        }\n    }\n    /**\n     * Unregisters all created message elements and removes the message container.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        const describedElements = this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}]`);\n        for (let i = 0; i < describedElements.length; i++) {\n            this._removeCdkDescribedByReferenceIds(describedElements[i]);\n            describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n        }\n        if (messagesContainer) {\n            this._deleteMessagesContainer();\n        }\n        messageRegistry.clear();\n    }\n    /**\n     * Creates a new element in the visually hidden message container element with the message\n     * as its content and adds it to the message registry.\n     * @private\n     * @param {?} message\n     * @return {?}\n     */\n    _createMessageElement(message) {\n        /** @type {?} */\n        const messageElement = this._document.createElement('div');\n        this._setMessageId(messageElement);\n        messageElement.textContent = message;\n        this._createMessagesContainer();\n        (/** @type {?} */ (messagesContainer)).appendChild(messageElement);\n        messageRegistry.set(message, { messageElement, referenceCount: 0 });\n    }\n    /**\n     * Assigns a unique ID to an element, if it doesn't have one already.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _setMessageId(element) {\n        if (!element.id) {\n            element.id = `${CDK_DESCRIBEDBY_ID_PREFIX}-${nextId++}`;\n        }\n    }\n    /**\n     * Deletes the message element from the global messages container.\n     * @private\n     * @param {?} message\n     * @return {?}\n     */\n    _deleteMessageElement(message) {\n        /** @type {?} */\n        const registeredMessage = messageRegistry.get(message);\n        /** @type {?} */\n        const messageElement = registeredMessage && registeredMessage.messageElement;\n        if (messagesContainer && messageElement) {\n            messagesContainer.removeChild(messageElement);\n        }\n        messageRegistry.delete(message);\n    }\n    /**\n     * Creates the global container for all aria-describedby messages.\n     * @private\n     * @return {?}\n     */\n    _createMessagesContainer() {\n        if (!messagesContainer) {\n            /** @type {?} */\n            const preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID);\n            // When going from the server to the client, we may end up in a situation where there's\n            // already a container on the page, but we don't have a reference to it. Clear the\n            // old container so we don't get duplicates. Doing this, instead of emptying the previous\n            // container, should be slightly faster.\n            if (preExistingContainer) {\n                (/** @type {?} */ (preExistingContainer.parentNode)).removeChild(preExistingContainer);\n            }\n            messagesContainer = this._document.createElement('div');\n            messagesContainer.id = MESSAGES_CONTAINER_ID;\n            messagesContainer.setAttribute('aria-hidden', 'true');\n            messagesContainer.style.display = 'none';\n            this._document.body.appendChild(messagesContainer);\n        }\n    }\n    /**\n     * Deletes the global messages container.\n     * @private\n     * @return {?}\n     */\n    _deleteMessagesContainer() {\n        if (messagesContainer && messagesContainer.parentNode) {\n            messagesContainer.parentNode.removeChild(messagesContainer);\n            messagesContainer = null;\n        }\n    }\n    /**\n     * Removes all cdk-describedby messages that are hosted through the element.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _removeCdkDescribedByReferenceIds(element) {\n        // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n        /** @type {?} */\n        const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby')\n            .filter((/**\n         * @param {?} id\n         * @return {?}\n         */\n        id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0));\n        element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n    }\n    /**\n     * Adds a message reference to the element using aria-describedby and increments the registered\n     * message's reference count.\n     * @private\n     * @param {?} element\n     * @param {?} message\n     * @return {?}\n     */\n    _addMessageReference(element, message) {\n        /** @type {?} */\n        const registeredMessage = (/** @type {?} */ (messageRegistry.get(message)));\n        // Add the aria-describedby reference and set the\n        // describedby_host attribute to mark the element.\n        addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n        element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');\n        registeredMessage.referenceCount++;\n    }\n    /**\n     * Removes a message reference from the element using aria-describedby\n     * and decrements the registered message's reference count.\n     * @private\n     * @param {?} element\n     * @param {?} message\n     * @return {?}\n     */\n    _removeMessageReference(element, message) {\n        /** @type {?} */\n        const registeredMessage = (/** @type {?} */ (messageRegistry.get(message)));\n        registeredMessage.referenceCount--;\n        removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n        element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n    /**\n     * Returns true if the element has been described by the provided message ID.\n     * @private\n     * @param {?} element\n     * @param {?} message\n     * @return {?}\n     */\n    _isElementDescribedByMessage(element, message) {\n        /** @type {?} */\n        const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n        /** @type {?} */\n        const registeredMessage = messageRegistry.get(message);\n        /** @type {?} */\n        const messageId = registeredMessage && registeredMessage.messageElement.id;\n        return !!messageId && referenceIds.indexOf(messageId) != -1;\n    }\n    /**\n     * Determines whether a message can be described on a particular element.\n     * @private\n     * @param {?} element\n     * @param {?} message\n     * @return {?}\n     */\n    _canBeDescribed(element, message) {\n        if (!this._isElementNode(element)) {\n            return false;\n        }\n        if (message && typeof message === 'object') {\n            // We'd have to make some assumptions about the description element's text, if the consumer\n            // passed in an element. Assume that if an element is passed in, the consumer has verified\n            // that it can be used as a description.\n            return true;\n        }\n        /** @type {?} */\n        const trimmedMessage = message == null ? '' : `${message}`.trim();\n        /** @type {?} */\n        const ariaLabel = element.getAttribute('aria-label');\n        // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the\n        // element, because screen readers will end up reading out the same text twice in a row.\n        return trimmedMessage ? (!ariaLabel || ariaLabel.trim() !== trimmedMessage) : false;\n    }\n    /**\n     * Checks whether a node is an Element node.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _isElementNode(element) {\n        return element.nodeType === this._document.ELEMENT_NODE;\n    }\n}\nAriaDescriber.ɵfac = function AriaDescriber_Factory(t) { return new (t || AriaDescriber)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nAriaDescriber.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: AriaDescriber, factory: AriaDescriber.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nAriaDescriber.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ AriaDescriber.ngInjectableDef = ɵɵdefineInjectable({ factory: function AriaDescriber_Factory() { return new AriaDescriber(ɵɵinject(DOCUMENT)); }, token: AriaDescriber, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AriaDescriber, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} _document\n * @return {?}\n */\nfunction ARIA_DESCRIBER_PROVIDER_FACTORY(parentDispatcher, _document) {\n    return parentDispatcher || new AriaDescriber(_document);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\nconst ARIA_DESCRIBER_PROVIDER = {\n    // If there is already an AriaDescriber available, use that. Otherwise, provide a new one.\n    provide: AriaDescriber,\n    deps: [\n        [new Optional(), new SkipSelf(), AriaDescriber],\n        (/** @type {?} */ (DOCUMENT))\n    ],\n    useFactory: ARIA_DESCRIBER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n * @template T\n */\nclass ListKeyManager {\n    /**\n     * @param {?} _items\n     */\n    constructor(_items) {\n        this._items = _items;\n        this._activeItemIndex = -1;\n        this._activeItem = null;\n        this._wrap = false;\n        this._letterKeyStream = new Subject();\n        this._typeaheadSubscription = Subscription.EMPTY;\n        this._vertical = true;\n        this._allowedModifierKeys = [];\n        /**\n         * Predicate function that can be used to check whether an item should be skipped\n         * by the key manager. By default, disabled items are skipped.\n         */\n        this._skipPredicateFn = (/**\n         * @param {?} item\n         * @return {?}\n         */\n        (item) => item.disabled);\n        // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n        this._pressedLetters = [];\n        /**\n         * Stream that emits any time the TAB key is pressed, so components can react\n         * when focus is shifted off of the list.\n         */\n        this.tabOut = new Subject();\n        /**\n         * Stream that emits whenever the active item of the list manager changes.\n         */\n        this.change = new Subject();\n        // We allow for the items to be an array because, in some cases, the consumer may\n        // not have access to a QueryList of the items they want to manage (e.g. when the\n        // items aren't being collected via `ViewChildren` or `ContentChildren`).\n        if (_items instanceof QueryList) {\n            _items.changes.subscribe((/**\n             * @param {?} newItems\n             * @return {?}\n             */\n            (newItems) => {\n                if (this._activeItem) {\n                    /** @type {?} */\n                    const itemArray = newItems.toArray();\n                    /** @type {?} */\n                    const newIndex = itemArray.indexOf(this._activeItem);\n                    if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n                        this._activeItemIndex = newIndex;\n                    }\n                }\n            }));\n        }\n    }\n    /**\n     * Sets the predicate function that determines which items should be skipped by the\n     * list key manager.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} predicate Function that determines whether the given item should be skipped.\n     * @return {THIS}\n     */\n    skipPredicate(predicate) {\n        (/** @type {?} */ (this))._skipPredicateFn = predicate;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Configures wrapping mode, which determines whether the active item will wrap to\n     * the other end of list when there are no more items in the given direction.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} shouldWrap Whether the list should wrap when reaching the end.\n     * @return {THIS}\n     */\n    withWrap(shouldWrap = true) {\n        (/** @type {?} */ (this))._wrap = shouldWrap;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Configures whether the key manager should be able to move the selection vertically.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} enabled Whether vertical selection should be enabled.\n     * @return {THIS}\n     */\n    withVerticalOrientation(enabled = true) {\n        (/** @type {?} */ (this))._vertical = enabled;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Configures the key manager to move the selection horizontally.\n     * Passing in `null` will disable horizontal movement.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction Direction in which the selection can be moved.\n     * @return {THIS}\n     */\n    withHorizontalOrientation(direction) {\n        (/** @type {?} */ (this))._horizontal = direction;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Modifier keys which are allowed to be held down and whose default actions will be prevented\n     * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} keys\n     * @return {THIS}\n     */\n    withAllowedModifierKeys(keys) {\n        (/** @type {?} */ (this))._allowedModifierKeys = keys;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Turns on typeahead mode which allows users to set the active item by typing.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} debounceInterval Time to wait after the last keystroke before setting the active item.\n     * @return {THIS}\n     */\n    withTypeAhead(debounceInterval = 200) {\n        if ((/** @type {?} */ (this))._items.length && (/** @type {?} */ (this))._items.some((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => typeof item.getLabel !== 'function'))) {\n            throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n        }\n        (/** @type {?} */ (this))._typeaheadSubscription.unsubscribe();\n        // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n        // and convert those letters back into a string. Afterwards find the first item that starts\n        // with that string and select it.\n        (/** @type {?} */ (this))._typeaheadSubscription = (/** @type {?} */ (this))._letterKeyStream.pipe(tap((/**\n         * @param {?} keyCode\n         * @return {?}\n         */\n        keyCode => (/** @type {?} */ (this))._pressedLetters.push(keyCode))), debounceTime(debounceInterval), filter((/**\n         * @return {?}\n         */\n        () => (/** @type {?} */ (this))._pressedLetters.length > 0)), map((/**\n         * @return {?}\n         */\n        () => (/** @type {?} */ (this))._pressedLetters.join('')))).subscribe((/**\n         * @param {?} inputString\n         * @return {?}\n         */\n        inputString => {\n            /** @type {?} */\n            const items = (/** @type {?} */ (this))._getItemsArray();\n            // Start at 1 because we want to start searching at the item immediately\n            // following the current active item.\n            for (let i = 1; i < items.length + 1; i++) {\n                /** @type {?} */\n                const index = ((/** @type {?} */ (this))._activeItemIndex + i) % items.length;\n                /** @type {?} */\n                const item = items[index];\n                if (!(/** @type {?} */ (this))._skipPredicateFn(item) &&\n                    (/** @type {?} */ (item.getLabel))().toUpperCase().trim().indexOf(inputString) === 0) {\n                    (/** @type {?} */ (this)).setActiveItem(index);\n                    break;\n                }\n            }\n            (/** @type {?} */ (this))._pressedLetters = [];\n        }));\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    setActiveItem(item) {\n        /** @type {?} */\n        const previousIndex = this._activeItemIndex;\n        this.updateActiveItem(item);\n        if (this._activeItemIndex !== previousIndex) {\n            this.change.next(this._activeItemIndex);\n        }\n    }\n    /**\n     * Sets the active item depending on the key event passed in.\n     * @param {?} event Keyboard event to be used for determining which element should be active.\n     * @return {?}\n     */\n    onKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        /** @type {?} */\n        const modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n        /** @type {?} */\n        const isModifierAllowed = modifiers.every((/**\n         * @param {?} modifier\n         * @return {?}\n         */\n        modifier => {\n            return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\n        }));\n        switch (keyCode) {\n            case TAB:\n                this.tabOut.next();\n                return;\n            case DOWN_ARROW:\n                if (this._vertical && isModifierAllowed) {\n                    this.setNextItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case UP_ARROW:\n                if (this._vertical && isModifierAllowed) {\n                    this.setPreviousItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case RIGHT_ARROW:\n                if (this._horizontal && isModifierAllowed) {\n                    this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case LEFT_ARROW:\n                if (this._horizontal && isModifierAllowed) {\n                    this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            default:\n                if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n                    // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n                    // otherwise fall back to resolving alphanumeric characters via the keyCode.\n                    if (event.key && event.key.length === 1) {\n                        this._letterKeyStream.next(event.key.toLocaleUpperCase());\n                    }\n                    else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n                        this._letterKeyStream.next(String.fromCharCode(keyCode));\n                    }\n                }\n                // Note that we return here, in order to avoid preventing\n                // the default action of non-navigational keys.\n                return;\n        }\n        this._pressedLetters = [];\n        event.preventDefault();\n    }\n    /**\n     * Index of the currently active item.\n     * @return {?}\n     */\n    get activeItemIndex() {\n        return this._activeItemIndex;\n    }\n    /**\n     * The active item.\n     * @return {?}\n     */\n    get activeItem() {\n        return this._activeItem;\n    }\n    /**\n     * Sets the active item to the first enabled item in the list.\n     * @return {?}\n     */\n    setFirstItemActive() {\n        this._setActiveItemByIndex(0, 1);\n    }\n    /**\n     * Sets the active item to the last enabled item in the list.\n     * @return {?}\n     */\n    setLastItemActive() {\n        this._setActiveItemByIndex(this._items.length - 1, -1);\n    }\n    /**\n     * Sets the active item to the next enabled item in the list.\n     * @return {?}\n     */\n    setNextItemActive() {\n        this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n    }\n    /**\n     * Sets the active item to a previous enabled item in the list.\n     * @return {?}\n     */\n    setPreviousItemActive() {\n        this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive()\n            : this._setActiveItemByDelta(-1);\n    }\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    updateActiveItem(item) {\n        /** @type {?} */\n        const itemArray = this._getItemsArray();\n        /** @type {?} */\n        const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n        /** @type {?} */\n        const activeItem = itemArray[index];\n        // Explicitly check for `null` and `undefined` because other falsy values are valid.\n        this._activeItem = activeItem == null ? null : activeItem;\n        this._activeItemIndex = index;\n    }\n    /**\n     * Allows setting of the activeItemIndex without any other effects.\n     * @deprecated Use `updateActiveItem` instead.\n     * \\@breaking-change 8.0.0\n     * @param {?} index The new activeItemIndex.\n     * @return {?}\n     */\n    updateActiveItemIndex(index) {\n        this.updateActiveItem(index);\n    }\n    /**\n     * This method sets the active item, given a list of items and the delta between the\n     * currently active item and the new active item. It will calculate differently\n     * depending on whether wrap mode is turned on.\n     * @private\n     * @param {?} delta\n     * @return {?}\n     */\n    _setActiveItemByDelta(delta) {\n        this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n    }\n    /**\n     * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n     * down the list until it finds an item that is not disabled, and it will wrap if it\n     * encounters either end of the list.\n     * @private\n     * @param {?} delta\n     * @return {?}\n     */\n    _setActiveInWrapMode(delta) {\n        /** @type {?} */\n        const items = this._getItemsArray();\n        for (let i = 1; i <= items.length; i++) {\n            /** @type {?} */\n            const index = (this._activeItemIndex + (delta * i) + items.length) % items.length;\n            /** @type {?} */\n            const item = items[index];\n            if (!this._skipPredicateFn(item)) {\n                this.setActiveItem(index);\n                return;\n            }\n        }\n    }\n    /**\n     * Sets the active item properly given the default mode. In other words, it will\n     * continue to move down the list until it finds an item that is not disabled. If\n     * it encounters either end of the list, it will stop and not wrap.\n     * @private\n     * @param {?} delta\n     * @return {?}\n     */\n    _setActiveInDefaultMode(delta) {\n        this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n    }\n    /**\n     * Sets the active item to the first enabled item starting at the index specified. If the\n     * item is disabled, it will move in the fallbackDelta direction until it either\n     * finds an enabled item or encounters the end of the list.\n     * @private\n     * @param {?} index\n     * @param {?} fallbackDelta\n     * @return {?}\n     */\n    _setActiveItemByIndex(index, fallbackDelta) {\n        /** @type {?} */\n        const items = this._getItemsArray();\n        if (!items[index]) {\n            return;\n        }\n        while (this._skipPredicateFn(items[index])) {\n            index += fallbackDelta;\n            if (!items[index]) {\n                return;\n            }\n        }\n        this.setActiveItem(index);\n    }\n    /**\n     * Returns the items as an array.\n     * @private\n     * @return {?}\n     */\n    _getItemsArray() {\n        return this._items instanceof QueryList ? this._items.toArray() : this._items;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n */\nclass ActiveDescendantKeyManager extends ListKeyManager {\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    setActiveItem(index) {\n        if (this.activeItem) {\n            this.activeItem.setInactiveStyles();\n        }\n        super.setActiveItem(index);\n        if (this.activeItem) {\n            this.activeItem.setActiveStyles();\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n */\nclass FocusKeyManager extends ListKeyManager {\n    constructor() {\n        super(...arguments);\n        this._origin = 'program';\n    }\n    /**\n     * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} origin Focus origin to be used when focusing items.\n     * @return {THIS}\n     */\n    setFocusOrigin(origin) {\n        (/** @type {?} */ (this))._origin = origin;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    setActiveItem(item) {\n        super.setActiveItem(item);\n        if (this.activeItem) {\n            this.activeItem.focus(this._origin);\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// The InteractivityChecker leans heavily on the ally.js accessibility utilities.\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\n// supported.\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\nclass InteractivityChecker {\n    /**\n     * @param {?} _platform\n     */\n    constructor(_platform) {\n        this._platform = _platform;\n    }\n    /**\n     * Gets whether an element is disabled.\n     *\n     * @param {?} element Element to be checked.\n     * @return {?} Whether the element is disabled.\n     */\n    isDisabled(element) {\n        // This does not capture some cases, such as a non-form control with a disabled attribute or\n        // a form control inside of a disabled form, but should capture the most common cases.\n        return element.hasAttribute('disabled');\n    }\n    /**\n     * Gets whether an element is visible for the purposes of interactivity.\n     *\n     * This will capture states like `display: none` and `visibility: hidden`, but not things like\n     * being clipped by an `overflow: hidden` parent or being outside the viewport.\n     *\n     * @param {?} element\n     * @return {?} Whether the element is visible.\n     */\n    isVisible(element) {\n        return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n    }\n    /**\n     * Gets whether an element can be reached via Tab key.\n     * Assumes that the element has already been checked with isFocusable.\n     *\n     * @param {?} element Element to be checked.\n     * @return {?} Whether the element is tabbable.\n     */\n    isTabbable(element) {\n        // Nothing is tabbable on the server 😎\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n        /** @type {?} */\n        const frameElement = getFrameElement(getWindow(element));\n        if (frameElement) {\n            /** @type {?} */\n            const frameType = frameElement && frameElement.nodeName.toLowerCase();\n            // Frame elements inherit their tabindex onto all child elements.\n            if (getTabIndexValue(frameElement) === -1) {\n                return false;\n            }\n            // Webkit and Blink consider anything inside of an <object> element as non-tabbable.\n            if ((this._platform.BLINK || this._platform.WEBKIT) && frameType === 'object') {\n                return false;\n            }\n            // Webkit and Blink disable tabbing to an element inside of an invisible frame.\n            if ((this._platform.BLINK || this._platform.WEBKIT) && !this.isVisible(frameElement)) {\n                return false;\n            }\n        }\n        /** @type {?} */\n        let nodeName = element.nodeName.toLowerCase();\n        /** @type {?} */\n        let tabIndexValue = getTabIndexValue(element);\n        if (element.hasAttribute('contenteditable')) {\n            return tabIndexValue !== -1;\n        }\n        if (nodeName === 'iframe') {\n            // The frames may be tabbable depending on content, but it's not possibly to reliably\n            // investigate the content of the frames.\n            return false;\n        }\n        if (nodeName === 'audio') {\n            if (!element.hasAttribute('controls')) {\n                // By default an <audio> element without the controls enabled is not tabbable.\n                return false;\n            }\n            else if (this._platform.BLINK) {\n                // In Blink <audio controls> elements are always tabbable.\n                return true;\n            }\n        }\n        if (nodeName === 'video') {\n            if (!element.hasAttribute('controls') && this._platform.TRIDENT) {\n                // In Trident a <video> element without the controls enabled is not tabbable.\n                return false;\n            }\n            else if (this._platform.BLINK || this._platform.FIREFOX) {\n                // In Chrome and Firefox <video controls> elements are always tabbable.\n                return true;\n            }\n        }\n        if (nodeName === 'object' && (this._platform.BLINK || this._platform.WEBKIT)) {\n            // In all Blink and WebKit based browsers <object> elements are never tabbable.\n            return false;\n        }\n        // In iOS the browser only considers some specific elements as tabbable.\n        if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n            return false;\n        }\n        return element.tabIndex >= 0;\n    }\n    /**\n     * Gets whether an element can be focused by the user.\n     *\n     * @param {?} element Element to be checked.\n     * @return {?} Whether the element is focusable.\n     */\n    isFocusable(element) {\n        // Perform checks in order of left to most expensive.\n        // Again, naive approach that does not capture many edge cases and browser quirks.\n        return isPotentiallyFocusable(element) && !this.isDisabled(element) && this.isVisible(element);\n    }\n}\nInteractivityChecker.ɵfac = function InteractivityChecker_Factory(t) { return new (t || InteractivityChecker)(ɵngcc0.ɵɵinject(ɵngcc1.Platform)); };\nInteractivityChecker.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: InteractivityChecker, factory: InteractivityChecker.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nInteractivityChecker.ctorParameters = () => [\n    { type: Platform }\n];\n/** @nocollapse */ InteractivityChecker.ngInjectableDef = ɵɵdefineInjectable({ factory: function InteractivityChecker_Factory() { return new InteractivityChecker(ɵɵinject(Platform)); }, token: InteractivityChecker, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InteractivityChecker, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }]; }, null); })();\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n * @param {?} window\n * @return {?}\n */\nfunction getFrameElement(window) {\n    try {\n        return (/** @type {?} */ (window.frameElement));\n    }\n    catch (_a) {\n        return null;\n    }\n}\n/**\n * Checks whether the specified element has any geometry / rectangles.\n * @param {?} element\n * @return {?}\n */\nfunction hasGeometry(element) {\n    // Use logic from jQuery to check for an invisible element.\n    // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n    return !!(element.offsetWidth || element.offsetHeight ||\n        (typeof element.getClientRects === 'function' && element.getClientRects().length));\n}\n/**\n * Gets whether an element's\n * @param {?} element\n * @return {?}\n */\nfunction isNativeFormElement(element) {\n    /** @type {?} */\n    let nodeName = element.nodeName.toLowerCase();\n    return nodeName === 'input' ||\n        nodeName === 'select' ||\n        nodeName === 'button' ||\n        nodeName === 'textarea';\n}\n/**\n * Gets whether an element is an `<input type=\"hidden\">`.\n * @param {?} element\n * @return {?}\n */\nfunction isHiddenInput(element) {\n    return isInputElement(element) && element.type == 'hidden';\n}\n/**\n * Gets whether an element is an anchor that has an href attribute.\n * @param {?} element\n * @return {?}\n */\nfunction isAnchorWithHref(element) {\n    return isAnchorElement(element) && element.hasAttribute('href');\n}\n/**\n * Gets whether an element is an input element.\n * @param {?} element\n * @return {?}\n */\nfunction isInputElement(element) {\n    return element.nodeName.toLowerCase() == 'input';\n}\n/**\n * Gets whether an element is an anchor element.\n * @param {?} element\n * @return {?}\n */\nfunction isAnchorElement(element) {\n    return element.nodeName.toLowerCase() == 'a';\n}\n/**\n * Gets whether an element has a valid tabindex.\n * @param {?} element\n * @return {?}\n */\nfunction hasValidTabIndex(element) {\n    if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n        return false;\n    }\n    /** @type {?} */\n    let tabIndex = element.getAttribute('tabindex');\n    // IE11 parses tabindex=\"\" as the value \"-32768\"\n    if (tabIndex == '-32768') {\n        return false;\n    }\n    return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n * @param {?} element\n * @return {?}\n */\nfunction getTabIndexValue(element) {\n    if (!hasValidTabIndex(element)) {\n        return null;\n    }\n    // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n    /** @type {?} */\n    const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n    return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/**\n * Checks whether the specified element is potentially tabbable on iOS\n * @param {?} element\n * @return {?}\n */\nfunction isPotentiallyTabbableIOS(element) {\n    /** @type {?} */\n    let nodeName = element.nodeName.toLowerCase();\n    /** @type {?} */\n    let inputType = nodeName === 'input' && ((/** @type {?} */ (element))).type;\n    return inputType === 'text'\n        || inputType === 'password'\n        || nodeName === 'select'\n        || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n * @param {?} element\n * @return {?}\n */\nfunction isPotentiallyFocusable(element) {\n    // Inputs are potentially focusable *unless* they're type=\"hidden\".\n    if (isHiddenInput(element)) {\n        return false;\n    }\n    return isNativeFormElement(element) ||\n        isAnchorWithHref(element) ||\n        element.hasAttribute('contenteditable') ||\n        hasValidTabIndex(element);\n}\n/**\n * Gets the parent window of a DOM node with regards of being inside of an iframe.\n * @param {?} node\n * @return {?}\n */\nfunction getWindow(node) {\n    // ownerDocument is null if `node` itself *is* a document.\n    return node.ownerDocument && node.ownerDocument.defaultView || window;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause to two to misalign.\n */\nclass FocusTrap {\n    /**\n     * @param {?} _element\n     * @param {?} _checker\n     * @param {?} _ngZone\n     * @param {?} _document\n     * @param {?=} deferAnchors\n     */\n    constructor(_element, _checker, _ngZone, _document, deferAnchors = false) {\n        this._element = _element;\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._hasAttached = false;\n        // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\n        this.startAnchorListener = (/**\n         * @return {?}\n         */\n        () => this.focusLastTabbableElement());\n        this.endAnchorListener = (/**\n         * @return {?}\n         */\n        () => this.focusFirstTabbableElement());\n        this._enabled = true;\n        if (!deferAnchors) {\n            this.attachAnchors();\n        }\n    }\n    /**\n     * Whether the focus trap is active.\n     * @return {?}\n     */\n    get enabled() { return this._enabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set enabled(value) {\n        this._enabled = value;\n        if (this._startAnchor && this._endAnchor) {\n            this._toggleAnchorTabIndex(value, this._startAnchor);\n            this._toggleAnchorTabIndex(value, this._endAnchor);\n        }\n    }\n    /**\n     * Destroys the focus trap by cleaning up the anchors.\n     * @return {?}\n     */\n    destroy() {\n        /** @type {?} */\n        const startAnchor = this._startAnchor;\n        /** @type {?} */\n        const endAnchor = this._endAnchor;\n        if (startAnchor) {\n            startAnchor.removeEventListener('focus', this.startAnchorListener);\n            if (startAnchor.parentNode) {\n                startAnchor.parentNode.removeChild(startAnchor);\n            }\n        }\n        if (endAnchor) {\n            endAnchor.removeEventListener('focus', this.endAnchorListener);\n            if (endAnchor.parentNode) {\n                endAnchor.parentNode.removeChild(endAnchor);\n            }\n        }\n        this._startAnchor = this._endAnchor = null;\n    }\n    /**\n     * Inserts the anchors into the DOM. This is usually done automatically\n     * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n     * @return {?} Whether the focus trap managed to attach successfuly. This may not be the case\n     * if the target element isn't currently in the DOM.\n     */\n    attachAnchors() {\n        // If we're not on the browser, there can be no focus to trap.\n        if (this._hasAttached) {\n            return true;\n        }\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            if (!this._startAnchor) {\n                this._startAnchor = this._createAnchor();\n                (/** @type {?} */ (this._startAnchor)).addEventListener('focus', this.startAnchorListener);\n            }\n            if (!this._endAnchor) {\n                this._endAnchor = this._createAnchor();\n                (/** @type {?} */ (this._endAnchor)).addEventListener('focus', this.endAnchorListener);\n            }\n        }));\n        if (this._element.parentNode) {\n            this._element.parentNode.insertBefore((/** @type {?} */ (this._startAnchor)), this._element);\n            this._element.parentNode.insertBefore((/** @type {?} */ (this._endAnchor)), this._element.nextSibling);\n            this._hasAttached = true;\n        }\n        return this._hasAttached;\n    }\n    /**\n     * Waits for the zone to stabilize, then either focuses the first element that the\n     * user specified, or the first tabbable element.\n     * @return {?} Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfuly.\n     */\n    focusInitialElementWhenReady() {\n        return new Promise((/**\n         * @param {?} resolve\n         * @return {?}\n         */\n        resolve => {\n            this._executeOnStable((/**\n             * @return {?}\n             */\n            () => resolve(this.focusInitialElement())));\n        }));\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the first tabbable element within the focus trap region.\n     * @return {?} Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfuly.\n     */\n    focusFirstTabbableElementWhenReady() {\n        return new Promise((/**\n         * @param {?} resolve\n         * @return {?}\n         */\n        resolve => {\n            this._executeOnStable((/**\n             * @return {?}\n             */\n            () => resolve(this.focusFirstTabbableElement())));\n        }));\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the last tabbable element within the focus trap region.\n     * @return {?} Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfuly.\n     */\n    focusLastTabbableElementWhenReady() {\n        return new Promise((/**\n         * @param {?} resolve\n         * @return {?}\n         */\n        resolve => {\n            this._executeOnStable((/**\n             * @return {?}\n             */\n            () => resolve(this.focusLastTabbableElement())));\n        }));\n    }\n    /**\n     * Get the specified boundary element of the trapped region.\n     * @private\n     * @param {?} bound The boundary to get (start or end of trapped region).\n     * @return {?} The boundary element.\n     */\n    _getRegionBoundary(bound) {\n        // Contains the deprecated version of selector, for temporary backwards comparability.\n        /** @type {?} */\n        let markers = (/** @type {?} */ (this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` +\n            `[cdkFocusRegion${bound}], ` +\n            `[cdk-focus-${bound}]`)));\n        for (let i = 0; i < markers.length; i++) {\n            // @breaking-change 8.0.0\n            if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n                console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` +\n                    `use 'cdkFocusRegion${bound}' instead. The deprecated ` +\n                    `attribute will be removed in 8.0.0.`, markers[i]);\n            }\n            else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n                console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` +\n                    `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` +\n                    `will be removed in 8.0.0.`, markers[i]);\n            }\n        }\n        if (bound == 'start') {\n            return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n        }\n        return markers.length ?\n            markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n    }\n    /**\n     * Focuses the element that should be focused when the focus trap is initialized.\n     * @return {?} Whether focus was moved successfuly.\n     */\n    focusInitialElement() {\n        // Contains the deprecated version of selector, for temporary backwards comparability.\n        /** @type {?} */\n        const redirectToElement = (/** @type {?} */ (this._element.querySelector(`[cdk-focus-initial], ` +\n            `[cdkFocusInitial]`)));\n        if (redirectToElement) {\n            // @breaking-change 8.0.0\n            if (redirectToElement.hasAttribute(`cdk-focus-initial`)) {\n                console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` +\n                    `use 'cdkFocusInitial' instead. The deprecated attribute ` +\n                    `will be removed in 8.0.0`, redirectToElement);\n            }\n            // Warn the consumer if the element they've pointed to\n            // isn't focusable, when not in production mode.\n            if (isDevMode() && !this._checker.isFocusable(redirectToElement)) {\n                console.warn(`Element matching '[cdkFocusInitial]' is not focusable.`, redirectToElement);\n            }\n            redirectToElement.focus();\n            return true;\n        }\n        return this.focusFirstTabbableElement();\n    }\n    /**\n     * Focuses the first tabbable element within the focus trap region.\n     * @return {?} Whether focus was moved successfuly.\n     */\n    focusFirstTabbableElement() {\n        /** @type {?} */\n        const redirectToElement = this._getRegionBoundary('start');\n        if (redirectToElement) {\n            redirectToElement.focus();\n        }\n        return !!redirectToElement;\n    }\n    /**\n     * Focuses the last tabbable element within the focus trap region.\n     * @return {?} Whether focus was moved successfuly.\n     */\n    focusLastTabbableElement() {\n        /** @type {?} */\n        const redirectToElement = this._getRegionBoundary('end');\n        if (redirectToElement) {\n            redirectToElement.focus();\n        }\n        return !!redirectToElement;\n    }\n    /**\n     * Checks whether the focus trap has successfuly been attached.\n     * @return {?}\n     */\n    hasAttached() {\n        return this._hasAttached;\n    }\n    /**\n     * Get the first tabbable element from a DOM subtree (inclusive).\n     * @private\n     * @param {?} root\n     * @return {?}\n     */\n    _getFirstTabbableElement(root) {\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n            return root;\n        }\n        // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall\n        // back to `childNodes` which includes text nodes, comments etc.\n        /** @type {?} */\n        let children = root.children || root.childNodes;\n        for (let i = 0; i < children.length; i++) {\n            /** @type {?} */\n            let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?\n                this._getFirstTabbableElement((/** @type {?} */ (children[i]))) :\n                null;\n            if (tabbableChild) {\n                return tabbableChild;\n            }\n        }\n        return null;\n    }\n    /**\n     * Get the last tabbable element from a DOM subtree (inclusive).\n     * @private\n     * @param {?} root\n     * @return {?}\n     */\n    _getLastTabbableElement(root) {\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n            return root;\n        }\n        // Iterate in reverse DOM order.\n        /** @type {?} */\n        let children = root.children || root.childNodes;\n        for (let i = children.length - 1; i >= 0; i--) {\n            /** @type {?} */\n            let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?\n                this._getLastTabbableElement((/** @type {?} */ (children[i]))) :\n                null;\n            if (tabbableChild) {\n                return tabbableChild;\n            }\n        }\n        return null;\n    }\n    /**\n     * Creates an anchor element.\n     * @private\n     * @return {?}\n     */\n    _createAnchor() {\n        /** @type {?} */\n        const anchor = this._document.createElement('div');\n        this._toggleAnchorTabIndex(this._enabled, anchor);\n        anchor.classList.add('cdk-visually-hidden');\n        anchor.classList.add('cdk-focus-trap-anchor');\n        anchor.setAttribute('aria-hidden', 'true');\n        return anchor;\n    }\n    /**\n     * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n     * @private\n     * @param {?} isEnabled Whether the focus trap is enabled.\n     * @param {?} anchor Anchor on which to toggle the tabindex.\n     * @return {?}\n     */\n    _toggleAnchorTabIndex(isEnabled, anchor) {\n        // Remove the tabindex completely, rather than setting it to -1, because if the\n        // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n        isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n    }\n    /**\n     * Executes a function when the zone is stable.\n     * @private\n     * @param {?} fn\n     * @return {?}\n     */\n    _executeOnStable(fn) {\n        if (this._ngZone.isStable) {\n            fn();\n        }\n        else {\n            this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(fn);\n        }\n    }\n}\n/**\n * Factory that allows easy instantiation of focus traps.\n */\nclass FocusTrapFactory {\n    /**\n     * @param {?} _checker\n     * @param {?} _ngZone\n     * @param {?} _document\n     */\n    constructor(_checker, _ngZone, _document) {\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._document = _document;\n    }\n    /**\n     * Creates a focus-trapped region around the given element.\n     * @param {?} element The element around which focus will be trapped.\n     * @param {?=} deferCaptureElements Defers the creation of focus-capturing elements to be done\n     *     manually by the user.\n     * @return {?} The created focus trap instance.\n     */\n    create(element, deferCaptureElements = false) {\n        return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);\n    }\n}\nFocusTrapFactory.ɵfac = function FocusTrapFactory_Factory(t) { return new (t || FocusTrapFactory)(ɵngcc0.ɵɵinject(InteractivityChecker), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nFocusTrapFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: FocusTrapFactory, factory: FocusTrapFactory.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nFocusTrapFactory.ctorParameters = () => [\n    { type: InteractivityChecker },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ FocusTrapFactory.ngInjectableDef = ɵɵdefineInjectable({ factory: function FocusTrapFactory_Factory() { return new FocusTrapFactory(ɵɵinject(InteractivityChecker), ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: FocusTrapFactory, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusTrapFactory, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: InteractivityChecker }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/**\n * Directive for trapping focus within a region.\n */\nclass CdkTrapFocus {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusTrapFactory\n     * @param {?} _document\n     */\n    constructor(_elementRef, _focusTrapFactory, _document) {\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        /**\n         * Previously focused element to restore focus to upon destroy when using autoCapture.\n         */\n        this._previouslyFocusedElement = null;\n        this._document = _document;\n        this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n    }\n    /**\n     * Whether the focus trap is active.\n     * @return {?}\n     */\n    get enabled() { return this.focusTrap.enabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set enabled(value) { this.focusTrap.enabled = coerceBooleanProperty(value); }\n    /**\n     * Whether the directive should automatially move focus into the trapped region upon\n     * initialization and return focus to the previous activeElement upon destruction.\n     * @return {?}\n     */\n    get autoCapture() { return this._autoCapture; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autoCapture(value) { this._autoCapture = coerceBooleanProperty(value); }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.focusTrap.destroy();\n        // If we stored a previously focused element when using autoCapture, return focus to that\n        // element now that the trapped region is being destroyed.\n        if (this._previouslyFocusedElement) {\n            this._previouslyFocusedElement.focus();\n            this._previouslyFocusedElement = null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this.focusTrap.attachAnchors();\n        if (this.autoCapture) {\n            this._previouslyFocusedElement = (/** @type {?} */ (this._document.activeElement));\n            this.focusTrap.focusInitialElementWhenReady();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (!this.focusTrap.hasAttached()) {\n            this.focusTrap.attachAnchors();\n        }\n    }\n}\nCdkTrapFocus.ɵfac = function CdkTrapFocus_Factory(t) { return new (t || CdkTrapFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nCdkTrapFocus.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTrapFocus, selectors: [[\"\", \"cdkTrapFocus\", \"\"]], inputs: { enabled: [\"cdkTrapFocus\", \"enabled\"], autoCapture: [\"cdkTrapFocusAutoCapture\", \"autoCapture\"] }, exportAs: [\"cdkTrapFocus\"] });\n/** @nocollapse */\nCdkTrapFocus.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusTrapFactory },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nCdkTrapFocus.propDecorators = {\n    enabled: [{ type: Input, args: ['cdkTrapFocus',] }],\n    autoCapture: [{ type: Input, args: ['cdkTrapFocusAutoCapture',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTrapFocus, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTrapFocus]',\n                exportAs: 'cdkTrapFocus'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: FocusTrapFactory }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { enabled: [{\n            type: Input,\n            args: ['cdkTrapFocus']\n        }], autoCapture: [{\n            type: Input,\n            args: ['cdkTrapFocusAutoCapture']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken('liveAnnouncerElement', {\n    providedIn: 'root',\n    factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {\n    return null;\n}\n/**\n * Injection token that can be used to configure the default options for the LiveAnnouncer.\n * @type {?}\n */\nconst LIVE_ANNOUNCER_DEFAULT_OPTIONS = new InjectionToken('LIVE_ANNOUNCER_DEFAULT_OPTIONS');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass LiveAnnouncer {\n    /**\n     * @param {?} elementToken\n     * @param {?} _ngZone\n     * @param {?} _document\n     * @param {?=} _defaultOptions\n     */\n    constructor(elementToken, _ngZone, _document, _defaultOptions) {\n        this._ngZone = _ngZone;\n        this._defaultOptions = _defaultOptions;\n        // We inject the live element and document as `any` because the constructor signature cannot\n        // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n        // a class decorator causes TypeScript to preserve the constructor signature types.\n        this._document = _document;\n        this._liveElement = elementToken || this._createLiveElement();\n    }\n    /**\n     * @param {?} message\n     * @param {...?} args\n     * @return {?}\n     */\n    announce(message, ...args) {\n        /** @type {?} */\n        const defaultOptions = this._defaultOptions;\n        /** @type {?} */\n        let politeness;\n        /** @type {?} */\n        let duration;\n        if (args.length === 1 && typeof args[0] === 'number') {\n            duration = args[0];\n        }\n        else {\n            [politeness, duration] = args;\n        }\n        this.clear();\n        clearTimeout(this._previousTimeout);\n        if (!politeness) {\n            politeness =\n                (defaultOptions && defaultOptions.politeness) ? defaultOptions.politeness : 'polite';\n        }\n        if (duration == null && defaultOptions) {\n            duration = defaultOptions.duration;\n        }\n        // TODO: ensure changing the politeness works on all environments we support.\n        this._liveElement.setAttribute('aria-live', politeness);\n        // This 100ms timeout is necessary for some browser + screen-reader combinations:\n        // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n        // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n        //   second time without clearing and then using a non-zero delay.\n        // (using JAWS 17 at time of this writing).\n        return this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            return new Promise((/**\n             * @param {?} resolve\n             * @return {?}\n             */\n            resolve => {\n                clearTimeout(this._previousTimeout);\n                this._previousTimeout = setTimeout((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._liveElement.textContent = message;\n                    resolve();\n                    if (typeof duration === 'number') {\n                        this._previousTimeout = setTimeout((/**\n                         * @return {?}\n                         */\n                        () => this.clear()), duration);\n                    }\n                }), 100);\n            }));\n        }));\n    }\n    /**\n     * Clears the current text from the announcer element. Can be used to prevent\n     * screen readers from reading the text out again while the user is going\n     * through the page landmarks.\n     * @return {?}\n     */\n    clear() {\n        if (this._liveElement) {\n            this._liveElement.textContent = '';\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        clearTimeout(this._previousTimeout);\n        if (this._liveElement && this._liveElement.parentNode) {\n            this._liveElement.parentNode.removeChild(this._liveElement);\n            this._liveElement = (/** @type {?} */ (null));\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _createLiveElement() {\n        /** @type {?} */\n        const elementClass = 'cdk-live-announcer-element';\n        /** @type {?} */\n        const previousElements = this._document.getElementsByClassName(elementClass);\n        /** @type {?} */\n        const liveEl = this._document.createElement('div');\n        // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n        for (let i = 0; i < previousElements.length; i++) {\n            (/** @type {?} */ (previousElements[i].parentNode)).removeChild(previousElements[i]);\n        }\n        liveEl.classList.add(elementClass);\n        liveEl.classList.add('cdk-visually-hidden');\n        liveEl.setAttribute('aria-atomic', 'true');\n        liveEl.setAttribute('aria-live', 'polite');\n        this._document.body.appendChild(liveEl);\n        return liveEl;\n    }\n}\nLiveAnnouncer.ɵfac = function LiveAnnouncer_Factory(t) { return new (t || LiveAnnouncer)(ɵngcc0.ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8)); };\nLiveAnnouncer.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: LiveAnnouncer, factory: LiveAnnouncer.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nLiveAnnouncer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LIVE_ANNOUNCER_ELEMENT_TOKEN,] }] },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS,] }] }\n];\n/** @nocollapse */ LiveAnnouncer.ngInjectableDef = ɵɵdefineInjectable({ factory: function LiveAnnouncer_Factory() { return new LiveAnnouncer(ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), ɵɵinject(NgZone), ɵɵinject(DOCUMENT), ɵɵinject(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8)); }, token: LiveAnnouncer, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LiveAnnouncer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]\n            }] }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\nclass CdkAriaLive {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _liveAnnouncer\n     * @param {?} _contentObserver\n     * @param {?} _ngZone\n     */\n    constructor(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {\n        this._elementRef = _elementRef;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._contentObserver = _contentObserver;\n        this._ngZone = _ngZone;\n        this._politeness = 'off';\n    }\n    /**\n     * The aria-live politeness level to use when announcing messages.\n     * @return {?}\n     */\n    get politeness() { return this._politeness; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set politeness(value) {\n        this._politeness = value === 'polite' || value === 'assertive' ? value : 'off';\n        if (this._politeness === 'off') {\n            if (this._subscription) {\n                this._subscription.unsubscribe();\n                this._subscription = null;\n            }\n        }\n        else if (!this._subscription) {\n            this._subscription = this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                return this._contentObserver\n                    .observe(this._elementRef)\n                    .subscribe((/**\n                 * @return {?}\n                 */\n                () => {\n                    // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\n                    /** @type {?} */\n                    const elementText = this._elementRef.nativeElement.textContent;\n                    // The `MutationObserver` fires also for attribute\n                    // changes which we don't want to announce.\n                    if (elementText !== this._previousAnnouncedText) {\n                        this._liveAnnouncer.announce(elementText, this._politeness);\n                        this._previousAnnouncedText = elementText;\n                    }\n                }));\n            }));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._subscription) {\n            this._subscription.unsubscribe();\n        }\n    }\n}\nCdkAriaLive.ɵfac = function CdkAriaLive_Factory(t) { return new (t || CdkAriaLive)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nCdkAriaLive.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkAriaLive, selectors: [[\"\", \"cdkAriaLive\", \"\"]], inputs: { politeness: [\"cdkAriaLive\", \"politeness\"] }, exportAs: [\"cdkAriaLive\"] });\n/** @nocollapse */\nCdkAriaLive.ctorParameters = () => [\n    { type: ElementRef },\n    { type: LiveAnnouncer },\n    { type: ContentObserver },\n    { type: NgZone }\n];\nCdkAriaLive.propDecorators = {\n    politeness: [{ type: Input, args: ['cdkAriaLive',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAriaLive, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkAriaLive]',\n                exportAs: 'cdkAriaLive'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: LiveAnnouncer }, { type: ɵngcc2.ContentObserver }, { type: ɵngcc0.NgZone }]; }, { politeness: [{\n            type: Input,\n            args: ['cdkAriaLive']\n        }] }); })();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentAnnouncer\n * @param {?} liveElement\n * @param {?} _document\n * @param {?} ngZone\n * @return {?}\n */\nfunction LIVE_ANNOUNCER_PROVIDER_FACTORY(parentAnnouncer, liveElement, _document, ngZone) {\n    return parentAnnouncer || new LiveAnnouncer(liveElement, ngZone, _document);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\nconst LIVE_ANNOUNCER_PROVIDER = {\n    // If there is already a LiveAnnouncer available, use that. Otherwise, provide a new one.\n    provide: LiveAnnouncer,\n    deps: [\n        [new Optional(), new SkipSelf(), LiveAnnouncer],\n        [new Optional(), new Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN)],\n        DOCUMENT,\n        NgZone,\n    ],\n    useFactory: LIVE_ANNOUNCER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\n/** @type {?} */\nconst TOUCH_BUFFER_MS = 650;\n/**\n * Event listener options that enable capturing and also\n * mark the listener as passive if the browser supports it.\n * @type {?}\n */\nconst captureEventListenerOptions = normalizePassiveListenerOptions({\n    passive: true,\n    capture: true\n});\n/**\n * Monitors mouse and keyboard events to determine the cause of focus events.\n */\nclass FocusMonitor {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _platform\n     */\n    constructor(_ngZone, _platform) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /**\n         * The focus origin that the next focus event is a result of.\n         */\n        this._origin = null;\n        /**\n         * Whether the window has just been focused.\n         */\n        this._windowFocused = false;\n        /**\n         * Map of elements being monitored to their info.\n         */\n        this._elementInfo = new Map();\n        /**\n         * The number of elements currently being monitored.\n         */\n        this._monitoredElementCount = 0;\n        /**\n         * Event listener for `keydown` events on the document.\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\n         */\n        this._documentKeydownListener = (/**\n         * @return {?}\n         */\n        () => {\n            // On keydown record the origin and clear any touch event that may be in progress.\n            this._lastTouchTarget = null;\n            this._setOriginForCurrentEventQueue('keyboard');\n        });\n        /**\n         * Event listener for `mousedown` events on the document.\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\n         */\n        this._documentMousedownListener = (/**\n         * @return {?}\n         */\n        () => {\n            // On mousedown record the origin only if there is not touch\n            // target, since a mousedown can happen as a result of a touch event.\n            if (!this._lastTouchTarget) {\n                this._setOriginForCurrentEventQueue('mouse');\n            }\n        });\n        /**\n         * Event listener for `touchstart` events on the document.\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\n         */\n        this._documentTouchstartListener = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            // When the touchstart event fires the focus event is not yet in the event queue. This means\n            // we can't rely on the trick used above (setting timeout of 1ms). Instead we wait 650ms to\n            // see if a focus happens.\n            if (this._touchTimeoutId != null) {\n                clearTimeout(this._touchTimeoutId);\n            }\n            // Since this listener is bound on the `document` level, any events coming from the shadow DOM\n            // will have their `target` set to the shadow root. If available, use `composedPath` to\n            // figure out the event target.\n            this._lastTouchTarget = event.composedPath ? event.composedPath()[0] : event.target;\n            this._touchTimeoutId = setTimeout((/**\n             * @return {?}\n             */\n            () => this._lastTouchTarget = null), TOUCH_BUFFER_MS);\n        });\n        /**\n         * Event listener for `focus` events on the window.\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\n         */\n        this._windowFocusListener = (/**\n         * @return {?}\n         */\n        () => {\n            // Make a note of when the window regains focus, so we can\n            // restore the origin info for the focused element.\n            this._windowFocused = true;\n            this._windowFocusTimeoutId = setTimeout((/**\n             * @return {?}\n             */\n            () => this._windowFocused = false));\n        });\n    }\n    /**\n     * @param {?} element\n     * @param {?=} checkChildren\n     * @return {?}\n     */\n    monitor(element, checkChildren = false) {\n        // Do nothing if we're not on the browser platform.\n        if (!this._platform.isBrowser) {\n            return of(null);\n        }\n        /** @type {?} */\n        const nativeElement = coerceElement(element);\n        // Check if we're already monitoring this element.\n        if (this._elementInfo.has(nativeElement)) {\n            /** @type {?} */\n            let cachedInfo = this._elementInfo.get(nativeElement);\n            (/** @type {?} */ (cachedInfo)).checkChildren = checkChildren;\n            return (/** @type {?} */ (cachedInfo)).subject.asObservable();\n        }\n        // Create monitored element info.\n        /** @type {?} */\n        let info = {\n            unlisten: (/**\n             * @return {?}\n             */\n            () => { }),\n            checkChildren: checkChildren,\n            subject: new Subject()\n        };\n        this._elementInfo.set(nativeElement, info);\n        this._incrementMonitoredElementCount();\n        // Start listening. We need to listen in capture phase since focus events don't bubble.\n        /** @type {?} */\n        let focusListener = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => this._onFocus(event, nativeElement));\n        /** @type {?} */\n        let blurListener = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => this._onBlur(event, nativeElement));\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            nativeElement.addEventListener('focus', focusListener, true);\n            nativeElement.addEventListener('blur', blurListener, true);\n        }));\n        // Create an unlisten function for later.\n        info.unlisten = (/**\n         * @return {?}\n         */\n        () => {\n            nativeElement.removeEventListener('focus', focusListener, true);\n            nativeElement.removeEventListener('blur', blurListener, true);\n        });\n        return info.subject.asObservable();\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    stopMonitoring(element) {\n        /** @type {?} */\n        const nativeElement = coerceElement(element);\n        /** @type {?} */\n        const elementInfo = this._elementInfo.get(nativeElement);\n        if (elementInfo) {\n            elementInfo.unlisten();\n            elementInfo.subject.complete();\n            this._setClasses(nativeElement);\n            this._elementInfo.delete(nativeElement);\n            this._decrementMonitoredElementCount();\n        }\n    }\n    /**\n     * @param {?} element\n     * @param {?} origin\n     * @param {?=} options\n     * @return {?}\n     */\n    focusVia(element, origin, options) {\n        /** @type {?} */\n        const nativeElement = coerceElement(element);\n        this._setOriginForCurrentEventQueue(origin);\n        // `focus` isn't available on the server\n        if (typeof nativeElement.focus === 'function') {\n            // Cast the element to `any`, because the TS typings don't have the `options` parameter yet.\n            ((/** @type {?} */ (nativeElement))).focus(options);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._elementInfo.forEach((/**\n         * @param {?} _info\n         * @param {?} element\n         * @return {?}\n         */\n        (_info, element) => this.stopMonitoring(element)));\n    }\n    /**\n     * @private\n     * @param {?} element\n     * @param {?} className\n     * @param {?} shouldSet\n     * @return {?}\n     */\n    _toggleClass(element, className, shouldSet) {\n        if (shouldSet) {\n            element.classList.add(className);\n        }\n        else {\n            element.classList.remove(className);\n        }\n    }\n    /**\n     * Sets the focus classes on the element based on the given focus origin.\n     * @private\n     * @param {?} element The element to update the classes on.\n     * @param {?=} origin The focus origin.\n     * @return {?}\n     */\n    _setClasses(element, origin) {\n        /** @type {?} */\n        const elementInfo = this._elementInfo.get(element);\n        if (elementInfo) {\n            this._toggleClass(element, 'cdk-focused', !!origin);\n            this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');\n            this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\n            this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');\n            this._toggleClass(element, 'cdk-program-focused', origin === 'program');\n        }\n    }\n    /**\n     * Sets the origin and schedules an async function to clear it at the end of the event queue.\n     * @private\n     * @param {?} origin The origin to set.\n     * @return {?}\n     */\n    _setOriginForCurrentEventQueue(origin) {\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            this._origin = origin;\n            // Sometimes the focus origin won't be valid in Firefox because Firefox seems to focus *one*\n            // tick after the interaction event fired. To ensure the focus origin is always correct,\n            // the focus origin will be determined at the beginning of the next tick.\n            this._originTimeoutId = setTimeout((/**\n             * @return {?}\n             */\n            () => this._origin = null), 1);\n        }));\n    }\n    /**\n     * Checks whether the given focus event was caused by a touchstart event.\n     * @private\n     * @param {?} event The focus event to check.\n     * @return {?} Whether the event was caused by a touch.\n     */\n    _wasCausedByTouch(event) {\n        // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n        // Consider the following dom structure:\n        //\n        // <div #parent tabindex=\"0\" cdkFocusClasses>\n        //   <div #child (click)=\"#parent.focus()\"></div>\n        // </div>\n        //\n        // If the user touches the #child element and the #parent is programmatically focused as a\n        // result, this code will still consider it to have been caused by the touch event and will\n        // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n        // relatively small edge-case that can be worked around by using\n        // focusVia(parentEl, 'program') to focus the parent element.\n        //\n        // If we decide that we absolutely must handle this case correctly, we can do so by listening\n        // for the first focus event after the touchstart, and then the first blur event after that\n        // focus event. When that blur event fires we know that whatever follows is not a result of the\n        // touchstart.\n        /** @type {?} */\n        let focusTarget = event.target;\n        return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&\n            (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n    }\n    /**\n     * Handles focus events on a registered element.\n     * @private\n     * @param {?} event The focus event.\n     * @param {?} element The monitored element.\n     * @return {?}\n     */\n    _onFocus(event, element) {\n        // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n        // focus event affecting the monitored element. If we want to use the origin of the first event\n        // instead we should check for the cdk-focused class here and return if the element already has\n        // it. (This only matters for elements that have includesChildren = true).\n        // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n        // focus event affecting the monitored element. If we want to use the origin of the first event\n        // instead we should check for the cdk-focused class here and return if the element already has\n        // it. (This only matters for elements that have includesChildren = true).\n        // If we are not counting child-element-focus as focused, make sure that the event target is the\n        // monitored element itself.\n        /** @type {?} */\n        const elementInfo = this._elementInfo.get(element);\n        if (!elementInfo || (!elementInfo.checkChildren && element !== event.target)) {\n            return;\n        }\n        // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n        // 1) The window has just regained focus, in which case we want to restore the focused state of\n        //    the element from before the window blurred.\n        // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n        // 3) The element was programmatically focused, in which case we should mark the origin as\n        //    'program'.\n        /** @type {?} */\n        let origin = this._origin;\n        if (!origin) {\n            if (this._windowFocused && this._lastFocusOrigin) {\n                origin = this._lastFocusOrigin;\n            }\n            else if (this._wasCausedByTouch(event)) {\n                origin = 'touch';\n            }\n            else {\n                origin = 'program';\n            }\n        }\n        this._setClasses(element, origin);\n        this._emitOrigin(elementInfo.subject, origin);\n        this._lastFocusOrigin = origin;\n    }\n    /**\n     * Handles blur events on a registered element.\n     * @param {?} event The blur event.\n     * @param {?} element The monitored element.\n     * @return {?}\n     */\n    _onBlur(event, element) {\n        // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n        // order to focus another child of the monitored element.\n        /** @type {?} */\n        const elementInfo = this._elementInfo.get(element);\n        if (!elementInfo || (elementInfo.checkChildren && event.relatedTarget instanceof Node &&\n            element.contains(event.relatedTarget))) {\n            return;\n        }\n        this._setClasses(element);\n        this._emitOrigin(elementInfo.subject, null);\n    }\n    /**\n     * @private\n     * @param {?} subject\n     * @param {?} origin\n     * @return {?}\n     */\n    _emitOrigin(subject, origin) {\n        this._ngZone.run((/**\n         * @return {?}\n         */\n        () => subject.next(origin)));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _incrementMonitoredElementCount() {\n        // Register global listeners when first element is monitored.\n        if (++this._monitoredElementCount == 1 && this._platform.isBrowser) {\n            // Note: we listen to events in the capture phase so we\n            // can detect them even if the user stops propagation.\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                document.addEventListener('keydown', this._documentKeydownListener, captureEventListenerOptions);\n                document.addEventListener('mousedown', this._documentMousedownListener, captureEventListenerOptions);\n                document.addEventListener('touchstart', this._documentTouchstartListener, captureEventListenerOptions);\n                window.addEventListener('focus', this._windowFocusListener);\n            }));\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _decrementMonitoredElementCount() {\n        // Unregister global listeners when last element is unmonitored.\n        if (!--this._monitoredElementCount) {\n            document.removeEventListener('keydown', this._documentKeydownListener, captureEventListenerOptions);\n            document.removeEventListener('mousedown', this._documentMousedownListener, captureEventListenerOptions);\n            document.removeEventListener('touchstart', this._documentTouchstartListener, captureEventListenerOptions);\n            window.removeEventListener('focus', this._windowFocusListener);\n            // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n            clearTimeout(this._windowFocusTimeoutId);\n            clearTimeout(this._touchTimeoutId);\n            clearTimeout(this._originTimeoutId);\n        }\n    }\n}\nFocusMonitor.ɵfac = function FocusMonitor_Factory(t) { return new (t || FocusMonitor)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform)); };\nFocusMonitor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: FocusMonitor, factory: FocusMonitor.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nFocusMonitor.ctorParameters = () => [\n    { type: NgZone },\n    { type: Platform }\n];\n/** @nocollapse */ FocusMonitor.ngInjectableDef = ɵɵdefineInjectable({ factory: function FocusMonitor_Factory() { return new FocusMonitor(ɵɵinject(NgZone), ɵɵinject(Platform)); }, token: FocusMonitor, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusMonitor, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }]; }, null); })();\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\nclass CdkMonitorFocus {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusMonitor\n     */\n    constructor(_elementRef, _focusMonitor) {\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this.cdkFocusChange = new EventEmitter();\n        this._monitorSubscription = this._focusMonitor.monitor(this._elementRef, this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus'))\n            .subscribe((/**\n         * @param {?} origin\n         * @return {?}\n         */\n        origin => this.cdkFocusChange.emit(origin)));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._monitorSubscription.unsubscribe();\n    }\n}\nCdkMonitorFocus.ɵfac = function CdkMonitorFocus_Factory(t) { return new (t || CdkMonitorFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusMonitor)); };\nCdkMonitorFocus.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkMonitorFocus, selectors: [[\"\", \"cdkMonitorElementFocus\", \"\"], [\"\", \"cdkMonitorSubtreeFocus\", \"\"]], outputs: { cdkFocusChange: \"cdkFocusChange\" } });\n/** @nocollapse */\nCdkMonitorFocus.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor }\n];\nCdkMonitorFocus.propDecorators = {\n    cdkFocusChange: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkMonitorFocus, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: FocusMonitor }]; }, { cdkFocusChange: [{\n            type: Output\n        }] }); })();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nfunction FOCUS_MONITOR_PROVIDER_FACTORY(parentDispatcher, ngZone, platform) {\n    return parentDispatcher || new FocusMonitor(ngZone, platform);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\nconst FOCUS_MONITOR_PROVIDER = {\n    // If there is already a FocusMonitor available, use that. Otherwise, provide a new one.\n    provide: FocusMonitor,\n    deps: [[new Optional(), new SkipSelf(), FocusMonitor], NgZone, Platform],\n    useFactory: FOCUS_MONITOR_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Screenreaders will often fire fake mousedown events when a focusable element\n * is activated using the keyboard. We can typically distinguish between these faked\n * mousedown events and real mousedown events using the \"buttons\" property. While\n * real mousedowns will indicate the mouse button that was pressed (e.g. \"1\" for\n * the left mouse button), faked mousedowns will usually set the property value to 0.\n * @param {?} event\n * @return {?}\n */\nfunction isFakeMousedownFromScreenReader(event) {\n    return event.buttons === 0;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass A11yModule {\n}\nA11yModule.ɵfac = function A11yModule_Factory(t) { return new (t || A11yModule)(); };\nA11yModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: A11yModule });\nA11yModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [CommonModule, PlatformModule, ObserversModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(A11yModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule, PlatformModule, ObserversModule],\n                declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n                exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(A11yModule, { declarations: function () { return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]; }, imports: function () { return [CommonModule, PlatformModule, ObserversModule]; }, exports: function () { return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { ARIA_DESCRIBER_PROVIDER_FACTORY, MESSAGES_CONTAINER_ID, CDK_DESCRIBEDBY_ID_PREFIX, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, AriaDescriber, ARIA_DESCRIBER_PROVIDER, ActiveDescendantKeyManager, FocusKeyManager, ListKeyManager, FocusTrap, FocusTrapFactory, CdkTrapFocus, InteractivityChecker, LIVE_ANNOUNCER_PROVIDER_FACTORY, LiveAnnouncer, CdkAriaLive, LIVE_ANNOUNCER_PROVIDER, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, LIVE_ANNOUNCER_ELEMENT_TOKEN, LIVE_ANNOUNCER_DEFAULT_OPTIONS, FOCUS_MONITOR_PROVIDER_FACTORY, TOUCH_BUFFER_MS, FocusMonitor, CdkMonitorFocus, FOCUS_MONITOR_PROVIDER, isFakeMousedownFromScreenReader, A11yModule };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}